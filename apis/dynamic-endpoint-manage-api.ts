/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BANKIDDynamicendpointsBody } from '../models';
import { DynamicEndpointHostJson400 } from '../models';
import { ErrorBankNotFound } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { InlineResponse20011 } from '../models';
import { InlineResponse2011 } from '../models';
import { ManagementDynamicendpointsBody } from '../models';
/**
 * DynamicEndpointManageApi - axios parameter creator
 * @export
 */
export const DynamicEndpointManageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Create Bank Level Dynamic Endpoint
         * @param {BANKIDDynamicendpointsBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateBankLevelDynamicEndpoint: async (body: BANKIDDynamicendpointsBody, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateBankLevelDynamicEndpoint.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateBankLevelDynamicEndpoint.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-endpoints`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Create Dynamic Endpoint
         * @param {ManagementDynamicendpointsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateDynamicEndpoint: async (body: ManagementDynamicendpointsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateDynamicEndpoint.');
            }
            const localVarPath = `/obp/v5.1.0/management/dynamic-endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete a Bank Level DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Delete Bank Level Dynamic Endpoint
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteBankLevelDynamicEndpoint: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400DeleteBankLevelDynamicEndpoint.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-endpoints/DYNAMIC_ENDPOINT_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Delete Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteDynamicEndpoint: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/management/dynamic-endpoints/DYNAMIC_ENDPOINT_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Delete My Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteMyDynamicEndpoint: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/my/dynamic-endpoints/DYNAMIC_ENDPOINT_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get a Bank Level Dynamic Endpoint.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Get Bank Level Dynamic Endpoint
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetBankLevelDynamicEndpoint: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetBankLevelDynamicEndpoint.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-endpoints/DYNAMIC_ENDPOINT_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Bank Level Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get Bank Level Dynamic Endpoints
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetBankLevelDynamicEndpoints: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetBankLevelDynamicEndpoints.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-endpoints`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get a Dynamic Endpoint.</p><p>Get one DynamicEndpoint,</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetDynamicEndpoint: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/management/dynamic-endpoints/DYNAMIC_ENDPOINT_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Get Dynamic Endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetDynamicEndpoints: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/management/dynamic-endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get My Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get My Dynamic Endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetMyDynamicEndpoints: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/my/dynamic-endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update Bank Level  dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Update Bank Level Dynamic Endpoint Host
         * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400UpdateBankLevelDynamicEndpointHost: async (body: DynamicEndpointHostJson400, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400UpdateBankLevelDynamicEndpointHost.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400UpdateBankLevelDynamicEndpointHost.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-endpoints/DYNAMIC_ENDPOINT_ID/host`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Update Dynamic Endpoint Host
         * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400UpdateDynamicEndpointHost: async (body: DynamicEndpointHostJson400, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400UpdateDynamicEndpointHost.');
            }
            const localVarPath = `/obp/v5.1.0/management/dynamic-endpoints/DYNAMIC_ENDPOINT_ID/host`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DynamicEndpointManageApi - functional programming interface
 * @export
 */
export const DynamicEndpointManageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Create Bank Level Dynamic Endpoint
         * @param {BANKIDDynamicendpointsBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateBankLevelDynamicEndpoint(body: BANKIDDynamicendpointsBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400CreateBankLevelDynamicEndpoint(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Create Dynamic Endpoint
         * @param {ManagementDynamicendpointsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateDynamicEndpoint(body: ManagementDynamicendpointsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400CreateDynamicEndpoint(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete a Bank Level DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Delete Bank Level Dynamic Endpoint
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteBankLevelDynamicEndpoint(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400DeleteBankLevelDynamicEndpoint(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Delete Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteDynamicEndpoint(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400DeleteDynamicEndpoint(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Delete My Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteMyDynamicEndpoint(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400DeleteMyDynamicEndpoint(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get a Bank Level Dynamic Endpoint.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Get Bank Level Dynamic Endpoint
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetBankLevelDynamicEndpoint(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400GetBankLevelDynamicEndpoint(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Bank Level Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get Bank Level Dynamic Endpoints
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetBankLevelDynamicEndpoints(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400GetBankLevelDynamicEndpoints(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get a Dynamic Endpoint.</p><p>Get one DynamicEndpoint,</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetDynamicEndpoint(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400GetDynamicEndpoint(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Get Dynamic Endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetDynamicEndpoints(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400GetDynamicEndpoints(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get My Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get My Dynamic Endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetMyDynamicEndpoints(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400GetMyDynamicEndpoints(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update Bank Level  dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Update Bank Level Dynamic Endpoint Host
         * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateBankLevelDynamicEndpointHost(body: DynamicEndpointHostJson400, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DynamicEndpointHostJson400>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400UpdateBankLevelDynamicEndpointHost(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Update Dynamic Endpoint Host
         * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateDynamicEndpointHost(body: DynamicEndpointHostJson400, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DynamicEndpointHostJson400>>> {
            const localVarAxiosArgs = await DynamicEndpointManageApiAxiosParamCreator(configuration).oBPv400UpdateDynamicEndpointHost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DynamicEndpointManageApi - factory interface
 * @export
 */
export const DynamicEndpointManageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Create Bank Level Dynamic Endpoint
         * @param {BANKIDDynamicendpointsBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateBankLevelDynamicEndpoint(body: BANKIDDynamicendpointsBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400CreateBankLevelDynamicEndpoint(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Create Dynamic Endpoint
         * @param {ManagementDynamicendpointsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateDynamicEndpoint(body: ManagementDynamicendpointsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400CreateDynamicEndpoint(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete a Bank Level DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Delete Bank Level Dynamic Endpoint
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteBankLevelDynamicEndpoint(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400DeleteBankLevelDynamicEndpoint(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Delete Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteDynamicEndpoint(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400DeleteDynamicEndpoint(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Delete My Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteMyDynamicEndpoint(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400DeleteMyDynamicEndpoint(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get a Bank Level Dynamic Endpoint.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Get Bank Level Dynamic Endpoint
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetBankLevelDynamicEndpoint(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400GetBankLevelDynamicEndpoint(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Bank Level Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get Bank Level Dynamic Endpoints
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetBankLevelDynamicEndpoints(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400GetBankLevelDynamicEndpoints(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get a Dynamic Endpoint.</p><p>Get one DynamicEndpoint,</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get Dynamic Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetDynamicEndpoint(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400GetDynamicEndpoint(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Get Dynamic Endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetDynamicEndpoints(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400GetDynamicEndpoints(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get My Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary Get My Dynamic Endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetMyDynamicEndpoints(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400GetMyDynamicEndpoints(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update Bank Level  dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Update Bank Level Dynamic Endpoint Host
         * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateBankLevelDynamicEndpointHost(body: DynamicEndpointHostJson400, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DynamicEndpointHostJson400>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400UpdateBankLevelDynamicEndpointHost(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
         * @summary  Update Dynamic Endpoint Host
         * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateDynamicEndpointHost(body: DynamicEndpointHostJson400, options?: AxiosRequestConfig): Promise<AxiosResponse<DynamicEndpointHostJson400>> {
            return DynamicEndpointManageApiFp(configuration).oBPv400UpdateDynamicEndpointHost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DynamicEndpointManageApi - object-oriented interface
 * @export
 * @class DynamicEndpointManageApi
 * @extends {BaseAPI}
 */
export class DynamicEndpointManageApi extends BaseAPI {
    /**
     * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary Create Bank Level Dynamic Endpoint
     * @param {BANKIDDynamicendpointsBody} body JObject object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400CreateBankLevelDynamicEndpoint(body: BANKIDDynamicendpointsBody, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400CreateBankLevelDynamicEndpoint(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create dynamic endpoints.</p><p>Create dynamic endpoints with one json format swagger content.</p><p>If the host of swagger is <code>dynamic_entity</code>, then you need link the swagger fields to the dynamic entity fields,<br />please check <code>Endpoint Mapping</code> endpoints.</p><p>If the host of swagger is <code>obp_mock</code>, every dynamic endpoint will return example response of swagger,</p><p>when create MethodRouting for given dynamic endpoint, it will be routed to given url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary Create Dynamic Endpoint
     * @param {ManagementDynamicendpointsBody} body JObject object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400CreateDynamicEndpoint(body: ManagementDynamicendpointsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400CreateDynamicEndpoint(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete a Bank Level DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary  Delete Bank Level Dynamic Endpoint
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400DeleteBankLevelDynamicEndpoint(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400DeleteBankLevelDynamicEndpoint(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary  Delete Dynamic Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400DeleteDynamicEndpoint(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400DeleteDynamicEndpoint(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete a DynamicEndpoint specified by DYNAMIC_ENDPOINT_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary Delete My Dynamic Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400DeleteMyDynamicEndpoint(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400DeleteMyDynamicEndpoint(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get a Bank Level Dynamic Endpoint.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary  Get Bank Level Dynamic Endpoint
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400GetBankLevelDynamicEndpoint(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400GetBankLevelDynamicEndpoint(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Bank Level Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary Get Bank Level Dynamic Endpoints
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400GetBankLevelDynamicEndpoints(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20011>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400GetBankLevelDynamicEndpoints(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get a Dynamic Endpoint.</p><p>Get one DynamicEndpoint,</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary Get Dynamic Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400GetDynamicEndpoint(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400GetDynamicEndpoint(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary  Get Dynamic Endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400GetDynamicEndpoints(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20011>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400GetDynamicEndpoints(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get My Dynamic Endpoints.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary Get My Dynamic Endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400GetMyDynamicEndpoints(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20011>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400GetMyDynamicEndpoints(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update Bank Level  dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary  Update Bank Level Dynamic Endpoint Host
     * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400UpdateBankLevelDynamicEndpointHost(body: DynamicEndpointHostJson400, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DynamicEndpointHostJson400>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400UpdateBankLevelDynamicEndpointHost(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update dynamic endpoint Host.<br />The value can be obp_mock, dynamic_entity, or some service url.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p>
     * @summary  Update Dynamic Endpoint Host
     * @param {DynamicEndpointHostJson400} body DynamicEndpointHostJson400 object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicEndpointManageApi
     */
    public async oBPv400UpdateDynamicEndpointHost(body: DynamicEndpointHostJson400, options?: AxiosRequestConfig) : Promise<AxiosResponse<DynamicEndpointHostJson400>> {
        return DynamicEndpointManageApiFp(this.configuration).oBPv400UpdateDynamicEndpointHost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
