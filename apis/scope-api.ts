/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CONSUMERIDScopesBody } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { InlineResponse200100 } from '../models';
import { InlineResponse20133 } from '../models';
/**
 * ScopeApi - axios parameter creator
 * @export
 */
export const ScopeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Delete Consumer Scope specified by SCOPE_ID for an consumer specified by CONSUMER_ID</p><p>Authentication is required and the user needs to be a Super Admin.<br />Super Admins are listed in the Props file.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#scope_id\">SCOPE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Consumer Scope
         * @param {string} SCOPE_ID the scope id
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv300DeleteScope: async (SCOPE_ID: string, CONSUMER_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'SCOPE_ID' is not null or undefined
            if (SCOPE_ID === null || SCOPE_ID === undefined) {
                throw new RequiredError('SCOPE_ID','Required parameter SCOPE_ID was null or undefined when calling oBPv300DeleteScope.');
            }
            // verify required parameter 'CONSUMER_ID' is not null or undefined
            if (CONSUMER_ID === null || CONSUMER_ID === undefined) {
                throw new RequiredError('CONSUMER_ID','Required parameter CONSUMER_ID was null or undefined when calling oBPv300DeleteScope.');
            }
            const localVarPath = `/obp/v3.0.0/consumers/{CONSUMER_ID}/scope/{SCOPE_ID}`
                .replace(`{${"SCOPE_ID"}}`, encodeURIComponent(String(SCOPE_ID)))
                .replace(`{${"CONSUMER_ID"}}`, encodeURIComponent(String(CONSUMER_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create Scope. Grant Role to Consumer.</p><p>Scopes are used to grant System or Bank level roles to the Consumer (App). (For Account level privileges, see Views)</p><p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p><p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
         * @summary Create Scope for a Consumer
         * @param {CONSUMERIDScopesBody} body JObject object that needs to be added.
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400AddScope: async (body: CONSUMERIDScopesBody, CONSUMER_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400AddScope.');
            }
            // verify required parameter 'CONSUMER_ID' is not null or undefined
            if (CONSUMER_ID === null || CONSUMER_ID === undefined) {
                throw new RequiredError('CONSUMER_ID','Required parameter CONSUMER_ID was null or undefined when calling oBPv400AddScope.');
            }
            const localVarPath = `/obp/v4.0.0/consumers/{CONSUMER_ID}/scopes`
                .replace(`{${"CONSUMER_ID"}}`, encodeURIComponent(String(CONSUMER_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get all the scopes for an consumer specified by CONSUMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#list\"><strong>list</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
         * @summary Get Scopes for Consumer
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetScopes: async (CONSUMER_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CONSUMER_ID' is not null or undefined
            if (CONSUMER_ID === null || CONSUMER_ID === undefined) {
                throw new RequiredError('CONSUMER_ID','Required parameter CONSUMER_ID was null or undefined when calling oBPv400GetScopes.');
            }
            const localVarPath = `/obp/v4.0.0/consumers/{CONSUMER_ID}/scopes`
                .replace(`{${"CONSUMER_ID"}}`, encodeURIComponent(String(CONSUMER_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScopeApi - functional programming interface
 * @export
 */
export const ScopeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Delete Consumer Scope specified by SCOPE_ID for an consumer specified by CONSUMER_ID</p><p>Authentication is required and the user needs to be a Super Admin.<br />Super Admins are listed in the Props file.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#scope_id\">SCOPE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Consumer Scope
         * @param {string} SCOPE_ID the scope id
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300DeleteScope(SCOPE_ID: string, CONSUMER_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ScopeApiAxiosParamCreator(configuration).oBPv300DeleteScope(SCOPE_ID, CONSUMER_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create Scope. Grant Role to Consumer.</p><p>Scopes are used to grant System or Bank level roles to the Consumer (App). (For Account level privileges, see Views)</p><p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p><p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
         * @summary Create Scope for a Consumer
         * @param {CONSUMERIDScopesBody} body JObject object that needs to be added.
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400AddScope(body: CONSUMERIDScopesBody, CONSUMER_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20133>>> {
            const localVarAxiosArgs = await ScopeApiAxiosParamCreator(configuration).oBPv400AddScope(body, CONSUMER_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get all the scopes for an consumer specified by CONSUMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#list\"><strong>list</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
         * @summary Get Scopes for Consumer
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetScopes(CONSUMER_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200100>>> {
            const localVarAxiosArgs = await ScopeApiAxiosParamCreator(configuration).oBPv400GetScopes(CONSUMER_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ScopeApi - factory interface
 * @export
 */
export const ScopeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Delete Consumer Scope specified by SCOPE_ID for an consumer specified by CONSUMER_ID</p><p>Authentication is required and the user needs to be a Super Admin.<br />Super Admins are listed in the Props file.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#scope_id\">SCOPE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Consumer Scope
         * @param {string} SCOPE_ID the scope id
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300DeleteScope(SCOPE_ID: string, CONSUMER_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ScopeApiFp(configuration).oBPv300DeleteScope(SCOPE_ID, CONSUMER_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create Scope. Grant Role to Consumer.</p><p>Scopes are used to grant System or Bank level roles to the Consumer (App). (For Account level privileges, see Views)</p><p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p><p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
         * @summary Create Scope for a Consumer
         * @param {CONSUMERIDScopesBody} body JObject object that needs to be added.
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400AddScope(body: CONSUMERIDScopesBody, CONSUMER_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20133>> {
            return ScopeApiFp(configuration).oBPv400AddScope(body, CONSUMER_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get all the scopes for an consumer specified by CONSUMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#list\"><strong>list</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
         * @summary Get Scopes for Consumer
         * @param {string} CONSUMER_ID new consumer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetScopes(CONSUMER_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200100>> {
            return ScopeApiFp(configuration).oBPv400GetScopes(CONSUMER_ID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScopeApi - object-oriented interface
 * @export
 * @class ScopeApi
 * @extends {BaseAPI}
 */
export class ScopeApi extends BaseAPI {
    /**
     * <p>Delete Consumer Scope specified by SCOPE_ID for an consumer specified by CONSUMER_ID</p><p>Authentication is required and the user needs to be a Super Admin.<br />Super Admins are listed in the Props file.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#scope_id\">SCOPE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Consumer Scope
     * @param {string} SCOPE_ID the scope id
     * @param {string} CONSUMER_ID new consumer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public async oBPv300DeleteScope(SCOPE_ID: string, CONSUMER_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ScopeApiFp(this.configuration).oBPv300DeleteScope(SCOPE_ID, CONSUMER_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create Scope. Grant Role to Consumer.</p><p>Scopes are used to grant System or Bank level roles to the Consumer (App). (For Account level privileges, see Views)</p><p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p><p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
     * @summary Create Scope for a Consumer
     * @param {CONSUMERIDScopesBody} body JObject object that needs to be added.
     * @param {string} CONSUMER_ID new consumer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public async oBPv400AddScope(body: CONSUMERIDScopesBody, CONSUMER_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20133>> {
        return ScopeApiFp(this.configuration).oBPv400AddScope(body, CONSUMER_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get all the scopes for an consumer specified by CONSUMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONSUMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#list\"><strong>list</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scope_id\"><strong>scope_id</strong></a>:</p>
     * @summary Get Scopes for Consumer
     * @param {string} CONSUMER_ID new consumer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public async oBPv400GetScopes(CONSUMER_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200100>> {
        return ScopeApiFp(this.configuration).oBPv400GetScopes(CONSUMER_ID, options).then((request) => request(this.axios, this.basePath));
    }
}
