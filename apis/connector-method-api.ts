/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ConnectormethodsCONNECTORMETHODIDBody } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { InlineResponse200115 } from '../models';
import { InlineResponse20140 } from '../models';
import { ManagementConnectormethodsBody } from '../models';
/**
 * ConnectorMethodApi - axios parameter creator
 * @export
 */
export const ConnectorMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Create Connector Method
         * @param {ManagementConnectormethodsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateConnectorMethod: async (body: ManagementConnectormethodsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateConnectorMethod.');
            }
            const localVarPath = `/obp/v4.0.0/management/connector-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get all Connector Methods.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Connector Methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetAllConnectorMethods: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/connector-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get an internal connector by CONNECTOR_METHOD_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get Connector Method by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetConnectorMethod: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/connector-methods/CONNECTOR_METHOD_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
         * @summary Update Connector Method
         * @param {ConnectormethodsCONNECTORMETHODIDBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400UpdateConnectorMethod: async (body: ConnectormethodsCONNECTORMETHODIDBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400UpdateConnectorMethod.');
            }
            const localVarPath = `/obp/v4.0.0/management/connector-methods/CONNECTOR_METHOD_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectorMethodApi - functional programming interface
 * @export
 */
export const ConnectorMethodApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Create Connector Method
         * @param {ManagementConnectormethodsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateConnectorMethod(body: ManagementConnectormethodsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20140>>> {
            const localVarAxiosArgs = await ConnectorMethodApiAxiosParamCreator(configuration).oBPv400CreateConnectorMethod(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get all Connector Methods.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Connector Methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllConnectorMethods(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200115>>> {
            const localVarAxiosArgs = await ConnectorMethodApiAxiosParamCreator(configuration).oBPv400GetAllConnectorMethods(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get an internal connector by CONNECTOR_METHOD_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get Connector Method by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetConnectorMethod(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20140>>> {
            const localVarAxiosArgs = await ConnectorMethodApiAxiosParamCreator(configuration).oBPv400GetConnectorMethod(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
         * @summary Update Connector Method
         * @param {ConnectormethodsCONNECTORMETHODIDBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateConnectorMethod(body: ConnectormethodsCONNECTORMETHODIDBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20140>>> {
            const localVarAxiosArgs = await ConnectorMethodApiAxiosParamCreator(configuration).oBPv400UpdateConnectorMethod(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConnectorMethodApi - factory interface
 * @export
 */
export const ConnectorMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Create Connector Method
         * @param {ManagementConnectormethodsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateConnectorMethod(body: ManagementConnectormethodsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20140>> {
            return ConnectorMethodApiFp(configuration).oBPv400CreateConnectorMethod(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get all Connector Methods.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Connector Methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllConnectorMethods(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200115>> {
            return ConnectorMethodApiFp(configuration).oBPv400GetAllConnectorMethods(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get an internal connector by CONNECTOR_METHOD_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get Connector Method by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetConnectorMethod(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20140>> {
            return ConnectorMethodApiFp(configuration).oBPv400GetConnectorMethod(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
         * @summary Update Connector Method
         * @param {ConnectormethodsCONNECTORMETHODIDBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateConnectorMethod(body: ConnectormethodsCONNECTORMETHODIDBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20140>> {
            return ConnectorMethodApiFp(configuration).oBPv400UpdateConnectorMethod(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConnectorMethodApi - object-oriented interface
 * @export
 * @class ConnectorMethodApi
 * @extends {BaseAPI}
 */
export class ConnectorMethodApi extends BaseAPI {
    /**
     * <p>Create an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
     * @summary Create Connector Method
     * @param {ManagementConnectormethodsBody} body JObject object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorMethodApi
     */
    public async oBPv400CreateConnectorMethod(body: ManagementConnectormethodsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20140>> {
        return ConnectorMethodApiFp(this.configuration).oBPv400CreateConnectorMethod(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get all Connector Methods.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
     * @summary Get all Connector Methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorMethodApi
     */
    public async oBPv400GetAllConnectorMethods(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200115>> {
        return ConnectorMethodApiFp(this.configuration).oBPv400GetAllConnectorMethods(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get an internal connector by CONNECTOR_METHOD_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
     * @summary Get Connector Method by Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorMethodApi
     */
    public async oBPv400GetConnectorMethod(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20140>> {
        return ConnectorMethodApiFp(this.configuration).oBPv400GetConnectorMethod(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update an internal connector.</p><p>The method_body is URL-encoded format String</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">CONNECTOR_METHOD_ID</a>: ace0352a-9a0f-4bfa-b30b-9003aa467f51</p><p><strong>JSON response body fields:</strong></p>
     * @summary Update Connector Method
     * @param {ConnectormethodsCONNECTORMETHODIDBody} body JObject object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorMethodApi
     */
    public async oBPv400UpdateConnectorMethod(body: ConnectormethodsCONNECTORMETHODIDBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20140>> {
        return ConnectorMethodApiFp(this.configuration).oBPv400UpdateConnectorMethod(body, options).then((request) => request(this.axios, this.basePath));
    }
}
