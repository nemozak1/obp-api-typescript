/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddCustomerMessageJson } from '../models';
import { AgentJsonV510 } from '../models';
import { CreateMessageJsonV400 } from '../models';
import { CustomerJsonV310 } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { PostAgentJsonV510 } from '../models';
import { PostCustomerJsonV500 } from '../models';
import { PutAgentJsonV510 } from '../models';
import { SuccessMessage } from '../models';
/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv140AddCustomerMessage: async (body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv140AddCustomerMessage.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv140AddCustomerMessage.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv140AddCustomerMessage.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customer/{CUSTOMER_ID}/messages`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateCustomerMessage: async (body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateCustomerMessage.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400CreateCustomerMessage.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateCustomerMessage.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/messages`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Create Customer
         * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateCustomer: async (body: PostCustomerJsonV500, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv500CreateCustomer.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500CreateCustomer.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customers`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Create Agent
         * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CreateAgent: async (body: PostAgentJsonV510, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510CreateAgent.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510CreateAgent.');
            }
            const localVarPath = `/obp/v5.1.0/banks/{BANK_ID}/agents`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Update Agent status
         * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510UpdateAgentStatus: async (body: PutAgentJsonV510, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510UpdateAgentStatus.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510UpdateAgentStatus.');
            }
            const localVarPath = `/obp/v5.1.0/banks/{BANK_ID}/agents/AGENT_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140AddCustomerMessage(body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).oBPv140AddCustomerMessage(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCustomerMessage(body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).oBPv400CreateCustomerMessage(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Create Customer
         * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateCustomer(body: PostCustomerJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).oBPv500CreateCustomer(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Create Agent
         * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateAgent(body: PostAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AgentJsonV510>>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).oBPv510CreateAgent(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Update Agent status
         * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateAgentStatus(body: PutAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AgentJsonV510>>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).oBPv510UpdateAgentStatus(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140AddCustomerMessage(body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return PersonApiFp(configuration).oBPv140AddCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCustomerMessage(body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return PersonApiFp(configuration).oBPv400CreateCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Create Customer
         * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateCustomer(body: PostCustomerJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return PersonApiFp(configuration).oBPv500CreateCustomer(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Create Agent
         * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateAgent(body: PostAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AgentJsonV510>> {
            return PersonApiFp(configuration).oBPv510CreateAgent(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Update Agent status
         * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateAgentStatus(body: PutAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AgentJsonV510>> {
            return PersonApiFp(configuration).oBPv510UpdateAgentStatus(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export class PersonApi extends BaseAPI {
    /**
     * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Create Customer Message
     * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public async oBPv140AddCustomerMessage(body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return PersonApiFp(this.configuration).oBPv140AddCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Create Customer Message
     * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public async oBPv400CreateCustomerMessage(body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return PersonApiFp(this.configuration).oBPv400CreateCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Create Customer
     * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public async oBPv500CreateCustomer(body: PostCustomerJsonV500, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return PersonApiFp(this.configuration).oBPv500CreateCustomer(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
     * @summary Create Agent
     * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public async oBPv510CreateAgent(body: PostAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AgentJsonV510>> {
        return PersonApiFp(this.configuration).oBPv510CreateAgent(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
     * @summary Update Agent status
     * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public async oBPv510UpdateAgentStatus(body: PutAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AgentJsonV510>> {
        return PersonApiFp(this.configuration).oBPv510UpdateAgentStatus(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
}
