/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorBankNotFound } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { PostUserInvitationAnonymousJsonV400 } from '../models';
import { PostUserInvitationJsonV400 } from '../models';
import { UserInvitationJsonV400 } from '../models';
/**
 * UserInvitationApi - axios parameter creator
 * @export
 */
export const UserInvitationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create User Invitation.</p><p>This endpoint will send an invitation email to the developers, then they can use the link to create the obp user.</p><p>purpose filed only support:List(DEVELOPER, CUSTOMER).</p><p>You can customise the email details use the following webui props:</p><p>when purpose == DEVELOPER<br />webui_developer_user_invitation_email_subject<br />webui_developer_user_invitation_email_from<br />webui_developer_user_invitation_email_text<br />webui_developer_user_invitation_email_html_text</p><p>when purpose = == CUSTOMER<br />webui_customer_user_invitation_email_subject<br />webui_customer_user_invitation_email_from<br />webui_customer_user_invitation_email_text<br />webui_customer_user_invitation_email_html_text</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;i&#108;&#116;&#x6f;&#58;f&#x65;l&#x69;x&#115;&#109;&#105;&#116;&#104;@&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;o&#x6d;\">f&#x65;&#108;i&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;&#111;:f&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;&#x68;@&#x65;&#x78;&#97;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;&#101;&#108;&#105;&#x78;&#115;&#x6d;&#105;&#116;&#104;&#x40;&#x65;&#x78;&#97;&#x6d;p&#x6c;e&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create User Invitation
         * @param {PostUserInvitationJsonV400} body PostUserInvitationJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateUserInvitation: async (body: PostUserInvitationJsonV400, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateUserInvitation.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateUserInvitation.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user-invitation`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get User Invitation</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">SECRET_LINK</a>: SECRET_LINK</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#101;l&#x69;x&#115;&#109;&#105;&#x74;h&#64;&#x65;&#x78;&#x61;&#109;p&#x6c;&#101;&#46;c&#111;&#x6d;\">&#102;&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;h&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitation
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetUserInvitation: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetUserInvitation.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user-invitations/SECRET_LINK`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get User Invitation Information.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>secret_key</strong></a>: secret_key</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;&#116;o&#58;&#102;&#101;&#108;&#105;&#x78;&#115;&#109;&#105;&#x74;&#104;&#64;e&#120;a&#x6d;&#x70;&#108;e.&#99;&#x6f;&#109;\">&#102;&#x65;l&#105;x&#x73;m&#x69;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;m&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitation Information
         * @param {PostUserInvitationAnonymousJsonV400} body PostUserInvitationAnonymousJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetUserInvitationAnonymous: async (body: PostUserInvitationAnonymousJsonV400, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400GetUserInvitationAnonymous.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetUserInvitationAnonymous.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user-invitations`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get User Invitations</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#102;&#x65;&#108;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;&#x40;&#x65;&#x78;a&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#x65;&#108;&#x69;xs&#109;i&#x74;&#x68;&#x40;&#101;&#120;a&#109;&#x70;l&#101;&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitations
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetUserInvitations: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetUserInvitations.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user-invitations`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserInvitationApi - functional programming interface
 * @export
 */
export const UserInvitationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create User Invitation.</p><p>This endpoint will send an invitation email to the developers, then they can use the link to create the obp user.</p><p>purpose filed only support:List(DEVELOPER, CUSTOMER).</p><p>You can customise the email details use the following webui props:</p><p>when purpose == DEVELOPER<br />webui_developer_user_invitation_email_subject<br />webui_developer_user_invitation_email_from<br />webui_developer_user_invitation_email_text<br />webui_developer_user_invitation_email_html_text</p><p>when purpose = == CUSTOMER<br />webui_customer_user_invitation_email_subject<br />webui_customer_user_invitation_email_from<br />webui_customer_user_invitation_email_text<br />webui_customer_user_invitation_email_html_text</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;i&#108;&#116;&#x6f;&#58;f&#x65;l&#x69;x&#115;&#109;&#105;&#116;&#104;@&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;o&#x6d;\">f&#x65;&#108;i&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;&#111;:f&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;&#x68;@&#x65;&#x78;&#97;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;&#101;&#108;&#105;&#x78;&#115;&#x6d;&#105;&#116;&#104;&#x40;&#x65;&#x78;&#97;&#x6d;p&#x6c;e&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create User Invitation
         * @param {PostUserInvitationJsonV400} body PostUserInvitationJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateUserInvitation(body: PostUserInvitationJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserInvitationJsonV400>>> {
            const localVarAxiosArgs = await UserInvitationApiAxiosParamCreator(configuration).oBPv400CreateUserInvitation(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get User Invitation</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">SECRET_LINK</a>: SECRET_LINK</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#101;l&#x69;x&#115;&#109;&#105;&#x74;h&#64;&#x65;&#x78;&#x61;&#109;p&#x6c;&#101;&#46;c&#111;&#x6d;\">&#102;&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;h&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitation
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserInvitation(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserInvitationJsonV400>>> {
            const localVarAxiosArgs = await UserInvitationApiAxiosParamCreator(configuration).oBPv400GetUserInvitation(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get User Invitation Information.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>secret_key</strong></a>: secret_key</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;&#116;o&#58;&#102;&#101;&#108;&#105;&#x78;&#115;&#109;&#105;&#x74;&#104;&#64;e&#120;a&#x6d;&#x70;&#108;e.&#99;&#x6f;&#109;\">&#102;&#x65;l&#105;x&#x73;m&#x69;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;m&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitation Information
         * @param {PostUserInvitationAnonymousJsonV400} body PostUserInvitationAnonymousJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserInvitationAnonymous(body: PostUserInvitationAnonymousJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserInvitationJsonV400>>> {
            const localVarAxiosArgs = await UserInvitationApiAxiosParamCreator(configuration).oBPv400GetUserInvitationAnonymous(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get User Invitations</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#102;&#x65;&#108;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;&#x40;&#x65;&#x78;a&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#x65;&#108;&#x69;xs&#109;i&#x74;&#x68;&#x40;&#101;&#120;a&#109;&#x70;l&#101;&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitations
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserInvitations(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserInvitationJsonV400>>> {
            const localVarAxiosArgs = await UserInvitationApiAxiosParamCreator(configuration).oBPv400GetUserInvitations(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserInvitationApi - factory interface
 * @export
 */
export const UserInvitationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create User Invitation.</p><p>This endpoint will send an invitation email to the developers, then they can use the link to create the obp user.</p><p>purpose filed only support:List(DEVELOPER, CUSTOMER).</p><p>You can customise the email details use the following webui props:</p><p>when purpose == DEVELOPER<br />webui_developer_user_invitation_email_subject<br />webui_developer_user_invitation_email_from<br />webui_developer_user_invitation_email_text<br />webui_developer_user_invitation_email_html_text</p><p>when purpose = == CUSTOMER<br />webui_customer_user_invitation_email_subject<br />webui_customer_user_invitation_email_from<br />webui_customer_user_invitation_email_text<br />webui_customer_user_invitation_email_html_text</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;i&#108;&#116;&#x6f;&#58;f&#x65;l&#x69;x&#115;&#109;&#105;&#116;&#104;@&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;o&#x6d;\">f&#x65;&#108;i&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;&#111;:f&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;&#x68;@&#x65;&#x78;&#97;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;&#101;&#108;&#105;&#x78;&#115;&#x6d;&#105;&#116;&#104;&#x40;&#x65;&#x78;&#97;&#x6d;p&#x6c;e&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create User Invitation
         * @param {PostUserInvitationJsonV400} body PostUserInvitationJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateUserInvitation(body: PostUserInvitationJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserInvitationJsonV400>> {
            return UserInvitationApiFp(configuration).oBPv400CreateUserInvitation(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get User Invitation</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">SECRET_LINK</a>: SECRET_LINK</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#101;l&#x69;x&#115;&#109;&#105;&#x74;h&#64;&#x65;&#x78;&#x61;&#109;p&#x6c;&#101;&#46;c&#111;&#x6d;\">&#102;&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;h&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitation
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserInvitation(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserInvitationJsonV400>> {
            return UserInvitationApiFp(configuration).oBPv400GetUserInvitation(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get User Invitation Information.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>secret_key</strong></a>: secret_key</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;&#116;o&#58;&#102;&#101;&#108;&#105;&#x78;&#115;&#109;&#105;&#x74;&#104;&#64;e&#120;a&#x6d;&#x70;&#108;e.&#99;&#x6f;&#109;\">&#102;&#x65;l&#105;x&#x73;m&#x69;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;m&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitation Information
         * @param {PostUserInvitationAnonymousJsonV400} body PostUserInvitationAnonymousJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserInvitationAnonymous(body: PostUserInvitationAnonymousJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserInvitationJsonV400>> {
            return UserInvitationApiFp(configuration).oBPv400GetUserInvitationAnonymous(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get User Invitations</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#102;&#x65;&#108;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;&#x40;&#x65;&#x78;a&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#x65;&#108;&#x69;xs&#109;i&#x74;&#x68;&#x40;&#101;&#120;a&#109;&#x70;l&#101;&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get User Invitations
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserInvitations(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserInvitationJsonV400>> {
            return UserInvitationApiFp(configuration).oBPv400GetUserInvitations(BANK_ID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserInvitationApi - object-oriented interface
 * @export
 * @class UserInvitationApi
 * @extends {BaseAPI}
 */
export class UserInvitationApi extends BaseAPI {
    /**
     * <p>Create User Invitation.</p><p>This endpoint will send an invitation email to the developers, then they can use the link to create the obp user.</p><p>purpose filed only support:List(DEVELOPER, CUSTOMER).</p><p>You can customise the email details use the following webui props:</p><p>when purpose == DEVELOPER<br />webui_developer_user_invitation_email_subject<br />webui_developer_user_invitation_email_from<br />webui_developer_user_invitation_email_text<br />webui_developer_user_invitation_email_html_text</p><p>when purpose = == CUSTOMER<br />webui_customer_user_invitation_email_subject<br />webui_customer_user_invitation_email_from<br />webui_customer_user_invitation_email_text<br />webui_customer_user_invitation_email_html_text</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;i&#108;&#116;&#x6f;&#58;f&#x65;l&#x69;x&#115;&#109;&#105;&#116;&#104;@&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;o&#x6d;\">f&#x65;&#108;i&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;&#111;:f&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;&#x68;@&#x65;&#x78;&#97;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;&#101;&#108;&#105;&#x78;&#115;&#x6d;&#105;&#116;&#104;&#x40;&#x65;&#x78;&#97;&#x6d;p&#x6c;e&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Create User Invitation
     * @param {PostUserInvitationJsonV400} body PostUserInvitationJsonV400 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInvitationApi
     */
    public async oBPv400CreateUserInvitation(body: PostUserInvitationJsonV400, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserInvitationJsonV400>> {
        return UserInvitationApiFp(this.configuration).oBPv400CreateUserInvitation(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get User Invitation</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">SECRET_LINK</a>: SECRET_LINK</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#101;l&#x69;x&#115;&#109;&#105;&#x74;h&#64;&#x65;&#x78;&#x61;&#109;p&#x6c;&#101;&#46;c&#111;&#x6d;\">&#102;&#x65;&#x6c;&#105;&#120;s&#x6d;&#x69;&#x74;h&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Get User Invitation
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInvitationApi
     */
    public async oBPv400GetUserInvitation(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserInvitationJsonV400>> {
        return UserInvitationApiFp(this.configuration).oBPv400GetUserInvitation(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get User Invitation Information.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>secret_key</strong></a>: secret_key</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;&#116;o&#58;&#102;&#101;&#108;&#105;&#x78;&#115;&#109;&#105;&#x74;&#104;&#64;e&#120;a&#x6d;&#x70;&#108;e.&#99;&#x6f;&#109;\">&#102;&#x65;l&#105;x&#x73;m&#x69;&#x74;&#x68;&#x40;&#x65;&#120;&#x61;m&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Get User Invitation Information
     * @param {PostUserInvitationAnonymousJsonV400} body PostUserInvitationAnonymousJsonV400 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInvitationApi
     */
    public async oBPv400GetUserInvitationAnonymous(body: PostUserInvitationAnonymousJsonV400, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserInvitationJsonV400>> {
        return UserInvitationApiFp(this.configuration).oBPv400GetUserInvitationAnonymous(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get User Invitations</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#country\"><strong>country</strong></a>: Germany</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#102;&#x65;&#108;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;&#x40;&#x65;&#x78;a&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#x65;&#108;&#x69;xs&#109;i&#x74;&#x68;&#x40;&#101;&#120;a&#109;&#x70;l&#101;&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#first_name\"><strong>first_name</strong></a>: Tom</p><p><a href=\"/glossary#last_name\"><strong>last_name</strong></a>: Smith</p><p><a href=\"/glossary#purpose\"><strong>purpose</strong></a>: DEVELOPER</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Get User Invitations
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInvitationApi
     */
    public async oBPv400GetUserInvitations(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserInvitationJsonV400>> {
        return UserInvitationApiFp(this.configuration).oBPv400GetUserInvitations(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
}
