/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CONSENTIDAccountaccessBody } from '../models';
import { CONSENTIDChallengeBody } from '../models';
import { CONSENTIDCreatedbyuserBody } from '../models';
import { CONSENTIDUserupdaterequestBody } from '../models';
import { ConsentsCONSENTIDBody } from '../models';
import { ConsentsCONSENTIDBody1 } from '../models';
import { ConsentsEMAILBody } from '../models';
import { ConsentsIMPLICITBody } from '../models';
import { ConsentsIMPLICITBody1 } from '../models';
import { ConsentsSMSBody } from '../models';
import { ConsumerConsentrequestsBody } from '../models';
import { ConsumerVrpconsentrequestsBody } from '../models';
import { ErrorInvalidJsonFormat } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { InlineResponse200144 } from '../models';
import { InlineResponse200146 } from '../models';
import { InlineResponse200152 } from '../models';
import { InlineResponse200156 } from '../models';
import { InlineResponse20034 } from '../models';
import { InlineResponse20088 } from '../models';
import { InlineResponse20094 } from '../models';
import { InlineResponse20151 } from '../models';
import { InlineResponse20152 } from '../models';
import { InlineResponse20160 } from '../models';
import { InlineResponse2017 } from '../models';
/**
 * ConsentApi - axios parameter creator
 * @export
 */
export const ConsentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;a&#105;l&#116;&#111;:&#x65;&#118;&#x65;l&#105;&#x6e;&#101;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;\">&#x65;&#118;&#101;&#x6c;i&#110;&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;le&#46;&#x63;o&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>This endpoint is used to confirm a Consent previously created.</p><p>The User must supply a code that was sent out of band (OOB) for example via an SMS.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Answer Consent Challenge
         * @param {CONSENTIDChallengeBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310AnswerConsentChallenge: async (body: CONSENTIDChallengeBody, CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310AnswerConsentChallenge.');
            }
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv310AnswerConsentChallenge.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310AnswerConsentChallenge.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/consents/{CONSENT_ID}/challenge`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#105;&#x6c;t&#x6f;:&#x65;v&#101;&#x6c;&#x69;n&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;&#x6c;e&#46;&#x63;&#111;&#x6d;\">&#101;&#118;&#101;&#x6c;in&#101;@ex&#97;&#109;&#x70;&#x6c;&#101;.&#x63;&#111;&#109;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;o&#58;f&#x65;&#x6c;ix&#115;m&#105;&#116;h&#64;&#x65;&#120;&#97;mp&#x6c;&#101;&#x2e;&#99;&#x6f;m\">&#x66;e&#x6c;i&#x78;&#115;&#109;i&#116;&#104;@&#101;&#x78;&#97;&#109;&#x70;&#108;&#x65;.&#x63;&#x6f;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;i&#x6c;&#x74;&#x6f;&#x3a;&#102;&#101;l&#105;&#120;&#115;m&#x69;&#x74;&#104;@&#x65;&#x78;am&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;e&#x78;&#x61;m&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (EMAIL)
         * @param {ConsentsEMAILBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310CreateConsentEmail: async (body: ConsentsEMAILBody, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310CreateConsentEmail.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310CreateConsentEmail.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/my/consents/EMAIL`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;&#108;t&#111;&#x3a;&#x65;&#x76;&#x65;l&#x69;&#110;&#101;&#x40;e&#120;&#x61;&#109;&#x70;&#x6c;e&#46;&#99;&#111;&#109;\">&#101;&#x76;&#101;&#x6c;&#105;&#110;e&#64;e&#x78;am&#x70;l&#101;&#x2e;&#x63;&#111;m</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (IMPLICIT)
         * @param {ConsentsIMPLICITBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310CreateConsentImplicit: async (body: ConsentsIMPLICITBody, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310CreateConsentImplicit.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310CreateConsentImplicit.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/my/consents/IMPLICIT`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o&#x3a;&#x65;&#x76;&#x65;&#108;i&#x6e;&#x65;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;le&#x2e;&#x63;&#x6f;&#x6d;\">&#x65;&#x76;&#101;&#108;&#105;&#x6e;&#x65;&#x40;&#x65;&#x78;&#x61;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#x69;&#x6c;to&#58;ev&#101;l&#x69;n&#101;&#x40;e&#x78;&#97;&#109;p&#x6c;&#101;&#46;&#99;&#111;&#109;\">&#101;&#x76;&#x65;l&#105;&#x6e;&#101;&#64;&#x65;&#x78;am&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a>&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;e&#118;&#x65;&#108;in&#x65;&#x40;&#101;&#x78;a&#x6d;&#112;le.&#x63;&#x6f;&#109;\">&#x65;&#118;&#101;&#108;&#x69;&#x6e;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"mai&#x6c;t&#111;&#x3a;&#101;v&#101;&#108;&#105;&#110;&#101;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;e&#x2e;&#x63;o&#109;\">e&#118;&#x65;&#x6c;&#105;&#x6e;&#x65;&#x40;&#101;&#x78;&#97;mp&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a>&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#phone_number\"><strong>phone_number</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (SMS)
         * @param {ConsentsSMSBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310CreateConsentSms: async (body: ConsentsSMSBody, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310CreateConsentSms.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310CreateConsentSms.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/my/consents/SMS`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Revoke Consent for current user specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>Please note that this endpoint only supports the case:: &quot;The user explicitly wishes to revoke the application’s access&quot;</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310RevokeConsent: async (CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv310RevokeConsent.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310RevokeConsent.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/my/consents/{CONSENT_ID}/revoke`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint is used to add the User of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Add User to a Consent
         * @param {CONSENTIDUserupdaterequestBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400AddConsentUser: async (body: CONSENTIDUserupdaterequestBody, CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400AddConsentUser.');
            }
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv400AddConsentUser.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400AddConsentUser.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/consents/{CONSENT_ID}/user-update-request`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint gets the Consents that the current User created.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get My Consents Info
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetConsentInfos: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetConsentInfos.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/my/consent-infos`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Status
         * @param {ConsentsCONSENTIDBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400UpdateConsentStatus: async (body: ConsentsCONSENTIDBody, CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400UpdateConsentStatus.');
            }
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv400UpdateConsentStatus.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400UpdateConsentStatus.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/consents/{CONSENT_ID}`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;i&#108;to&#58;&#102;&#x65;li&#120;s&#109;&#x69;&#116;h&#x40;e&#120;&#x61;&#109;&#x70;l&#101;&#x2e;&#x63;&#x6f;&#x6d;\">f&#101;&#108;&#x69;x&#115;&#109;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;om</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateConsentByConsentRequestIdEmail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.0.0/consumer/consent-requests/CONSENT_REQUEST_ID/EMAIL/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.<br />Please note that the Consent cannot elevate the privileges logged in user already have.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (IMPLICIT)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateConsentByConsentRequestIdImplicit: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.0.0/consumer/consent-requests/CONSENT_REQUEST_ID/IMPLICIT/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent you are creating cannot exceed the entitlements that the User creating this consents already has.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (SMS)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateConsentByConsentRequestIdSms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.0.0/consumer/consent-requests/CONSENT_REQUEST_ID/SMS/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Client Authentication (mandatory)</p><p>It is used when applications request an access token to access their own resources, not on behalf of a user.</p><p>The client needs to authenticate themselves for this request.<br />In case of public client we use client_id and private key to obtain access token, otherwise we use client_id and client_secret.<br />The obtained access token is used in the HTTP Bearer auth header of our request.</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_access</strong></a>: account_access</p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#x65;&#108;&#105;&#120;&#115;&#109;&#x69;&#x74;&#104;&#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">&#x66;&#101;&#x6c;&#x69;&#x78;&#x73;&#x6d;i&#x74;&#x68;&#64;e&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#entitlements\">entitlements</a>:</p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request
         * @param {ConsumerConsentrequestsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateConsentRequest: async (body: ConsumerConsentrequestsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv500CreateConsentRequest.');
            }
            const localVarPath = `/obp/v5.0.0/consumer/consent-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint gets the Consent By consent request id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Get Consent By Consent Request Id via Consumner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetConsentByConsentRequestId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.0.0/consumer/consent-requests/CONSENT_REQUEST_ID/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Get Consent Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetConsentRequest: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.0.0/consumer/consent-requests/CONSENT_REQUEST_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;l&#x74;&#x6f;:&#x65;&#x76;&#x65;&#x6c;&#105;&#x6e;&#101;@&#x65;&#x78;&#x61;&#109;&#112;&#108;&#x65;.&#99;&#111;m\">e&#x76;&#x65;&#x6c;i&#110;&#101;@e&#120;&#97;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (IMPLICIT)
         * @param {ConsentsIMPLICITBody1} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CreateConsentImplicit: async (body: ConsentsIMPLICITBody1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510CreateConsentImplicit.');
            }
            const localVarPath = `/obp/v5.1.0/my/consents/IMPLICIT`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;:f&#101;l&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;x&#x61;&#x6d;&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;&#105;&#120;&#x73;&#109;i&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#109;&#x70;l&#x65;&#46;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request VRP
         * @param {ConsumerVrpconsentrequestsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CreateVRPConsentRequest: async (body: ConsumerVrpconsentrequestsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510CreateVRPConsentRequest.');
            }
            const localVarPath = `/obp/v5.1.0/consumer/vrp-consent-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#scopes\">scopes</a>:</p>
         * @summary Get Consent By Consent Id via User
         * @param {string} CONSENT_ID the consent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetConsentByConsentId: async (CONSENT_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv510GetConsentByConsentId.');
            }
            const localVarPath = `/obp/v5.1.0/user/current/consents/{CONSENT_ID}`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Get Consent By Consent Id via Consumer
         * @param {string} CONSENT_ID the consent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetConsentByConsentIdViaConsumer: async (CONSENT_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv510GetConsentByConsentIdViaConsumer.');
            }
            const localVarPath = `/obp/v5.1.0/consumer/current/consents/{CONSENT_ID}`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint gets the Consents.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 consent_id  (ignore if omitted)</p><p>5 user_id  (ignore if omitted)</p><p>6 status  (ignore if omitted)</p><p>7 bank_id  (ignore if omitted)</p><p>eg:/management/consents?consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;o&#x3a;&#102;&#101;li&#x78;&#x73;&#109;&#105;&#116;&#x68;@&#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#108;i&#120;&#x73;&#x6d;&#x69;&#116;&#x68;@&#x65;&#120;a&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;o&#x6d;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
         * @summary Get Consents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetConsents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/management/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint gets the Consents at Bank by BANK_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 user_id  (ignore if omitted)</p><p>5 status  (ignore if omitted)</p><p>eg: /management/consents/banks/BANK_ID?&amp;consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x66;e&#108;i&#120;&#x73;mi&#x74;h&#x40;&#x65;&#120;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#102;&#101;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#101;xa&#x6d;&#x70;&#x6c;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
         * @summary Get Consents at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetConsentsAtBank: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510GetConsentsAtBank.');
            }
            const localVarPath = `/obp/v5.1.0/management/consents/banks/{BANK_ID}`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint gets the Consents created by a current User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get My Consents
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetMyConsents: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510GetMyConsents.');
            }
            const localVarPath = `/obp/v5.1.0/banks/{BANK_ID}/my/consents`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Provide client's certificate info of a current call specified by PSD2-CERT value at Request Header</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
         * @summary Provide client's certificate info of a current call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510MtlsClientCertificateInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/my/mtls/certificate/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Revoke Consent specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent at Bank
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510RevokeConsentAtBank: async (CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv510RevokeConsentAtBank.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510RevokeConsentAtBank.');
            }
            const localVarPath = `/obp/v5.1.0/banks/{BANK_ID}/consents/{CONSENT_ID}`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Revoke Consent specified by Consent-Id at Request Header</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent used in the Current Call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510SelfRevokeConsent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/my/consent/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint is used to update the Account Access of Consent.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Account Access by CONSENT_ID
         * @param {CONSENTIDAccountaccessBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510UpdateConsentAccountAccessByConsentId: async (body: CONSENTIDAccountaccessBody, CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510UpdateConsentAccountAccessByConsentId.');
            }
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv510UpdateConsentAccountAccessByConsentId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510UpdateConsentAccountAccessByConsentId.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/consents/{CONSENT_ID}/account-access`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Status by CONSENT_ID
         * @param {ConsentsCONSENTIDBody1} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510UpdateConsentStatusByConsent: async (body: ConsentsCONSENTIDBody1, CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510UpdateConsentStatusByConsent.');
            }
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv510UpdateConsentStatusByConsent.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510UpdateConsentStatusByConsent.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/consents/{CONSENT_ID}`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint is used to Update the User bound to a consent.</p><p>In general we would not expect for a management user to set the User bound to a consent, but there may be<br />some use cases where this workflow is useful.</p><p>If successful, the &quot;Created by User ID&quot; field in the OBP Consent table will be updated.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Created by User by CONSENT_ID
         * @param {CONSENTIDCreatedbyuserBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510UpdateConsentUserIdByConsentId: async (body: CONSENTIDCreatedbyuserBody, CONSENT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510UpdateConsentUserIdByConsentId.');
            }
            // verify required parameter 'CONSENT_ID' is not null or undefined
            if (CONSENT_ID === null || CONSENT_ID === undefined) {
                throw new RequiredError('CONSENT_ID','Required parameter CONSENT_ID was null or undefined when calling oBPv510UpdateConsentUserIdByConsentId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510UpdateConsentUserIdByConsentId.');
            }
            const localVarPath = `/obp/v5.1.0/management/banks/{BANK_ID}/consents/{CONSENT_ID}/created-by-user`
                .replace(`{${"CONSENT_ID"}}`, encodeURIComponent(String(CONSENT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsentApi - functional programming interface
 * @export
 */
export const ConsentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;a&#105;l&#116;&#111;:&#x65;&#118;&#x65;l&#105;&#x6e;&#101;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;\">&#x65;&#118;&#101;&#x6c;i&#110;&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;le&#46;&#x63;o&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>This endpoint is used to confirm a Consent previously created.</p><p>The User must supply a code that was sent out of band (OOB) for example via an SMS.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Answer Consent Challenge
         * @param {CONSENTIDChallengeBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310AnswerConsentChallenge(body: CONSENTIDChallengeBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2017>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv310AnswerConsentChallenge(body, CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#105;&#x6c;t&#x6f;:&#x65;v&#101;&#x6c;&#x69;n&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;&#x6c;e&#46;&#x63;&#111;&#x6d;\">&#101;&#118;&#101;&#x6c;in&#101;@ex&#97;&#109;&#x70;&#x6c;&#101;.&#x63;&#111;&#109;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;o&#58;f&#x65;&#x6c;ix&#115;m&#105;&#116;h&#64;&#x65;&#120;&#97;mp&#x6c;&#101;&#x2e;&#99;&#x6f;m\">&#x66;e&#x6c;i&#x78;&#115;&#109;i&#116;&#104;@&#101;&#x78;&#97;&#109;&#x70;&#108;&#x65;.&#x63;&#x6f;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;i&#x6c;&#x74;&#x6f;&#x3a;&#102;&#101;l&#105;&#120;&#115;m&#x69;&#x74;&#104;@&#x65;&#x78;am&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;e&#x78;&#x61;m&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (EMAIL)
         * @param {ConsentsEMAILBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateConsentEmail(body: ConsentsEMAILBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2017>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv310CreateConsentEmail(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;&#108;t&#111;&#x3a;&#x65;&#x76;&#x65;l&#x69;&#110;&#101;&#x40;e&#120;&#x61;&#109;&#x70;&#x6c;e&#46;&#99;&#111;&#109;\">&#101;&#x76;&#101;&#x6c;&#105;&#110;e&#64;e&#x78;am&#x70;l&#101;&#x2e;&#x63;&#111;m</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (IMPLICIT)
         * @param {ConsentsIMPLICITBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateConsentImplicit(body: ConsentsIMPLICITBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2017>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv310CreateConsentImplicit(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o&#x3a;&#x65;&#x76;&#x65;&#108;i&#x6e;&#x65;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;le&#x2e;&#x63;&#x6f;&#x6d;\">&#x65;&#x76;&#101;&#108;&#105;&#x6e;&#x65;&#x40;&#x65;&#x78;&#x61;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#x69;&#x6c;to&#58;ev&#101;l&#x69;n&#101;&#x40;e&#x78;&#97;&#109;p&#x6c;&#101;&#46;&#99;&#111;&#109;\">&#101;&#x76;&#x65;l&#105;&#x6e;&#101;&#64;&#x65;&#x78;am&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a>&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;e&#118;&#x65;&#108;in&#x65;&#x40;&#101;&#x78;a&#x6d;&#112;le.&#x63;&#x6f;&#109;\">&#x65;&#118;&#101;&#108;&#x69;&#x6e;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"mai&#x6c;t&#111;&#x3a;&#101;v&#101;&#108;&#105;&#110;&#101;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;e&#x2e;&#x63;o&#109;\">e&#118;&#x65;&#x6c;&#105;&#x6e;&#x65;&#x40;&#101;&#x78;&#97;mp&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a>&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#phone_number\"><strong>phone_number</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (SMS)
         * @param {ConsentsSMSBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateConsentSms(body: ConsentsSMSBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2017>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv310CreateConsentSms(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Revoke Consent for current user specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>Please note that this endpoint only supports the case:: &quot;The user explicitly wishes to revoke the application’s access&quot;</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310RevokeConsent(CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv310RevokeConsent(CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint is used to add the User of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Add User to a Consent
         * @param {CONSENTIDUserupdaterequestBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400AddConsentUser(body: CONSENTIDUserupdaterequestBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20088>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv400AddConsentUser(body, CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint gets the Consents that the current User created.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get My Consents Info
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetConsentInfos(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20094>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv400GetConsentInfos(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Status
         * @param {ConsentsCONSENTIDBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateConsentStatus(body: ConsentsCONSENTIDBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20088>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv400UpdateConsentStatus(body, CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;i&#108;to&#58;&#102;&#x65;li&#120;s&#109;&#x69;&#116;h&#x40;e&#120;&#x61;&#109;&#x70;l&#101;&#x2e;&#x63;&#x6f;&#x6d;\">f&#101;&#108;&#x69;x&#115;&#109;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;om</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdEmail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20152>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv500CreateConsentByConsentRequestIdEmail(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.<br />Please note that the Consent cannot elevate the privileges logged in user already have.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (IMPLICIT)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdImplicit(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20152>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv500CreateConsentByConsentRequestIdImplicit(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent you are creating cannot exceed the entitlements that the User creating this consents already has.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (SMS)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdSms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20152>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv500CreateConsentByConsentRequestIdSms(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Client Authentication (mandatory)</p><p>It is used when applications request an access token to access their own resources, not on behalf of a user.</p><p>The client needs to authenticate themselves for this request.<br />In case of public client we use client_id and private key to obtain access token, otherwise we use client_id and client_secret.<br />The obtained access token is used in the HTTP Bearer auth header of our request.</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_access</strong></a>: account_access</p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#x65;&#108;&#105;&#120;&#115;&#109;&#x69;&#x74;&#104;&#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">&#x66;&#101;&#x6c;&#x69;&#x78;&#x73;&#x6d;i&#x74;&#x68;&#64;e&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#entitlements\">entitlements</a>:</p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request
         * @param {ConsumerConsentrequestsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentRequest(body: ConsumerConsentrequestsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20151>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv500CreateConsentRequest(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint gets the Consent By consent request id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Get Consent By Consent Request Id via Consumner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetConsentByConsentRequestId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20152>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv500GetConsentByConsentRequestId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Get Consent Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetConsentRequest(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20151>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv500GetConsentRequest(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;l&#x74;&#x6f;:&#x65;&#x76;&#x65;&#x6c;&#105;&#x6e;&#101;@&#x65;&#x78;&#x61;&#109;&#112;&#108;&#x65;.&#99;&#111;m\">e&#x76;&#x65;&#x6c;i&#110;&#101;@e&#120;&#97;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (IMPLICIT)
         * @param {ConsentsIMPLICITBody1} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateConsentImplicit(body: ConsentsIMPLICITBody1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2017>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510CreateConsentImplicit(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;:f&#101;l&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;x&#x61;&#x6d;&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;&#105;&#120;&#x73;&#109;i&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#109;&#x70;l&#x65;&#46;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request VRP
         * @param {ConsumerVrpconsentrequestsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateVRPConsentRequest(body: ConsumerVrpconsentrequestsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20160>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510CreateVRPConsentRequest(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#scopes\">scopes</a>:</p>
         * @summary Get Consent By Consent Id via User
         * @param {string} CONSENT_ID the consent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsentByConsentId(CONSENT_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200156>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510GetConsentByConsentId(CONSENT_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Get Consent By Consent Id via Consumer
         * @param {string} CONSENT_ID the consent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsentByConsentIdViaConsumer(CONSENT_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20152>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510GetConsentByConsentIdViaConsumer(CONSENT_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint gets the Consents.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 consent_id  (ignore if omitted)</p><p>5 user_id  (ignore if omitted)</p><p>6 status  (ignore if omitted)</p><p>7 bank_id  (ignore if omitted)</p><p>eg:/management/consents?consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;o&#x3a;&#102;&#101;li&#x78;&#x73;&#109;&#105;&#116;&#x68;@&#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#108;i&#120;&#x73;&#x6d;&#x69;&#116;&#x68;@&#x65;&#120;a&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;o&#x6d;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
         * @summary Get Consents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200146>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510GetConsents(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint gets the Consents at Bank by BANK_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 user_id  (ignore if omitted)</p><p>5 status  (ignore if omitted)</p><p>eg: /management/consents/banks/BANK_ID?&amp;consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x66;e&#108;i&#120;&#x73;mi&#x74;h&#x40;&#x65;&#120;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#102;&#101;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#101;xa&#x6d;&#x70;&#x6c;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
         * @summary Get Consents at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsentsAtBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200146>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510GetConsentsAtBank(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint gets the Consents created by a current User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get My Consents
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetMyConsents(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200144>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510GetMyConsents(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Provide client's certificate info of a current call specified by PSD2-CERT value at Request Header</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
         * @summary Provide client's certificate info of a current call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510MtlsClientCertificateInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200152>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510MtlsClientCertificateInfo(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Revoke Consent specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent at Bank
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510RevokeConsentAtBank(CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510RevokeConsentAtBank(CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Revoke Consent specified by Consent-Id at Request Header</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent used in the Current Call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510SelfRevokeConsent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510SelfRevokeConsent(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint is used to update the Account Access of Consent.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Account Access by CONSENT_ID
         * @param {CONSENTIDAccountaccessBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateConsentAccountAccessByConsentId(body: CONSENTIDAccountaccessBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20088>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510UpdateConsentAccountAccessByConsentId(body, CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Status by CONSENT_ID
         * @param {ConsentsCONSENTIDBody1} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateConsentStatusByConsent(body: ConsentsCONSENTIDBody1, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20088>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510UpdateConsentStatusByConsent(body, CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint is used to Update the User bound to a consent.</p><p>In general we would not expect for a management user to set the User bound to a consent, but there may be<br />some use cases where this workflow is useful.</p><p>If successful, the &quot;Created by User ID&quot; field in the OBP Consent table will be updated.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Created by User by CONSENT_ID
         * @param {CONSENTIDCreatedbyuserBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateConsentUserIdByConsentId(body: CONSENTIDCreatedbyuserBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20088>>> {
            const localVarAxiosArgs = await ConsentApiAxiosParamCreator(configuration).oBPv510UpdateConsentUserIdByConsentId(body, CONSENT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConsentApi - factory interface
 * @export
 */
export const ConsentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;a&#105;l&#116;&#111;:&#x65;&#118;&#x65;l&#105;&#x6e;&#101;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;\">&#x65;&#118;&#101;&#x6c;i&#110;&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;le&#46;&#x63;o&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>This endpoint is used to confirm a Consent previously created.</p><p>The User must supply a code that was sent out of band (OOB) for example via an SMS.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Answer Consent Challenge
         * @param {CONSENTIDChallengeBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310AnswerConsentChallenge(body: CONSENTIDChallengeBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2017>> {
            return ConsentApiFp(configuration).oBPv310AnswerConsentChallenge(body, CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#105;&#x6c;t&#x6f;:&#x65;v&#101;&#x6c;&#x69;n&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;&#x6c;e&#46;&#x63;&#111;&#x6d;\">&#101;&#118;&#101;&#x6c;in&#101;@ex&#97;&#109;&#x70;&#x6c;&#101;.&#x63;&#111;&#109;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;o&#58;f&#x65;&#x6c;ix&#115;m&#105;&#116;h&#64;&#x65;&#120;&#97;mp&#x6c;&#101;&#x2e;&#99;&#x6f;m\">&#x66;e&#x6c;i&#x78;&#115;&#109;i&#116;&#104;@&#101;&#x78;&#97;&#109;&#x70;&#108;&#x65;.&#x63;&#x6f;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;i&#x6c;&#x74;&#x6f;&#x3a;&#102;&#101;l&#105;&#120;&#115;m&#x69;&#x74;&#104;@&#x65;&#x78;am&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;e&#x78;&#x61;m&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (EMAIL)
         * @param {ConsentsEMAILBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateConsentEmail(body: ConsentsEMAILBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2017>> {
            return ConsentApiFp(configuration).oBPv310CreateConsentEmail(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;&#108;t&#111;&#x3a;&#x65;&#x76;&#x65;l&#x69;&#110;&#101;&#x40;e&#120;&#x61;&#109;&#x70;&#x6c;e&#46;&#99;&#111;&#109;\">&#101;&#x76;&#101;&#x6c;&#105;&#110;e&#64;e&#x78;am&#x70;l&#101;&#x2e;&#x63;&#111;m</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (IMPLICIT)
         * @param {ConsentsIMPLICITBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateConsentImplicit(body: ConsentsIMPLICITBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2017>> {
            return ConsentApiFp(configuration).oBPv310CreateConsentImplicit(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o&#x3a;&#x65;&#x76;&#x65;&#108;i&#x6e;&#x65;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;le&#x2e;&#x63;&#x6f;&#x6d;\">&#x65;&#x76;&#101;&#108;&#105;&#x6e;&#x65;&#x40;&#x65;&#x78;&#x61;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#x69;&#x6c;to&#58;ev&#101;l&#x69;n&#101;&#x40;e&#x78;&#97;&#109;p&#x6c;&#101;&#46;&#99;&#111;&#109;\">&#101;&#x76;&#x65;l&#105;&#x6e;&#101;&#64;&#x65;&#x78;am&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a>&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;e&#118;&#x65;&#108;in&#x65;&#x40;&#101;&#x78;a&#x6d;&#112;le.&#x63;&#x6f;&#109;\">&#x65;&#118;&#101;&#108;&#x69;&#x6e;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"mai&#x6c;t&#111;&#x3a;&#101;v&#101;&#108;&#105;&#110;&#101;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;e&#x2e;&#x63;o&#109;\">e&#118;&#x65;&#x6c;&#105;&#x6e;&#x65;&#x40;&#101;&#x78;&#97;mp&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a>&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#phone_number\"><strong>phone_number</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (SMS)
         * @param {ConsentsSMSBody} body JObject object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateConsentSms(body: ConsentsSMSBody, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2017>> {
            return ConsentApiFp(configuration).oBPv310CreateConsentSms(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Revoke Consent for current user specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>Please note that this endpoint only supports the case:: &quot;The user explicitly wishes to revoke the application’s access&quot;</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310RevokeConsent(CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return ConsentApiFp(configuration).oBPv310RevokeConsent(CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint is used to add the User of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Add User to a Consent
         * @param {CONSENTIDUserupdaterequestBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400AddConsentUser(body: CONSENTIDUserupdaterequestBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20088>> {
            return ConsentApiFp(configuration).oBPv400AddConsentUser(body, CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint gets the Consents that the current User created.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get My Consents Info
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetConsentInfos(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20094>> {
            return ConsentApiFp(configuration).oBPv400GetConsentInfos(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Status
         * @param {ConsentsCONSENTIDBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateConsentStatus(body: ConsentsCONSENTIDBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20088>> {
            return ConsentApiFp(configuration).oBPv400UpdateConsentStatus(body, CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;i&#108;to&#58;&#102;&#x65;li&#120;s&#109;&#x69;&#116;h&#x40;e&#120;&#x61;&#109;&#x70;l&#101;&#x2e;&#x63;&#x6f;&#x6d;\">f&#101;&#108;&#x69;x&#115;&#109;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;om</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdEmail(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20152>> {
            return ConsentApiFp(configuration).oBPv500CreateConsentByConsentRequestIdEmail(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.<br />Please note that the Consent cannot elevate the privileges logged in user already have.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (IMPLICIT)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdImplicit(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20152>> {
            return ConsentApiFp(configuration).oBPv500CreateConsentByConsentRequestIdImplicit(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent you are creating cannot exceed the entitlements that the User creating this consents already has.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (SMS)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdSms(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20152>> {
            return ConsentApiFp(configuration).oBPv500CreateConsentByConsentRequestIdSms(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Client Authentication (mandatory)</p><p>It is used when applications request an access token to access their own resources, not on behalf of a user.</p><p>The client needs to authenticate themselves for this request.<br />In case of public client we use client_id and private key to obtain access token, otherwise we use client_id and client_secret.<br />The obtained access token is used in the HTTP Bearer auth header of our request.</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_access</strong></a>: account_access</p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#x65;&#108;&#105;&#120;&#115;&#109;&#x69;&#x74;&#104;&#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">&#x66;&#101;&#x6c;&#x69;&#x78;&#x73;&#x6d;i&#x74;&#x68;&#64;e&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#entitlements\">entitlements</a>:</p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request
         * @param {ConsumerConsentrequestsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentRequest(body: ConsumerConsentrequestsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20151>> {
            return ConsentApiFp(configuration).oBPv500CreateConsentRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint gets the Consent By consent request id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Get Consent By Consent Request Id via Consumner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetConsentByConsentRequestId(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20152>> {
            return ConsentApiFp(configuration).oBPv500GetConsentByConsentRequestId(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Get Consent Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetConsentRequest(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20151>> {
            return ConsentApiFp(configuration).oBPv500GetConsentRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;l&#x74;&#x6f;:&#x65;&#x76;&#x65;&#x6c;&#105;&#x6e;&#101;@&#x65;&#x78;&#x61;&#109;&#112;&#108;&#x65;.&#99;&#111;m\">e&#x76;&#x65;&#x6c;i&#110;&#101;@e&#120;&#97;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Create Consent (IMPLICIT)
         * @param {ConsentsIMPLICITBody1} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateConsentImplicit(body: ConsentsIMPLICITBody1, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2017>> {
            return ConsentApiFp(configuration).oBPv510CreateConsentImplicit(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;:f&#101;l&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;x&#x61;&#x6d;&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;&#105;&#120;&#x73;&#109;i&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#109;&#x70;l&#x65;&#46;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request VRP
         * @param {ConsumerVrpconsentrequestsBody} body JObject object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateVRPConsentRequest(body: ConsumerVrpconsentrequestsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20160>> {
            return ConsentApiFp(configuration).oBPv510CreateVRPConsentRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#scopes\">scopes</a>:</p>
         * @summary Get Consent By Consent Id via User
         * @param {string} CONSENT_ID the consent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsentByConsentId(CONSENT_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200156>> {
            return ConsentApiFp(configuration).oBPv510GetConsentByConsentId(CONSENT_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Get Consent By Consent Id via Consumer
         * @param {string} CONSENT_ID the consent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsentByConsentIdViaConsumer(CONSENT_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20152>> {
            return ConsentApiFp(configuration).oBPv510GetConsentByConsentIdViaConsumer(CONSENT_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint gets the Consents.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 consent_id  (ignore if omitted)</p><p>5 user_id  (ignore if omitted)</p><p>6 status  (ignore if omitted)</p><p>7 bank_id  (ignore if omitted)</p><p>eg:/management/consents?consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;o&#x3a;&#102;&#101;li&#x78;&#x73;&#109;&#105;&#116;&#x68;@&#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#108;i&#120;&#x73;&#x6d;&#x69;&#116;&#x68;@&#x65;&#120;a&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;o&#x6d;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
         * @summary Get Consents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsents(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200146>> {
            return ConsentApiFp(configuration).oBPv510GetConsents(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint gets the Consents at Bank by BANK_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 user_id  (ignore if omitted)</p><p>5 status  (ignore if omitted)</p><p>eg: /management/consents/banks/BANK_ID?&amp;consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x66;e&#108;i&#120;&#x73;mi&#x74;h&#x40;&#x65;&#120;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#102;&#101;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#101;xa&#x6d;&#x70;&#x6c;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
         * @summary Get Consents at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetConsentsAtBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200146>> {
            return ConsentApiFp(configuration).oBPv510GetConsentsAtBank(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint gets the Consents created by a current User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Get My Consents
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetMyConsents(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200144>> {
            return ConsentApiFp(configuration).oBPv510GetMyConsents(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Provide client's certificate info of a current call specified by PSD2-CERT value at Request Header</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
         * @summary Provide client's certificate info of a current call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510MtlsClientCertificateInfo(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200152>> {
            return ConsentApiFp(configuration).oBPv510MtlsClientCertificateInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Revoke Consent specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent at Bank
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510RevokeConsentAtBank(CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return ConsentApiFp(configuration).oBPv510RevokeConsentAtBank(CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Revoke Consent specified by Consent-Id at Request Header</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Revoke Consent used in the Current Call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510SelfRevokeConsent(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return ConsentApiFp(configuration).oBPv510SelfRevokeConsent(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint is used to update the Account Access of Consent.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Account Access by CONSENT_ID
         * @param {CONSENTIDAccountaccessBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateConsentAccountAccessByConsentId(body: CONSENTIDAccountaccessBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20088>> {
            return ConsentApiFp(configuration).oBPv510UpdateConsentAccountAccessByConsentId(body, CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Status by CONSENT_ID
         * @param {ConsentsCONSENTIDBody1} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateConsentStatusByConsent(body: ConsentsCONSENTIDBody1, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20088>> {
            return ConsentApiFp(configuration).oBPv510UpdateConsentStatusByConsent(body, CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint is used to Update the User bound to a consent.</p><p>In general we would not expect for a management user to set the User bound to a consent, but there may be<br />some use cases where this workflow is useful.</p><p>If successful, the &quot;Created by User ID&quot; field in the OBP Consent table will be updated.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
         * @summary Update Consent Created by User by CONSENT_ID
         * @param {CONSENTIDCreatedbyuserBody} body JObject object that needs to be added.
         * @param {string} CONSENT_ID the consent id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateConsentUserIdByConsentId(body: CONSENTIDCreatedbyuserBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20088>> {
            return ConsentApiFp(configuration).oBPv510UpdateConsentUserIdByConsentId(body, CONSENT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsentApi - object-oriented interface
 * @export
 * @class ConsentApi
 * @extends {BaseAPI}
 */
export class ConsentApi extends BaseAPI {
    /**
     * <p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;a&#105;l&#116;&#111;:&#x65;&#118;&#x65;l&#105;&#x6e;&#101;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;\">&#x65;&#118;&#101;&#x6c;i&#110;&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;le&#46;&#x63;o&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>This endpoint is used to confirm a Consent previously created.</p><p>The User must supply a code that was sent out of band (OOB) for example via an SMS.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Answer Consent Challenge
     * @param {CONSENTIDChallengeBody} body JObject object that needs to be added.
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv310AnswerConsentChallenge(body: CONSENTIDChallengeBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2017>> {
        return ConsentApiFp(this.configuration).oBPv310AnswerConsentChallenge(body, CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#105;&#x6c;t&#x6f;:&#x65;v&#101;&#x6c;&#x69;n&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;&#x6c;e&#46;&#x63;&#111;&#x6d;\">&#101;&#118;&#101;&#x6c;in&#101;@ex&#97;&#109;&#x70;&#x6c;&#101;.&#x63;&#111;&#109;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;phone_number&quot;: &quot;+49 170 1234567&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;o&#58;f&#x65;&#x6c;ix&#115;m&#105;&#116;h&#64;&#x65;&#120;&#97;mp&#x6c;&#101;&#x2e;&#99;&#x6f;m\">&#x66;e&#x6c;i&#x78;&#115;&#109;i&#116;&#104;@&#101;&#x78;&#97;&#109;&#x70;&#108;&#x65;.&#x63;&#x6f;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;i&#x6c;&#x74;&#x6f;&#x3a;&#102;&#101;l&#105;&#120;&#115;m&#x69;&#x74;&#104;@&#x65;&#x78;am&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;e&#x78;&#x61;m&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Create Consent (EMAIL)
     * @param {ConsentsEMAILBody} body JObject object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv310CreateConsentEmail(body: ConsentsEMAILBody, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2017>> {
        return ConsentApiFp(this.configuration).oBPv310CreateConsentEmail(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;&#108;t&#111;&#x3a;&#x65;&#x76;&#x65;l&#x69;&#110;&#101;&#x40;e&#120;&#x61;&#109;&#x70;&#x6c;e&#46;&#99;&#111;&#109;\">&#101;&#x76;&#101;&#x6c;&#105;&#110;e&#64;e&#x78;am&#x70;l&#101;&#x2e;&#x63;&#111;m</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Create Consent (IMPLICIT)
     * @param {ConsentsIMPLICITBody} body JObject object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv310CreateConsentImplicit(body: ConsentsIMPLICITBody, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2017>> {
        return ConsentApiFp(this.configuration).oBPv310CreateConsentImplicit(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o&#x3a;&#x65;&#x76;&#x65;&#108;i&#x6e;&#x65;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;le&#x2e;&#x63;&#x6f;&#x6d;\">&#x65;&#x76;&#101;&#108;&#105;&#x6e;&#x65;&#x40;&#x65;&#x78;&#x61;m&#112;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#x69;&#x6c;to&#58;ev&#101;l&#x69;n&#101;&#x40;e&#x78;&#97;&#109;p&#x6c;&#101;&#46;&#99;&#111;&#109;\">&#101;&#x76;&#x65;l&#105;&#x6e;&#101;&#64;&#x65;&#x78;am&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a>&quot;<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;email&quot;: &quot;<a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;e&#118;&#x65;&#108;in&#x65;&#x40;&#101;&#x78;a&#x6d;&#112;le.&#x63;&#x6f;&#109;\">&#x65;&#118;&#101;&#108;&#x69;&#x6e;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>&quot;<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"mai&#x6c;t&#111;&#x3a;&#101;v&#101;&#108;&#105;&#110;&#101;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;e&#x2e;&#x63;o&#109;\">e&#118;&#x65;&#x6c;&#105;&#x6e;&#x65;&#x40;&#101;&#x78;&#97;mp&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a>&quot;<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#phone_number\"><strong>phone_number</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Create Consent (SMS)
     * @param {ConsentsSMSBody} body JObject object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv310CreateConsentSms(body: ConsentsSMSBody, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2017>> {
        return ConsentApiFp(this.configuration).oBPv310CreateConsentSms(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Revoke Consent for current user specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>Please note that this endpoint only supports the case:: &quot;The user explicitly wishes to revoke the application’s access&quot;</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Revoke Consent
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv310RevokeConsent(CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return ConsentApiFp(this.configuration).oBPv310RevokeConsent(CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint is used to add the User of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Add User to a Consent
     * @param {CONSENTIDUserupdaterequestBody} body JObject object that needs to be added.
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv400AddConsentUser(body: CONSENTIDUserupdaterequestBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20088>> {
        return ConsentApiFp(this.configuration).oBPv400AddConsentUser(body, CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint gets the Consents that the current User created.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Get My Consents Info
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv400GetConsentInfos(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20094>> {
        return ConsentApiFp(this.configuration).oBPv400GetConsentInfos(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Update Consent Status
     * @param {ConsentsCONSENTIDBody} body JObject object that needs to be added.
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv400UpdateConsentStatus(body: ConsentsCONSENTIDBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20088>> {
        return ConsentApiFp(this.configuration).oBPv400UpdateConsentStatus(body, CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;i&#108;to&#58;&#102;&#x65;li&#120;s&#109;&#x69;&#116;h&#x40;e&#120;&#x61;&#109;&#x70;l&#101;&#x2e;&#x63;&#x6f;&#x6d;\">f&#101;&#108;&#x69;x&#115;&#109;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;om</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
     * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv500CreateConsentByConsentRequestIdEmail(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20152>> {
        return ConsentApiFp(this.configuration).oBPv500CreateConsentByConsentRequestIdEmail(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.<br />Please note that the Consent cannot elevate the privileges logged in user already have.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
     * @summary Create Consent By CONSENT_REQUEST_ID (IMPLICIT)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv500CreateConsentByConsentRequestIdImplicit(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20152>> {
        return ConsentApiFp(this.configuration).oBPv500CreateConsentByConsentRequestIdImplicit(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint continues the process of creating a Consent. It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent you are creating cannot exceed the entitlements that the User creating this consents already has.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#sms\">SMS</a>:</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
     * @summary Create Consent By CONSENT_REQUEST_ID (SMS)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv500CreateConsentByConsentRequestIdSms(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20152>> {
        return ConsentApiFp(this.configuration).oBPv500CreateConsentByConsentRequestIdSms(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Client Authentication (mandatory)</p><p>It is used when applications request an access token to access their own resources, not on behalf of a user.</p><p>The client needs to authenticate themselves for this request.<br />In case of public client we use client_id and private key to obtain access token, otherwise we use client_id and client_secret.<br />The obtained access token is used in the HTTP Bearer auth header of our request.</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_access</strong></a>: account_access</p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#x65;&#108;&#105;&#120;&#115;&#109;&#x69;&#x74;&#104;&#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">&#x66;&#101;&#x6c;&#x69;&#x78;&#x73;&#x6d;i&#x74;&#x68;&#64;e&#x78;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#entitlements\">entitlements</a>:</p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
     * @summary Create Consent Request
     * @param {ConsumerConsentrequestsBody} body JObject object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv500CreateConsentRequest(body: ConsumerConsentrequestsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20151>> {
        return ConsentApiFp(this.configuration).oBPv500CreateConsentRequest(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint gets the Consent By consent request id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
     * @summary Get Consent By Consent Request Id via Consumner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv500GetConsentByConsentRequestId(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20152>> {
        return ConsentApiFp(this.configuration).oBPv500GetConsentByConsentRequestId(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
     * @summary Get Consent Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv500GetConsentRequest(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20151>> {
        return ConsentApiFp(this.configuration).oBPv500GetConsentRequest(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint starts the process of creating a Consent.</p><p>The Consent is created in an INITIATED state.</p><p>A One Time Password (OTP) (AKA security challenge) is sent Out of Band (OOB) to the User via the transport defined in SCA_METHOD<br />SCA_METHOD is typically &quot;SMS&quot;,&quot;EMAIL&quot; or &quot;IMPLICIT&quot;. &quot;EMAIL&quot; is used for testing purposes. OBP mapped mode &quot;IMPLICIT&quot; is &quot;EMAIL&quot;.<br />Other mode, bank can decide it in the connector method 'getConsentImplicitSCA'.</p><p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p><p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p><p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p><p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>Each Consent is bound to a consumer i.e. you need to identify yourself over request header value Consumer-Key.<br />For example:<br />GET /obp/v4.0.0/users/current HTTP/1.1<br />Host: 127.0.0.1:8080<br />Consent-JWT: eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOlt7InJvbGVfbmFtZSI6IkNhbkdldEFueVVzZXIiLCJiYW5rX2lkIjoiIn<br />1dLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIzNDc1MDEzZi03YmY5LTQyNj<br />EtOWUxYy0xZTdlNWZjZTJlN2UiLCJhdWQiOiI4MTVhMGVmMS00YjZhLTQyMDUtYjExMi1lNDVmZDZmNGQzYWQiLCJuYmYiOjE1ODA3NDE2NjcsIml<br />zcyI6Imh0dHA6XC9cLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNTgwNzQ1MjY3LCJpYXQiOjE1ODA3NDE2NjcsImp0aSI6ImJkYzVjZTk5LTE2ZTY<br />tNDM4Yi1hNjllLTU3MTAzN2RhMTg3OCIsInZpZXdzIjpbXX0.L3fEEEhdCVr3qnmyRKBBUaIQ7dk1VjiFaEBW8hUNjfg</p><p>Consumer-Key: ejznk505d132ryomnhbx1qmtohurbsbb0kijajsk<br />cache-control: no-cache</p><p>Maximum time to live of the token is specified over props value consents.max_time_to_live. In case isn't defined default value is 3600 seconds.</p><p>Example of POST JSON:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />&quot;email&quot;: &quot;<a href=\"m&#97;&#x69;l&#x74;&#x6f;:&#x65;&#x76;&#x65;&#x6c;&#105;&#x6e;&#101;@&#x65;&#x78;&#x61;&#109;&#112;&#108;&#x65;.&#99;&#111;m\">e&#x76;&#x65;&#x6c;i&#110;&#101;@e&#120;&#97;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a>&quot;,<br />&quot;valid_from&quot;: &quot;2020-02-07T08:43:34Z&quot;,<br />&quot;time_to_live&quot;: 3600<br />}<br />Please note that only optional fields are: consumer_id, valid_from and time_to_live.<br />In case you omit they the default values are used:<br />consumer_id = consumer of current user<br />valid_from = current time<br />time_to_live = consents.max_time_to_live</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>Example 1:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p>Please note that consumer_id is optional field<br />Example 2:<br />{<br />&quot;everything&quot;: true,<br />&quot;views&quot;: [],<br />&quot;entitlements&quot;: [],<br />}</p><p>Please note if everything=false you need to explicitly specify views and entitlements<br />Example 3:<br />{<br />&quot;everything&quot;: false,<br />&quot;views&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;account_id&quot;: &quot;8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0&quot;,<br />&quot;view_id&quot;: &quot;owner&quot;<br />}<br />],<br />&quot;entitlements&quot;: [<br />{<br />&quot;bank_id&quot;: &quot;GENODEM1GLS&quot;,<br />&quot;role_name&quot;: &quot;CanGetCustomer&quot;<br />}<br />],<br />&quot;consumer_id&quot;: &quot;7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh&quot;,<br />}</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">IMPLICIT</a>: IMPLICIT</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#everything\"><strong>everything</strong></a>:</p><p><a href=\"/glossary#role_name\"><strong>role_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">consumer_id</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Create Consent (IMPLICIT)
     * @param {ConsentsIMPLICITBody1} body JObject object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510CreateConsentImplicit(body: ConsentsIMPLICITBody1, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2017>> {
        return ConsentApiFp(this.configuration).oBPv510CreateConsentImplicit(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;:f&#101;l&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;x&#x61;&#x6d;&#x70;&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;&#105;&#120;&#x73;&#109;i&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#109;&#x70;l&#x65;&#46;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
     * @summary Create Consent Request VRP
     * @param {ConsumerVrpconsentrequestsBody} body JObject object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510CreateVRPConsentRequest(body: ConsumerVrpconsentrequestsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20160>> {
        return ConsentApiFp(this.configuration).oBPv510CreateVRPConsentRequest(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#scopes\">scopes</a>:</p>
     * @summary Get Consent By Consent Id via User
     * @param {string} CONSENT_ID the consent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510GetConsentByConsentId(CONSENT_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200156>> {
        return ConsentApiFp(this.configuration).oBPv510GetConsentByConsentId(CONSENT_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint gets the Consent By consent id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
     * @summary Get Consent By Consent Id via Consumer
     * @param {string} CONSENT_ID the consent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510GetConsentByConsentIdViaConsumer(CONSENT_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20152>> {
        return ConsentApiFp(this.configuration).oBPv510GetConsentByConsentIdViaConsumer(CONSENT_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint gets the Consents.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 consent_id  (ignore if omitted)</p><p>5 user_id  (ignore if omitted)</p><p>6 status  (ignore if omitted)</p><p>7 bank_id  (ignore if omitted)</p><p>eg:/management/consents?consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;o&#x3a;&#102;&#101;li&#x78;&#x73;&#109;&#105;&#116;&#x68;@&#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#108;i&#120;&#x73;&#x6d;&#x69;&#116;&#x68;@&#x65;&#120;a&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;o&#x6d;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
     * @summary Get Consents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510GetConsents(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200146>> {
        return ConsentApiFp(this.configuration).oBPv510GetConsents(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint gets the Consents at Bank by BANK_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p>1 limit (for pagination: defaults to 50)  eg:limit=200</p><p>2 offset (for pagination: zero index, defaults to 0) eg: offset=10</p><p>3 consumer_id  (ignore if omitted)</p><p>4 user_id  (ignore if omitted)</p><p>5 status  (ignore if omitted)</p><p>eg: /management/consents/banks/BANK_ID?&amp;consumer_id=78&amp;limit=10&amp;offset=10</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#\"><strong>aud</strong></a>: String</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>consent_reference_id</strong></a>: consent_reference_id</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>createdByUserId</strong></a>: createdByUserId</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#entitlements\"><strong>entitlements</strong></a>:</p><p><a href=\"/glossary#\"><strong>exp</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iat</strong></a>: String</p><p><a href=\"/glossary#\"><strong>iss</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jti</strong></a>: String</p><p><a href=\"/glossary#\"><strong>jwt_payload</strong></a>: jwt_payload</p><p><a href=\"/glossary#\"><strong>last_action_date</strong></a>: last_action_date</p><p><a href=\"/glossary#\"><strong>last_usage_date</strong></a>: last_usage_date</p><p><a href=\"/glossary#\"><strong>nbf</strong></a>: String</p><p><a href=\"/glossary#\"><strong>request_headers</strong></a>: request_headers</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>sub</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#views\"><strong>views</strong></a>:</p><p><a href=\"/glossary#\">access</a>: access</p><p><a href=\"/glossary#accounts\">accounts</a>:</p><p><a href=\"/glossary#\">allPsd2</a>: allPsd2</p><p><a href=\"/glossary#\">availableAccounts</a>: availableAccounts</p><p><a href=\"/glossary#\">balances</a>: balances</p><p><a href=\"/glossary#\">bban</a>: bban</p><p><a href=\"/glossary#\">currency</a>: EUR</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x66;e&#108;i&#120;&#x73;mi&#x74;h&#x40;&#x65;&#120;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#102;&#101;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#101;xa&#x6d;&#x70;&#x6c;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\">frequency_per_day</a>: frequency_per_day</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p><p><a href=\"/glossary#\">iban</a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\">maskedPan</a>: maskedPan</p><p><a href=\"/glossary#\">msisdn</a>: msisdn</p><p><a href=\"/glossary#name\">name</a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\">pan</a>: pan</p><p><a href=\"/glossary#\">remaining_requests</a>: remaining_requests</p><p><a href=\"/glossary#transactions\">transactions</a>:</p>
     * @summary Get Consents at Bank
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510GetConsentsAtBank(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200146>> {
        return ConsentApiFp(this.configuration).oBPv510GetConsentsAtBank(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint gets the Consents created by a current User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>api_standard</strong></a>: api_standard</p><p><a href=\"/glossary#api_version\"><strong>api_version</strong></a>:</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#consents\"><strong>consents</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Get My Consents
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510GetMyConsents(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200144>> {
        return ConsentApiFp(this.configuration).oBPv510GetMyConsents(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Provide client's certificate info of a current call specified by PSD2-CERT value at Request Header</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
     * @summary Provide client's certificate info of a current call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510MtlsClientCertificateInfo(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200152>> {
        return ConsentApiFp(this.configuration).oBPv510MtlsClientCertificateInfo(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Revoke Consent specified by CONSENT_ID</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Revoke Consent at Bank
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510RevokeConsentAtBank(CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return ConsentApiFp(this.configuration).oBPv510RevokeConsentAtBank(CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Revoke Consent specified by Consent-Id at Request Header</p><p>There are a few reasons you might need to revoke an application’s access to a user’s account:<br />- The user explicitly wishes to revoke the application’s access<br />- You as the service provider have determined an application is compromised or malicious, and want to disable it<br />- etc.</p><p>OBP as a resource server stores access tokens in a database, then it is relatively easy to revoke some token that belongs to a particular user.<br />The status of the token is changed to &quot;REVOKED&quot; so the next time the revoked client makes a request, their token will fail to validate.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Revoke Consent used in the Current Call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510SelfRevokeConsent(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return ConsentApiFp(this.configuration).oBPv510SelfRevokeConsent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint is used to update the Account Access of Consent.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Update Consent Account Access by CONSENT_ID
     * @param {CONSENTIDAccountaccessBody} body JObject object that needs to be added.
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510UpdateConsentAccountAccessByConsentId(body: CONSENTIDAccountaccessBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20088>> {
        return ConsentApiFp(this.configuration).oBPv510UpdateConsentAccountAccessByConsentId(body, CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint is used to update the Status of Consent.</p><p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, rejected, REVOKED, RECEIVED, received, VALID, valid, REVOKEDBYPSU, revokedByPsu, EXPIRED, expired, TERMINATEDBYTPP, terminatedByTpp, AUTHORISED, AWAITINGAUTHORISATION.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Update Consent Status by CONSENT_ID
     * @param {ConsentsCONSENTIDBody1} body JObject object that needs to be added.
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510UpdateConsentStatusByConsent(body: ConsentsCONSENTIDBody1, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20088>> {
        return ConsentApiFp(this.configuration).oBPv510UpdateConsentStatusByConsent(body, CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint is used to Update the User bound to a consent.</p><p>In general we would not expect for a management user to set the User bound to a consent, but there may be<br />some use cases where this workflow is useful.</p><p>If successful, the &quot;Created by User ID&quot; field in the OBP Consent table will be updated.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\">CONSENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p>
     * @summary Update Consent Created by User by CONSENT_ID
     * @param {CONSENTIDCreatedbyuserBody} body JObject object that needs to be added.
     * @param {string} CONSENT_ID the consent id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public async oBPv510UpdateConsentUserIdByConsentId(body: CONSENTIDCreatedbyuserBody, CONSENT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20088>> {
        return ConsentApiFp(this.configuration).oBPv510UpdateConsentUserIdByConsentId(body, CONSENT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
}
