/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorInvalidJsonFormat } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { InlineResponse200104 } from '../models';
import { InlineResponse200106 } from '../models';
/**
 * AuthenticationTypeValidationApi - axios parameter creator
 * @export
 */
export const AuthenticationTypeValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Create an Authentication Type Validation
         * @param {Array<string>} body array type value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateAuthenticationTypeValidation: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateAuthenticationTypeValidation.');
            }
            const localVarPath = `/obp/v4.0.0/management/authentication-type-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete an Authentication Type Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteAuthenticationTypeValidation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/authentication-type-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get all Authentication Type Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Authentication Type Validations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetAllAuthenticationTypeValidations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/authentication-type-validations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get all Authentication Type Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Authentication Type Validations - public
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetAllAuthenticationTypeValidationsPublic: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/endpoints/authentication-type-validations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get an Authentication Type Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetAuthenticationTypeValidation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/authentication-type-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Update an Authentication Type Validation
         * @param {Array<string>} body array type value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400UpdateAuthenticationTypeValidation: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400UpdateAuthenticationTypeValidation.');
            }
            const localVarPath = `/obp/v4.0.0/management/authentication-type-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationTypeValidationApi - functional programming interface
 * @export
 */
export const AuthenticationTypeValidationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Create an Authentication Type Validation
         * @param {Array<string>} body array type value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateAuthenticationTypeValidation(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200106>>> {
            const localVarAxiosArgs = await AuthenticationTypeValidationApiAxiosParamCreator(configuration).oBPv400CreateAuthenticationTypeValidation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete an Authentication Type Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteAuthenticationTypeValidation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await AuthenticationTypeValidationApiAxiosParamCreator(configuration).oBPv400DeleteAuthenticationTypeValidation(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get all Authentication Type Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Authentication Type Validations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllAuthenticationTypeValidations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200104>>> {
            const localVarAxiosArgs = await AuthenticationTypeValidationApiAxiosParamCreator(configuration).oBPv400GetAllAuthenticationTypeValidations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get all Authentication Type Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Authentication Type Validations - public
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllAuthenticationTypeValidationsPublic(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200104>>> {
            const localVarAxiosArgs = await AuthenticationTypeValidationApiAxiosParamCreator(configuration).oBPv400GetAllAuthenticationTypeValidationsPublic(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get an Authentication Type Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAuthenticationTypeValidation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200106>>> {
            const localVarAxiosArgs = await AuthenticationTypeValidationApiAxiosParamCreator(configuration).oBPv400GetAuthenticationTypeValidation(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Update an Authentication Type Validation
         * @param {Array<string>} body array type value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateAuthenticationTypeValidation(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200106>>> {
            const localVarAxiosArgs = await AuthenticationTypeValidationApiAxiosParamCreator(configuration).oBPv400UpdateAuthenticationTypeValidation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticationTypeValidationApi - factory interface
 * @export
 */
export const AuthenticationTypeValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Create an Authentication Type Validation
         * @param {Array<string>} body array type value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateAuthenticationTypeValidation(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200106>> {
            return AuthenticationTypeValidationApiFp(configuration).oBPv400CreateAuthenticationTypeValidation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete an Authentication Type Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteAuthenticationTypeValidation(options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return AuthenticationTypeValidationApiFp(configuration).oBPv400DeleteAuthenticationTypeValidation(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get all Authentication Type Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Authentication Type Validations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllAuthenticationTypeValidations(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200104>> {
            return AuthenticationTypeValidationApiFp(configuration).oBPv400GetAllAuthenticationTypeValidations(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get all Authentication Type Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get all Authentication Type Validations - public
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllAuthenticationTypeValidationsPublic(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200104>> {
            return AuthenticationTypeValidationApiFp(configuration).oBPv400GetAllAuthenticationTypeValidationsPublic(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Get an Authentication Type Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAuthenticationTypeValidation(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200106>> {
            return AuthenticationTypeValidationApiFp(configuration).oBPv400GetAuthenticationTypeValidation(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Update an Authentication Type Validation
         * @param {Array<string>} body array type value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateAuthenticationTypeValidation(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200106>> {
            return AuthenticationTypeValidationApiFp(configuration).oBPv400UpdateAuthenticationTypeValidation(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationTypeValidationApi - object-oriented interface
 * @export
 * @class AuthenticationTypeValidationApi
 * @extends {BaseAPI}
 */
export class AuthenticationTypeValidationApi extends BaseAPI {
    /**
     * <p>Create an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
     * @summary Create an Authentication Type Validation
     * @param {Array<string>} body array type value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationTypeValidationApi
     */
    public async oBPv400CreateAuthenticationTypeValidation(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200106>> {
        return AuthenticationTypeValidationApiFp(this.configuration).oBPv400CreateAuthenticationTypeValidation(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete an Authentication Type Validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationTypeValidationApi
     */
    public async oBPv400DeleteAuthenticationTypeValidation(options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return AuthenticationTypeValidationApiFp(this.configuration).oBPv400DeleteAuthenticationTypeValidation(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get all Authentication Type Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p>
     * @summary Get all Authentication Type Validations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationTypeValidationApi
     */
    public async oBPv400GetAllAuthenticationTypeValidations(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200104>> {
        return AuthenticationTypeValidationApiFp(this.configuration).oBPv400GetAllAuthenticationTypeValidations(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get all Authentication Type Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p>
     * @summary Get all Authentication Type Validations - public
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationTypeValidationApi
     */
    public async oBPv400GetAllAuthenticationTypeValidationsPublic(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200104>> {
        return AuthenticationTypeValidationApiFp(this.configuration).oBPv400GetAllAuthenticationTypeValidationsPublic(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get an Authentication Type Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
     * @summary Get an Authentication Type Validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationTypeValidationApi
     */
    public async oBPv400GetAuthenticationTypeValidation(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200106>> {
        return AuthenticationTypeValidationApiFp(this.configuration).oBPv400GetAuthenticationTypeValidation(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update an Authentication Type Validation.</p><p>Please supply allowed authentication types.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
     * @summary Update an Authentication Type Validation
     * @param {Array<string>} body array type value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationTypeValidationApi
     */
    public async oBPv400UpdateAuthenticationTypeValidation(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200106>> {
        return AuthenticationTypeValidationApiFp(this.configuration).oBPv400UpdateAuthenticationTypeValidation(body, options).then((request) => request(this.axios, this.basePath));
    }
}
