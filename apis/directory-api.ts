/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ConsumerJsonV510 } from '../models';
import { ConsumerJwtPostJsonV510 } from '../models';
import { ErrorInvalidJsonFormat } from '../models';
import { ErrorUnknownError } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { RegulatedEntitiesJsonV510 } from '../models';
import { RegulatedEntityPostJsonV510 } from '../models';
/**
 * DirectoryApi - axios parameter creator
 * @export
 */
export const DirectoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create a Consumer (mTLS access).</p><p>JWT payload:<br />- minimal<br />{ &quot;description&quot;:&quot;Description&quot; }<br />- full<br />{<br />&quot;description&quot;: &quot;Description&quot;,<br />&quot;app_name&quot;: &quot;Tesobe GmbH&quot;,<br />&quot;app_type&quot;: &quot;Sofit&quot;,<br />&quot;developer_email&quot;: &quot;<a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6d;a&#114;&#107;&#111;@&#x74;&#101;&#115;&#x6f;&#x62;&#x65;&#46;&#x63;&#111;&#109;\">&#x6d;a&#x72;&#107;&#111;&#64;&#x74;&#101;&#115;&#111;&#x62;e.&#99;&#x6f;&#109;</a>&quot;,<br />&quot;redirect_url&quot;: &quot;<a href=\"http://localhost:8082\">http://localhost:8082</a>&quot;<br />}<br />Please note that JWT must be signed with the counterpart private key of the public key used to establish mTLS</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#app_name\"><strong>app_name</strong></a>: appNameBank</p><p><a href=\"/glossary#app_type\"><strong>app_type</strong></a>: Web</p><p><a href=\"/glossary#\"><strong>certificate_pem</strong></a>: certificate_pem</p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>consumer_key</strong></a>: bwf0ykmwoirip1yjxcn15wnhuyxcziwgtcoaildq</p><p><a href=\"/glossary#created\"><strong>created</strong></a>:</p><p><a href=\"/glossary#created_by_user\"><strong>created_by_user</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#developer_email\"><strong>developer_email</strong></a>:</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;a&#105;l&#116;&#111;&#58;f&#101;l&#105;&#120;&#115;m&#105;&#116;&#x68;&#x40;ex&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;c&#111;&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;i&#x74;&#104;&#x40;&#101;x&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#enabled\"><strong>enabled</strong></a>: false</p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#redirect_url\"><strong>redirect_url</strong></a>: <a href=\"https://apisandbox.openbankproject.com\">https://apisandbox.openbankproject.com</a></p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\">certificate_info</a>: certificate_info</p><p><a href=\"/glossary#logo_url\">logo_url</a>: logo_url</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
         * @summary Create a Consumer(Dynamic Registration)
         * @param {ConsumerJwtPostJsonV510} body ConsumerJwtPostJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CreateConsumerDynamicRegistraion: async (body: ConsumerJwtPostJsonV510, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510CreateConsumerDynamicRegistraion.');
            }
            const localVarPath = `/obp/v5.1.0/dynamic-registration/consumers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create Regulated Entity</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Create Regulated Entity
         * @param {RegulatedEntityPostJsonV510} body RegulatedEntityPostJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CreateRegulatedEntity: async (body: RegulatedEntityPostJsonV510, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510CreateRegulatedEntity.');
            }
            const localVarPath = `/obp/v5.1.0/regulated-entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete Regulated Entity specified by REGULATED_ENTITY_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Regulated Entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510DeleteRegulatedEntity: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/regulated-entities/REGULATED_ENTITY_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Regulated Entity By REGULATED_ENTITY_ID</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Get Regulated Entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetRegulatedEntityById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/regulated-entities/REGULATED_ENTITY_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Returns information about:</p><ul><li>Regulated Entities</li></ul><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Get Regulated Entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510RegulatedEntities: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/regulated-entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectoryApi - functional programming interface
 * @export
 */
export const DirectoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create a Consumer (mTLS access).</p><p>JWT payload:<br />- minimal<br />{ &quot;description&quot;:&quot;Description&quot; }<br />- full<br />{<br />&quot;description&quot;: &quot;Description&quot;,<br />&quot;app_name&quot;: &quot;Tesobe GmbH&quot;,<br />&quot;app_type&quot;: &quot;Sofit&quot;,<br />&quot;developer_email&quot;: &quot;<a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6d;a&#114;&#107;&#111;@&#x74;&#101;&#115;&#x6f;&#x62;&#x65;&#46;&#x63;&#111;&#109;\">&#x6d;a&#x72;&#107;&#111;&#64;&#x74;&#101;&#115;&#111;&#x62;e.&#99;&#x6f;&#109;</a>&quot;,<br />&quot;redirect_url&quot;: &quot;<a href=\"http://localhost:8082\">http://localhost:8082</a>&quot;<br />}<br />Please note that JWT must be signed with the counterpart private key of the public key used to establish mTLS</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#app_name\"><strong>app_name</strong></a>: appNameBank</p><p><a href=\"/glossary#app_type\"><strong>app_type</strong></a>: Web</p><p><a href=\"/glossary#\"><strong>certificate_pem</strong></a>: certificate_pem</p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>consumer_key</strong></a>: bwf0ykmwoirip1yjxcn15wnhuyxcziwgtcoaildq</p><p><a href=\"/glossary#created\"><strong>created</strong></a>:</p><p><a href=\"/glossary#created_by_user\"><strong>created_by_user</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#developer_email\"><strong>developer_email</strong></a>:</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;a&#105;l&#116;&#111;&#58;f&#101;l&#105;&#120;&#115;m&#105;&#116;&#x68;&#x40;ex&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;c&#111;&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;i&#x74;&#104;&#x40;&#101;x&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#enabled\"><strong>enabled</strong></a>: false</p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#redirect_url\"><strong>redirect_url</strong></a>: <a href=\"https://apisandbox.openbankproject.com\">https://apisandbox.openbankproject.com</a></p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\">certificate_info</a>: certificate_info</p><p><a href=\"/glossary#logo_url\">logo_url</a>: logo_url</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
         * @summary Create a Consumer(Dynamic Registration)
         * @param {ConsumerJwtPostJsonV510} body ConsumerJwtPostJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateConsumerDynamicRegistraion(body: ConsumerJwtPostJsonV510, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ConsumerJsonV510>>> {
            const localVarAxiosArgs = await DirectoryApiAxiosParamCreator(configuration).oBPv510CreateConsumerDynamicRegistraion(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create Regulated Entity</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Create Regulated Entity
         * @param {RegulatedEntityPostJsonV510} body RegulatedEntityPostJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateRegulatedEntity(body: RegulatedEntityPostJsonV510, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RegulatedEntitiesJsonV510>>> {
            const localVarAxiosArgs = await DirectoryApiAxiosParamCreator(configuration).oBPv510CreateRegulatedEntity(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete Regulated Entity specified by REGULATED_ENTITY_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Regulated Entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510DeleteRegulatedEntity(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DirectoryApiAxiosParamCreator(configuration).oBPv510DeleteRegulatedEntity(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Regulated Entity By REGULATED_ENTITY_ID</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Get Regulated Entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetRegulatedEntityById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RegulatedEntitiesJsonV510>>> {
            const localVarAxiosArgs = await DirectoryApiAxiosParamCreator(configuration).oBPv510GetRegulatedEntityById(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Returns information about:</p><ul><li>Regulated Entities</li></ul><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Get Regulated Entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510RegulatedEntities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RegulatedEntitiesJsonV510>>> {
            const localVarAxiosArgs = await DirectoryApiAxiosParamCreator(configuration).oBPv510RegulatedEntities(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DirectoryApi - factory interface
 * @export
 */
export const DirectoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create a Consumer (mTLS access).</p><p>JWT payload:<br />- minimal<br />{ &quot;description&quot;:&quot;Description&quot; }<br />- full<br />{<br />&quot;description&quot;: &quot;Description&quot;,<br />&quot;app_name&quot;: &quot;Tesobe GmbH&quot;,<br />&quot;app_type&quot;: &quot;Sofit&quot;,<br />&quot;developer_email&quot;: &quot;<a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6d;a&#114;&#107;&#111;@&#x74;&#101;&#115;&#x6f;&#x62;&#x65;&#46;&#x63;&#111;&#109;\">&#x6d;a&#x72;&#107;&#111;&#64;&#x74;&#101;&#115;&#111;&#x62;e.&#99;&#x6f;&#109;</a>&quot;,<br />&quot;redirect_url&quot;: &quot;<a href=\"http://localhost:8082\">http://localhost:8082</a>&quot;<br />}<br />Please note that JWT must be signed with the counterpart private key of the public key used to establish mTLS</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#app_name\"><strong>app_name</strong></a>: appNameBank</p><p><a href=\"/glossary#app_type\"><strong>app_type</strong></a>: Web</p><p><a href=\"/glossary#\"><strong>certificate_pem</strong></a>: certificate_pem</p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>consumer_key</strong></a>: bwf0ykmwoirip1yjxcn15wnhuyxcziwgtcoaildq</p><p><a href=\"/glossary#created\"><strong>created</strong></a>:</p><p><a href=\"/glossary#created_by_user\"><strong>created_by_user</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#developer_email\"><strong>developer_email</strong></a>:</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;a&#105;l&#116;&#111;&#58;f&#101;l&#105;&#120;&#115;m&#105;&#116;&#x68;&#x40;ex&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;c&#111;&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;i&#x74;&#104;&#x40;&#101;x&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#enabled\"><strong>enabled</strong></a>: false</p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#redirect_url\"><strong>redirect_url</strong></a>: <a href=\"https://apisandbox.openbankproject.com\">https://apisandbox.openbankproject.com</a></p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\">certificate_info</a>: certificate_info</p><p><a href=\"/glossary#logo_url\">logo_url</a>: logo_url</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
         * @summary Create a Consumer(Dynamic Registration)
         * @param {ConsumerJwtPostJsonV510} body ConsumerJwtPostJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateConsumerDynamicRegistraion(body: ConsumerJwtPostJsonV510, options?: AxiosRequestConfig): Promise<AxiosResponse<ConsumerJsonV510>> {
            return DirectoryApiFp(configuration).oBPv510CreateConsumerDynamicRegistraion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create Regulated Entity</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Create Regulated Entity
         * @param {RegulatedEntityPostJsonV510} body RegulatedEntityPostJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateRegulatedEntity(body: RegulatedEntityPostJsonV510, options?: AxiosRequestConfig): Promise<AxiosResponse<RegulatedEntitiesJsonV510>> {
            return DirectoryApiFp(configuration).oBPv510CreateRegulatedEntity(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete Regulated Entity specified by REGULATED_ENTITY_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Regulated Entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510DeleteRegulatedEntity(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DirectoryApiFp(configuration).oBPv510DeleteRegulatedEntity(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Regulated Entity By REGULATED_ENTITY_ID</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Get Regulated Entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetRegulatedEntityById(options?: AxiosRequestConfig): Promise<AxiosResponse<RegulatedEntitiesJsonV510>> {
            return DirectoryApiFp(configuration).oBPv510GetRegulatedEntityById(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Returns information about:</p><ul><li>Regulated Entities</li></ul><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
         * @summary Get Regulated Entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510RegulatedEntities(options?: AxiosRequestConfig): Promise<AxiosResponse<RegulatedEntitiesJsonV510>> {
            return DirectoryApiFp(configuration).oBPv510RegulatedEntities(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectoryApi - object-oriented interface
 * @export
 * @class DirectoryApi
 * @extends {BaseAPI}
 */
export class DirectoryApi extends BaseAPI {
    /**
     * <p>Create a Consumer (mTLS access).</p><p>JWT payload:<br />- minimal<br />{ &quot;description&quot;:&quot;Description&quot; }<br />- full<br />{<br />&quot;description&quot;: &quot;Description&quot;,<br />&quot;app_name&quot;: &quot;Tesobe GmbH&quot;,<br />&quot;app_type&quot;: &quot;Sofit&quot;,<br />&quot;developer_email&quot;: &quot;<a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6d;a&#114;&#107;&#111;@&#x74;&#101;&#115;&#x6f;&#x62;&#x65;&#46;&#x63;&#111;&#109;\">&#x6d;a&#x72;&#107;&#111;&#64;&#x74;&#101;&#115;&#111;&#x62;e.&#99;&#x6f;&#109;</a>&quot;,<br />&quot;redirect_url&quot;: &quot;<a href=\"http://localhost:8082\">http://localhost:8082</a>&quot;<br />}<br />Please note that JWT must be signed with the counterpart private key of the public key used to establish mTLS</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#app_name\"><strong>app_name</strong></a>: appNameBank</p><p><a href=\"/glossary#app_type\"><strong>app_type</strong></a>: Web</p><p><a href=\"/glossary#\"><strong>certificate_pem</strong></a>: certificate_pem</p><p><a href=\"/glossary#company\"><strong>company</strong></a>: Tesobe GmbH</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>consumer_key</strong></a>: bwf0ykmwoirip1yjxcn15wnhuyxcziwgtcoaildq</p><p><a href=\"/glossary#created\"><strong>created</strong></a>:</p><p><a href=\"/glossary#created_by_user\"><strong>created_by_user</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#developer_email\"><strong>developer_email</strong></a>:</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;a&#105;l&#116;&#111;&#58;f&#101;l&#105;&#120;&#115;m&#105;&#116;&#x68;&#x40;ex&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;c&#111;&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;i&#x74;&#104;&#x40;&#101;x&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#enabled\"><strong>enabled</strong></a>: false</p><p><a href=\"/glossary#\"><strong>issuer_domain_name</strong></a>: issuer_domain_name</p><p><a href=\"/glossary#\"><strong>not_after</strong></a>: not_after</p><p><a href=\"/glossary#\"><strong>not_before</strong></a>: not_before</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#redirect_url\"><strong>redirect_url</strong></a>: <a href=\"https://apisandbox.openbankproject.com\">https://apisandbox.openbankproject.com</a></p><p><a href=\"/glossary#\"><strong>subject_domain_name</strong></a>: subject_domain_name</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\">certificate_info</a>: certificate_info</p><p><a href=\"/glossary#logo_url\">logo_url</a>: logo_url</p><p><a href=\"/glossary#roles\">roles</a>: CanCreateMyUser</p><p><a href=\"/glossary#\">roles_info</a>: roles_info</p>
     * @summary Create a Consumer(Dynamic Registration)
     * @param {ConsumerJwtPostJsonV510} body ConsumerJwtPostJsonV510 object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApi
     */
    public async oBPv510CreateConsumerDynamicRegistraion(body: ConsumerJwtPostJsonV510, options?: AxiosRequestConfig) : Promise<AxiosResponse<ConsumerJsonV510>> {
        return DirectoryApiFp(this.configuration).oBPv510CreateConsumerDynamicRegistraion(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create Regulated Entity</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
     * @summary Create Regulated Entity
     * @param {RegulatedEntityPostJsonV510} body RegulatedEntityPostJsonV510 object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApi
     */
    public async oBPv510CreateRegulatedEntity(body: RegulatedEntityPostJsonV510, options?: AxiosRequestConfig) : Promise<AxiosResponse<RegulatedEntitiesJsonV510>> {
        return DirectoryApiFp(this.configuration).oBPv510CreateRegulatedEntity(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete Regulated Entity specified by REGULATED_ENTITY_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Regulated Entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApi
     */
    public async oBPv510DeleteRegulatedEntity(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DirectoryApiFp(this.configuration).oBPv510DeleteRegulatedEntity(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Regulated Entity By REGULATED_ENTITY_ID</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">REGULATED_ENTITY_ID</a>: REGULATED_ENTITY_ID</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
     * @summary Get Regulated Entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApi
     */
    public async oBPv510GetRegulatedEntityById(options?: AxiosRequestConfig) : Promise<AxiosResponse<RegulatedEntitiesJsonV510>> {
        return DirectoryApiFp(this.configuration).oBPv510GetRegulatedEntityById(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Returns information about:</p><ul><li>Regulated Entities</li></ul><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>certificate_authority_ca_owner_id</strong></a>: certificate_authority_ca_owner_id</p><p><a href=\"/glossary#\"><strong>entities</strong></a>: entities</p><p><a href=\"/glossary#\"><strong>entity_address</strong></a>: entity_address</p><p><a href=\"/glossary#\"><strong>entity_certificate_public_key</strong></a>: entity_certificate_public_key</p><p><a href=\"/glossary#\"><strong>entity_code</strong></a>: entity_code</p><p><a href=\"/glossary#\"><strong>entity_country</strong></a>: entity_country</p><p><a href=\"/glossary#\"><strong>entity_id</strong></a>: entity_id</p><p><a href=\"/glossary#\"><strong>entity_name</strong></a>: entity_name</p><p><a href=\"/glossary#\"><strong>entity_post_code</strong></a>: entity_post_code</p><p><a href=\"/glossary#\"><strong>entity_town_city</strong></a>: entity_town_city</p><p><a href=\"/glossary#\"><strong>entity_type</strong></a>: entity_type</p><p><a href=\"/glossary#\"><strong>entity_web_site</strong></a>: entity_web_site</p><p><a href=\"/glossary#\"><strong>services</strong></a>: services</p>
     * @summary Get Regulated Entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryApi
     */
    public async oBPv510RegulatedEntities(options?: AxiosRequestConfig) : Promise<AxiosResponse<RegulatedEntitiesJsonV510>> {
        return DirectoryApiFp(this.configuration).oBPv510RegulatedEntities(options).then((request) => request(this.axios, this.basePath));
    }
}
