/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AliasJSON } from '../models';
import { CorporateLocationJSON } from '../models';
import { CounterpartiesJson400 } from '../models';
import { CounterpartyWithMetadataJson400 } from '../models';
import { ErrorBankAccountNotFound } from '../models';
import { ErrorUnknownError } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { ImageUrlJSON } from '../models';
import { MoreInfoJSON } from '../models';
import { OpenCorporateUrlJSON } from '../models';
import { OtherAccountJSON } from '../models';
import { OtherAccountJsonV300 } from '../models';
import { OtherAccountMetadataJSON } from '../models';
import { OtherAccountsJsonV300 } from '../models';
import { PhysicalLocationJSON } from '../models';
import { PostCounterpartyJson400 } from '../models';
import { SuccessMessage } from '../models';
import { UrlJSON } from '../models';
/**
 * CounterpartyApi - axios parameter creator
 * @export
 */
export const CounterpartyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Add the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Corporate Location to Counterparty
         * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddCounterpartyCorporateLocation: async (body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddCounterpartyCorporateLocation.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyCorporateLocation.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddCounterpartyCorporateLocation.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyCorporateLocation.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddCounterpartyCorporateLocation.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/corporate_location`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add a url that points to the logo of the counterparty</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add image url to other bank account
         * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddCounterpartyImageUrl: async (body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddCounterpartyImageUrl.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyImageUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddCounterpartyImageUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyImageUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddCounterpartyImageUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/image_url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add a description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Counterparty More Info
         * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddCounterpartyMoreInfo: async (body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddCounterpartyMoreInfo.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyMoreInfo.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddCounterpartyMoreInfo.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyMoreInfo.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddCounterpartyMoreInfo.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/more_info`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add open corporates url to other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Open Corporates URL to Counterparty
         * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddCounterpartyOpenCorporatesUrl: async (body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddCounterpartyOpenCorporatesUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/open_corporates_url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add physical location to other bank account
         * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddCounterpartyPhysicalLocation: async (body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddCounterpartyPhysicalLocation.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/physical_location`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p>Note: Public aliases are automatically generated for new 'other accounts / counterparties', so this call should only be used if<br />the public alias was deleted.</p><p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add public alias to other bank account
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddCounterpartyPublicAlias: async (body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddCounterpartyPublicAlias.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyPublicAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddCounterpartyPublicAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyPublicAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddCounterpartyPublicAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add url to other bank account
         * @param {UrlJSON} body UrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddCounterpartyUrl: async (body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddCounterpartyUrl.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddCounterpartyUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddCounterpartyUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddCounterpartyUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Other Account Private Alias
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121AddOtherAccountPrivateAlias: async (body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121AddOtherAccountPrivateAlias.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121AddOtherAccountPrivateAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121AddOtherAccountPrivateAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121AddOtherAccountPrivateAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121AddOtherAccountPrivateAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete corporate location of other bank account. Delete the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Corporate Location
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyCorporateLocation: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyCorporateLocation.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyCorporateLocation.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyCorporateLocation.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyCorporateLocation.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/corporate_location`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete image url of other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Image URL
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyImageUrl: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyImageUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyImageUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyImageUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyImageUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/image_url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete more info of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyMoreInfo: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyMoreInfo.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyMoreInfo.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyMoreInfo.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyMoreInfo.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/more_info`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Open Corporates URL
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyOpenCorporatesUrl: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyOpenCorporatesUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/open_corporates_url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete physical location of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Physical Location
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyPhysicalLocation: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyPhysicalLocation.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/physical_location`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Private Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyPrivateAlias: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyPrivateAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyPrivateAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyPrivateAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyPrivateAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Public Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyPublicAlias: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyPublicAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyPublicAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyPublicAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyPublicAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete url of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121DeleteCounterpartyUrl: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121DeleteCounterpartyUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121DeleteCounterpartyUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121DeleteCounterpartyUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Returns the public alias of the other account OTHER_ACCOUNT_ID.<br />User Authentication is Optional. The User need not be logged in.<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated. if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
         * @summary Get public alias of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121GetCounterpartyPublicAlias: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121GetCounterpartyPublicAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121GetCounterpartyPublicAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121GetCounterpartyPublicAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121GetCounterpartyPublicAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get other account of a transaction.<br />Returns details of the other party involved in the transaction, moderated by the <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).<br />Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#transaction_ids\">TRANSACTION_ID</a>: 2fg8a7e4-6d02-40e3-a129-0b2bf89de8ub</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>IBAN</strong></a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#Bank\"><strong>bank</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#kind\"><strong>kind</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#national_identifier\"><strong>national_identifier</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#swift_bic\"><strong>swift_bic</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account of Transaction
         * @param {string} TRANSACTION_ID The transaction id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121GetOtherAccountForTransaction: async (TRANSACTION_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'TRANSACTION_ID' is not null or undefined
            if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
                throw new RequiredError('TRANSACTION_ID','Required parameter TRANSACTION_ID was null or undefined when calling oBPv121GetOtherAccountForTransaction.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121GetOtherAccountForTransaction.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121GetOtherAccountForTransaction.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121GetOtherAccountForTransaction.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/other_account`
                .replace(`{${"TRANSACTION_ID"}}`, encodeURIComponent(String(TRANSACTION_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get metadata of one other account.<br />Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p><p>Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account Metadata
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121GetOtherAccountMetadata: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121GetOtherAccountMetadata.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121GetOtherAccountMetadata.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121GetOtherAccountMetadata.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121GetOtherAccountMetadata.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
         * @summary Get Other Account Private Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121GetOtherAccountPrivateAlias: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121GetOtherAccountPrivateAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121GetOtherAccountPrivateAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121GetOtherAccountPrivateAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121GetOtherAccountPrivateAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Corporate Location
         * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyCorporateLocation: async (body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyCorporateLocation.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyCorporateLocation.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyCorporateLocation.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyCorporateLocation.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyCorporateLocation.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/corporate_location`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the url that points to the logo of the counterparty</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Image Url
         * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyImageUrl: async (body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyImageUrl.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyImageUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyImageUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyImageUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyImageUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/image_url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty More Info
         * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyMoreInfo: async (body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyMoreInfo.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyMoreInfo.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyMoreInfo.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyMoreInfo.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyMoreInfo.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/more_info`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Open Corporates Url of Counterparty
         * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyOpenCorporatesUrl: async (body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyOpenCorporatesUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyOpenCorporatesUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/open_corporates_url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Physical Location
         * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyPhysicalLocation: async (body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyPhysicalLocation.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyPhysicalLocation.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/physical_location`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Private Alias
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyPrivateAlias: async (body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyPrivateAlias.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyPrivateAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyPrivateAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyPrivateAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyPrivateAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update public alias of other bank account
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyPublicAlias: async (body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyPublicAlias.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyPublicAlias.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyPublicAlias.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyPublicAlias.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyPublicAlias.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update url of other bank account
         * @param {UrlJSON} body UrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv121UpdateCounterpartyUrl: async (body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv121UpdateCounterpartyUrl.');
            }
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyUrl.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv121UpdateCounterpartyUrl.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv121UpdateCounterpartyUrl.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv121UpdateCounterpartyUrl.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/url`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account by Id
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv300GetOtherAccountByIdForBankAccount: async (OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
            if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
                throw new RequiredError('OTHER_ACCOUNT_ID','Required parameter OTHER_ACCOUNT_ID was null or undefined when calling oBPv300GetOtherAccountByIdForBankAccount.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv300GetOtherAccountByIdForBankAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv300GetOtherAccountByIdForBankAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv300GetOtherAccountByIdForBankAccount.');
            }
            const localVarPath = `/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}`
                .replace(`{${"OTHER_ACCOUNT_ID"}}`, encodeURIComponent(String(OTHER_ACCOUNT_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view VIEW_ID is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#other_accounts\"><strong>other_accounts</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Accounts of one Account
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv300GetOtherAccountsForBankAccount: async (VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv300GetOtherAccountsForBankAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv300GetOtherAccountsForBankAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv300GetOtherAccountsForBankAccount.');
            }
            const localVarPath = `/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts`
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint creates an (Explicit) Counterparty for an Account.</p><p>For an introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Counterparty (Explicit)
         * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateCounterparty: async (body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateCounterparty.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400CreateCounterparty.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400CreateCounterparty.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateCounterparty.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties`
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This is a management endpoint that allows the creation of a Counterparty on any Account.</p><p>For an introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Counterparty for any account (Explicit)
         * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateCounterpartyForAnyAccount: async (body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateCounterpartyForAnyAccount.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400CreateCounterpartyForAnyAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400CreateCounterpartyForAnyAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateCounterpartyForAnyAccount.');
            }
            const localVarPath = `/obp/v4.0.0/management/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties`
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This is a management endpoint that enables the deletion of any specified Counterparty along with any related Metadata of that Counterparty.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty for any account (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteCounterpartyForAnyAccount: async (COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'COUNTERPARTY_ID' is not null or undefined
            if (COUNTERPARTY_ID === null || COUNTERPARTY_ID === undefined) {
                throw new RequiredError('COUNTERPARTY_ID','Required parameter COUNTERPARTY_ID was null or undefined when calling oBPv400DeleteCounterpartyForAnyAccount.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400DeleteCounterpartyForAnyAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400DeleteCounterpartyForAnyAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400DeleteCounterpartyForAnyAccount.');
            }
            const localVarPath = `/obp/v4.0.0/management/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties/{COUNTERPARTY_ID}`
                .replace(`{${"COUNTERPARTY_ID"}}`, encodeURIComponent(String(COUNTERPARTY_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint deletes the Counterparty on the Account / View specified by the COUNTERPARTY_ID.<br />It also deletes any related Counterparty Metadata.</p><p>The User calling this endpoint must have access to the View specified in the URL and that View must have the permission <code>can_delete_counterparty</code>.</p><p>For a general introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteExplicitCounterparty: async (COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'COUNTERPARTY_ID' is not null or undefined
            if (COUNTERPARTY_ID === null || COUNTERPARTY_ID === undefined) {
                throw new RequiredError('COUNTERPARTY_ID','Required parameter COUNTERPARTY_ID was null or undefined when calling oBPv400DeleteExplicitCounterparty.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400DeleteExplicitCounterparty.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400DeleteExplicitCounterparty.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400DeleteExplicitCounterparty.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties/{COUNTERPARTY_ID}`
                .replace(`{${"COUNTERPARTY_ID"}}`, encodeURIComponent(String(COUNTERPARTY_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This is a management endpoint that gets the Counterparties that have been explicitly created for an Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparties for any account (Explicit)
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCounterpartiesForAnyAccount: async (VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400GetCounterpartiesForAnyAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400GetCounterpartiesForAnyAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCounterpartiesForAnyAccount.');
            }
            const localVarPath = `/obp/v4.0.0/management/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties`
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This is a management endpoint that gets information about any single explicitly created Counterparty on an Account / View specified by its COUNTERPARTY_ID&quot;,</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by Id for any account (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCounterpartyByIdForAnyAccount: async (COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'COUNTERPARTY_ID' is not null or undefined
            if (COUNTERPARTY_ID === null || COUNTERPARTY_ID === undefined) {
                throw new RequiredError('COUNTERPARTY_ID','Required parameter COUNTERPARTY_ID was null or undefined when calling oBPv400GetCounterpartyByIdForAnyAccount.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400GetCounterpartyByIdForAnyAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400GetCounterpartyByIdForAnyAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCounterpartyByIdForAnyAccount.');
            }
            const localVarPath = `/obp/v4.0.0/management/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties/{COUNTERPARTY_ID}`
                .replace(`{${"COUNTERPARTY_ID"}}`, encodeURIComponent(String(COUNTERPARTY_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This is a management endpoint that allows the retrieval of any Counterparty on an Account / View by its Name.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_NAME</a>: John Smith Ltd.</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by name for any account (Explicit) 
         * @param {string} COUNTERPARTY_NAME the counterparty name
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCounterpartyByNameForAnyAccount: async (COUNTERPARTY_NAME: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'COUNTERPARTY_NAME' is not null or undefined
            if (COUNTERPARTY_NAME === null || COUNTERPARTY_NAME === undefined) {
                throw new RequiredError('COUNTERPARTY_NAME','Required parameter COUNTERPARTY_NAME was null or undefined when calling oBPv400GetCounterpartyByNameForAnyAccount.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400GetCounterpartyByNameForAnyAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400GetCounterpartyByNameForAnyAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCounterpartyByNameForAnyAccount.');
            }
            const localVarPath = `/obp/v4.0.0/management/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparty-names/{COUNTERPARTY_NAME}`
                .replace(`{${"COUNTERPARTY_NAME"}}`, encodeURIComponent(String(COUNTERPARTY_NAME)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get the Counterparties that have been explicitly created on the specified Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparties (Explicit)
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetExplicitCounterpartiesForAccount: async (VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400GetExplicitCounterpartiesForAccount.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400GetExplicitCounterpartiesForAccount.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetExplicitCounterpartiesForAccount.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties`
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint returns a single Counterparty on an Account View specified by its COUNTERPARTY_ID:</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by Id (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetExplicitCounterpartyById: async (COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'COUNTERPARTY_ID' is not null or undefined
            if (COUNTERPARTY_ID === null || COUNTERPARTY_ID === undefined) {
                throw new RequiredError('COUNTERPARTY_ID','Required parameter COUNTERPARTY_ID was null or undefined when calling oBPv400GetExplicitCounterpartyById.');
            }
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv400GetExplicitCounterpartyById.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv400GetExplicitCounterpartyById.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetExplicitCounterpartyById.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties/{COUNTERPARTY_ID}`
                .replace(`{${"COUNTERPARTY_ID"}}`, encodeURIComponent(String(COUNTERPARTY_ID)))
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounterpartyApi - functional programming interface
 * @export
 */
export const CounterpartyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Add the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Corporate Location to Counterparty
         * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyCorporateLocation(body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddCounterpartyCorporateLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add a url that points to the logo of the counterparty</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add image url to other bank account
         * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyImageUrl(body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddCounterpartyImageUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add a description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Counterparty More Info
         * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyMoreInfo(body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddCounterpartyMoreInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add open corporates url to other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Open Corporates URL to Counterparty
         * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyOpenCorporatesUrl(body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddCounterpartyOpenCorporatesUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add physical location to other bank account
         * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyPhysicalLocation(body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddCounterpartyPhysicalLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p>Note: Public aliases are automatically generated for new 'other accounts / counterparties', so this call should only be used if<br />the public alias was deleted.</p><p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add public alias to other bank account
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyPublicAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddCounterpartyPublicAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add url to other bank account
         * @param {UrlJSON} body UrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyUrl(body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddCounterpartyUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Other Account Private Alias
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddOtherAccountPrivateAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121AddOtherAccountPrivateAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete corporate location of other bank account. Delete the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Corporate Location
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyCorporateLocation(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyCorporateLocation(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete image url of other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Image URL
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyImageUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyImageUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete more info of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyMoreInfo(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyMoreInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Open Corporates URL
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyOpenCorporatesUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyOpenCorporatesUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete physical location of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Physical Location
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyPhysicalLocation(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyPhysicalLocation(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Private Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyPrivateAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyPrivateAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Public Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyPublicAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyPublicAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete url of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121DeleteCounterpartyUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Returns the public alias of the other account OTHER_ACCOUNT_ID.<br />User Authentication is Optional. The User need not be logged in.<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated. if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
         * @summary Get public alias of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetCounterpartyPublicAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AliasJSON>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121GetCounterpartyPublicAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get other account of a transaction.<br />Returns details of the other party involved in the transaction, moderated by the <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).<br />Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#transaction_ids\">TRANSACTION_ID</a>: 2fg8a7e4-6d02-40e3-a129-0b2bf89de8ub</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>IBAN</strong></a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#Bank\"><strong>bank</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#kind\"><strong>kind</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#national_identifier\"><strong>national_identifier</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#swift_bic\"><strong>swift_bic</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account of Transaction
         * @param {string} TRANSACTION_ID The transaction id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetOtherAccountForTransaction(TRANSACTION_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OtherAccountJSON>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121GetOtherAccountForTransaction(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get metadata of one other account.<br />Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p><p>Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account Metadata
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetOtherAccountMetadata(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OtherAccountMetadataJSON>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121GetOtherAccountMetadata(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
         * @summary Get Other Account Private Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetOtherAccountPrivateAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AliasJSON>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121GetOtherAccountPrivateAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Corporate Location
         * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyCorporateLocation(body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyCorporateLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the url that points to the logo of the counterparty</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Image Url
         * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyImageUrl(body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyImageUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty More Info
         * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyMoreInfo(body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyMoreInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Open Corporates Url of Counterparty
         * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyOpenCorporatesUrl(body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyOpenCorporatesUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Physical Location
         * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyPhysicalLocation(body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyPhysicalLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Private Alias
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyPrivateAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyPrivateAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update public alias of other bank account
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyPublicAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyPublicAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update url of other bank account
         * @param {UrlJSON} body UrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyUrl(body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv121UpdateCounterpartyUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account by Id
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300GetOtherAccountByIdForBankAccount(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OtherAccountJsonV300>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv300GetOtherAccountByIdForBankAccount(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view VIEW_ID is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#other_accounts\"><strong>other_accounts</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Accounts of one Account
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300GetOtherAccountsForBankAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OtherAccountsJsonV300>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv300GetOtherAccountsForBankAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint creates an (Explicit) Counterparty for an Account.</p><p>For an introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Counterparty (Explicit)
         * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCounterparty(body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterpartyWithMetadataJson400>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400CreateCounterparty(body, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This is a management endpoint that allows the creation of a Counterparty on any Account.</p><p>For an introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Counterparty for any account (Explicit)
         * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCounterpartyForAnyAccount(body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterpartyWithMetadataJson400>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400CreateCounterpartyForAnyAccount(body, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This is a management endpoint that enables the deletion of any specified Counterparty along with any related Metadata of that Counterparty.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty for any account (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCounterpartyForAnyAccount(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400DeleteCounterpartyForAnyAccount(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint deletes the Counterparty on the Account / View specified by the COUNTERPARTY_ID.<br />It also deletes any related Counterparty Metadata.</p><p>The User calling this endpoint must have access to the View specified in the URL and that View must have the permission <code>can_delete_counterparty</code>.</p><p>For a general introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteExplicitCounterparty(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400DeleteExplicitCounterparty(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This is a management endpoint that gets the Counterparties that have been explicitly created for an Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparties for any account (Explicit)
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCounterpartiesForAnyAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterpartiesJson400>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400GetCounterpartiesForAnyAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This is a management endpoint that gets information about any single explicitly created Counterparty on an Account / View specified by its COUNTERPARTY_ID&quot;,</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by Id for any account (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCounterpartyByIdForAnyAccount(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterpartyWithMetadataJson400>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400GetCounterpartyByIdForAnyAccount(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This is a management endpoint that allows the retrieval of any Counterparty on an Account / View by its Name.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_NAME</a>: John Smith Ltd.</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by name for any account (Explicit) 
         * @param {string} COUNTERPARTY_NAME the counterparty name
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCounterpartyByNameForAnyAccount(COUNTERPARTY_NAME: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterpartyWithMetadataJson400>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400GetCounterpartyByNameForAnyAccount(COUNTERPARTY_NAME, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get the Counterparties that have been explicitly created on the specified Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparties (Explicit)
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetExplicitCounterpartiesForAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterpartiesJson400>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400GetExplicitCounterpartiesForAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint returns a single Counterparty on an Account View specified by its COUNTERPARTY_ID:</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by Id (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetExplicitCounterpartyById(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterpartyWithMetadataJson400>>> {
            const localVarAxiosArgs = await CounterpartyApiAxiosParamCreator(configuration).oBPv400GetExplicitCounterpartyById(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CounterpartyApi - factory interface
 * @export
 */
export const CounterpartyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Add the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Corporate Location to Counterparty
         * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyCorporateLocation(body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddCounterpartyCorporateLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add a url that points to the logo of the counterparty</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add image url to other bank account
         * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyImageUrl(body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddCounterpartyImageUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add a description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Counterparty More Info
         * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyMoreInfo(body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddCounterpartyMoreInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add open corporates url to other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add Open Corporates URL to Counterparty
         * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyOpenCorporatesUrl(body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddCounterpartyOpenCorporatesUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add physical location to other bank account
         * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyPhysicalLocation(body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddCounterpartyPhysicalLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p>Note: Public aliases are automatically generated for new 'other accounts / counterparties', so this call should only be used if<br />the public alias was deleted.</p><p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add public alias to other bank account
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyPublicAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddCounterpartyPublicAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Add url to other bank account
         * @param {UrlJSON} body UrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddCounterpartyUrl(body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddCounterpartyUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Other Account Private Alias
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121AddOtherAccountPrivateAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121AddOtherAccountPrivateAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete corporate location of other bank account. Delete the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Corporate Location
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyCorporateLocation(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyCorporateLocation(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete image url of other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Image URL
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyImageUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyImageUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete more info of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyMoreInfo(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyMoreInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Open Corporates URL
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyOpenCorporatesUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyOpenCorporatesUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete physical location of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Physical Location
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyPhysicalLocation(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyPhysicalLocation(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Private Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyPrivateAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyPrivateAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty Public Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyPublicAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyPublicAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete url of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121DeleteCounterpartyUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv121DeleteCounterpartyUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Returns the public alias of the other account OTHER_ACCOUNT_ID.<br />User Authentication is Optional. The User need not be logged in.<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated. if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
         * @summary Get public alias of other bank account
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetCounterpartyPublicAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AliasJSON>> {
            return CounterpartyApiFp(configuration).oBPv121GetCounterpartyPublicAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get other account of a transaction.<br />Returns details of the other party involved in the transaction, moderated by the <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).<br />Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#transaction_ids\">TRANSACTION_ID</a>: 2fg8a7e4-6d02-40e3-a129-0b2bf89de8ub</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>IBAN</strong></a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#Bank\"><strong>bank</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#kind\"><strong>kind</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#national_identifier\"><strong>national_identifier</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#swift_bic\"><strong>swift_bic</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account of Transaction
         * @param {string} TRANSACTION_ID The transaction id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetOtherAccountForTransaction(TRANSACTION_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OtherAccountJSON>> {
            return CounterpartyApiFp(configuration).oBPv121GetOtherAccountForTransaction(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get metadata of one other account.<br />Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p><p>Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account Metadata
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetOtherAccountMetadata(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OtherAccountMetadataJSON>> {
            return CounterpartyApiFp(configuration).oBPv121GetOtherAccountMetadata(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
         * @summary Get Other Account Private Alias
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121GetOtherAccountPrivateAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AliasJSON>> {
            return CounterpartyApiFp(configuration).oBPv121GetOtherAccountPrivateAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Corporate Location
         * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyCorporateLocation(body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyCorporateLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the url that points to the logo of the counterparty</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Image Url
         * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyImageUrl(body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyImageUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty More Info
         * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyMoreInfo(body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyMoreInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Open Corporates Url of Counterparty
         * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyOpenCorporatesUrl(body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyOpenCorporatesUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Physical Location
         * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyPhysicalLocation(body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyPhysicalLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update Counterparty Private Alias
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyPrivateAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyPrivateAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update public alias of other bank account
         * @param {AliasJSON} body AliasJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyPublicAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyPublicAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Update url of other bank account
         * @param {UrlJSON} body UrlJSON object that needs to be added.
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv121UpdateCounterpartyUrl(body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CounterpartyApiFp(configuration).oBPv121UpdateCounterpartyUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Account by Id
         * @param {string} OTHER_ACCOUNT_ID The other account id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300GetOtherAccountByIdForBankAccount(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OtherAccountJsonV300>> {
            return CounterpartyApiFp(configuration).oBPv300GetOtherAccountByIdForBankAccount(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view VIEW_ID is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#other_accounts\"><strong>other_accounts</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
         * @summary Get Other Accounts of one Account
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300GetOtherAccountsForBankAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OtherAccountsJsonV300>> {
            return CounterpartyApiFp(configuration).oBPv300GetOtherAccountsForBankAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint creates an (Explicit) Counterparty for an Account.</p><p>For an introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Counterparty (Explicit)
         * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCounterparty(body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
            return CounterpartyApiFp(configuration).oBPv400CreateCounterparty(body, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This is a management endpoint that allows the creation of a Counterparty on any Account.</p><p>For an introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Counterparty for any account (Explicit)
         * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCounterpartyForAnyAccount(body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
            return CounterpartyApiFp(configuration).oBPv400CreateCounterpartyForAnyAccount(body, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This is a management endpoint that enables the deletion of any specified Counterparty along with any related Metadata of that Counterparty.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty for any account (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCounterpartyForAnyAccount(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv400DeleteCounterpartyForAnyAccount(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint deletes the Counterparty on the Account / View specified by the COUNTERPARTY_ID.<br />It also deletes any related Counterparty Metadata.</p><p>The User calling this endpoint must have access to the View specified in the URL and that View must have the permission <code>can_delete_counterparty</code>.</p><p>For a general introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Counterparty (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteExplicitCounterparty(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CounterpartyApiFp(configuration).oBPv400DeleteExplicitCounterparty(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This is a management endpoint that gets the Counterparties that have been explicitly created for an Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparties for any account (Explicit)
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCounterpartiesForAnyAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterpartiesJson400>> {
            return CounterpartyApiFp(configuration).oBPv400GetCounterpartiesForAnyAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This is a management endpoint that gets information about any single explicitly created Counterparty on an Account / View specified by its COUNTERPARTY_ID&quot;,</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by Id for any account (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCounterpartyByIdForAnyAccount(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
            return CounterpartyApiFp(configuration).oBPv400GetCounterpartyByIdForAnyAccount(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This is a management endpoint that allows the retrieval of any Counterparty on an Account / View by its Name.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_NAME</a>: John Smith Ltd.</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by name for any account (Explicit) 
         * @param {string} COUNTERPARTY_NAME the counterparty name
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCounterpartyByNameForAnyAccount(COUNTERPARTY_NAME: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
            return CounterpartyApiFp(configuration).oBPv400GetCounterpartyByNameForAnyAccount(COUNTERPARTY_NAME, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get the Counterparties that have been explicitly created on the specified Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparties (Explicit)
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetExplicitCounterpartiesForAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterpartiesJson400>> {
            return CounterpartyApiFp(configuration).oBPv400GetExplicitCounterpartiesForAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint returns a single Counterparty on an Account View specified by its COUNTERPARTY_ID:</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Counterparty by Id (Explicit)
         * @param {string} COUNTERPARTY_ID the counterparty id
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetExplicitCounterpartyById(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
            return CounterpartyApiFp(configuration).oBPv400GetExplicitCounterpartyById(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CounterpartyApi - object-oriented interface
 * @export
 * @class CounterpartyApi
 * @extends {BaseAPI}
 */
export class CounterpartyApi extends BaseAPI {
    /**
     * <p>Add the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Add Corporate Location to Counterparty
     * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddCounterpartyCorporateLocation(body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddCounterpartyCorporateLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add a url that points to the logo of the counterparty</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Add image url to other bank account
     * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddCounterpartyImageUrl(body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddCounterpartyImageUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add a description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Add Counterparty More Info
     * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddCounterpartyMoreInfo(body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddCounterpartyMoreInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add open corporates url to other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Add Open Corporates URL to Counterparty
     * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddCounterpartyOpenCorporatesUrl(body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddCounterpartyOpenCorporatesUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Add physical location to other bank account
     * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddCounterpartyPhysicalLocation(body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddCounterpartyPhysicalLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p>Note: Public aliases are automatically generated for new 'other accounts / counterparties', so this call should only be used if<br />the public alias was deleted.</p><p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Add public alias to other bank account
     * @param {AliasJSON} body AliasJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddCounterpartyPublicAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddCounterpartyPublicAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Add url to other bank account
     * @param {UrlJSON} body UrlJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddCounterpartyUrl(body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddCounterpartyUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Create Other Account Private Alias
     * @param {AliasJSON} body AliasJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121AddOtherAccountPrivateAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121AddOtherAccountPrivateAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete corporate location of other bank account. Delete the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty Corporate Location
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyCorporateLocation(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyCorporateLocation(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete image url of other bank account</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty Image URL
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyImageUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyImageUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete more info of other bank account
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyMoreInfo(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyMoreInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty Open Corporates URL
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyOpenCorporatesUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyOpenCorporatesUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete physical location of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty Physical Location
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyPhysicalLocation(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyPhysicalLocation(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty Private Alias
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyPrivateAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyPrivateAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty Public Alias
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyPublicAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyPublicAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete url of other bank account
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121DeleteCounterpartyUrl(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv121DeleteCounterpartyUrl(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Returns the public alias of the other account OTHER_ACCOUNT_ID.<br />User Authentication is Optional. The User need not be logged in.<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated. if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
     * @summary Get public alias of other bank account
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121GetCounterpartyPublicAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AliasJSON>> {
        return CounterpartyApiFp(this.configuration).oBPv121GetCounterpartyPublicAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get other account of a transaction.<br />Returns details of the other party involved in the transaction, moderated by the <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).<br />Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#transaction_ids\">TRANSACTION_ID</a>: 2fg8a7e4-6d02-40e3-a129-0b2bf89de8ub</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>IBAN</strong></a>: DE91 1000 0000 0123 4567 89</p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#Bank\"><strong>bank</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#kind\"><strong>kind</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#national_identifier\"><strong>national_identifier</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#swift_bic\"><strong>swift_bic</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
     * @summary Get Other Account of Transaction
     * @param {string} TRANSACTION_ID The transaction id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121GetOtherAccountForTransaction(TRANSACTION_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OtherAccountJSON>> {
        return CounterpartyApiFp(this.configuration).oBPv121GetOtherAccountForTransaction(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get metadata of one other account.<br />Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p><p>Authentication via OAuth is required if the view is not public.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
     * @summary Get Other Account Metadata
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121GetOtherAccountMetadata(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OtherAccountMetadataJSON>> {
        return CounterpartyApiFp(this.configuration).oBPv121GetOtherAccountMetadata(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p>
     * @summary Get Other Account Private Alias
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121GetOtherAccountPrivateAlias(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AliasJSON>> {
        return CounterpartyApiFp(this.configuration).oBPv121GetOtherAccountPrivateAlias(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the geolocation of the counterparty's registered address</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update Counterparty Corporate Location
     * @param {CorporateLocationJSON} body CorporateLocationJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyCorporateLocation(body: CorporateLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyCorporateLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the url that points to the logo of the counterparty</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update Counterparty Image Url
     * @param {ImageUrlJSON} body ImageUrlJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyImageUrl(body: ImageUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyImageUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update Counterparty More Info
     * @param {MoreInfoJSON} body MoreInfoJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyMoreInfo(body: MoreInfoJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyMoreInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update open corporate url of other bank account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update Open Corporates Url of Counterparty
     * @param {OpenCorporateUrlJSON} body OpenCorporateUrlJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyOpenCorporatesUrl(body: OpenCorporateUrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyOpenCorporatesUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update geocoordinates of the counterparty's main location</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update Counterparty Physical Location
     * @param {PhysicalLocationJSON} body PhysicalLocationJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyPhysicalLocation(body: PhysicalLocationJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyPhysicalLocation(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update Counterparty Private Alias
     * @param {AliasJSON} body AliasJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyPrivateAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyPrivateAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p><p>User Authentication is Optional. The User need not be logged in.<br />Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update public alias of other bank account
     * @param {AliasJSON} body AliasJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyPublicAlias(body: AliasJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyPublicAlias(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>A url which represents the counterparty (home page url etc.)</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Update url of other bank account
     * @param {UrlJSON} body UrlJSON object that needs to be added.
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv121UpdateCounterpartyUrl(body: UrlJSON, OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CounterpartyApiFp(this.configuration).oBPv121UpdateCounterpartyUrl(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#other_account_id\">OTHER_ACCOUNT_ID</a>:</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
     * @summary Get Other Account by Id
     * @param {string} OTHER_ACCOUNT_ID The other account id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv300GetOtherAccountByIdForBankAccount(OTHER_ACCOUNT_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OtherAccountJsonV300>> {
        return CounterpartyApiFp(this.configuration).oBPv300GetOtherAccountByIdForBankAccount(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.<br />User Authentication is Optional. The User need not be logged in.</p><p>Authentication is required if the view VIEW_ID is not public.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>URL</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#display_name\"><strong>display_name</strong></a>:</p><p><a href=\"/glossary#holder\"><strong>holder</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_URL</strong></a>:</p><p><a href=\"/glossary#is_alias\"><strong>is_alias</strong></a>:</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_URL</strong></a>:</p><p><a href=\"/glossary#other_accounts\"><strong>other_accounts</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p>
     * @summary Get Other Accounts of one Account
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv300GetOtherAccountsForBankAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OtherAccountsJsonV300>> {
        return CounterpartyApiFp(this.configuration).oBPv300GetOtherAccountsForBankAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint creates an (Explicit) Counterparty for an Account.</p><p>For an introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Create Counterparty (Explicit)
     * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400CreateCounterparty(body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
        return CounterpartyApiFp(this.configuration).oBPv400CreateCounterparty(body, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This is a management endpoint that allows the creation of a Counterparty on any Account.</p><p>For an introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Create Counterparty for any account (Explicit)
     * @param {PostCounterpartyJson400} body PostCounterpartyJson400 object that needs to be added.
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400CreateCounterpartyForAnyAccount(body: PostCounterpartyJson400, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
        return CounterpartyApiFp(this.configuration).oBPv400CreateCounterpartyForAnyAccount(body, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This is a management endpoint that enables the deletion of any specified Counterparty along with any related Metadata of that Counterparty.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty for any account (Explicit)
     * @param {string} COUNTERPARTY_ID the counterparty id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400DeleteCounterpartyForAnyAccount(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv400DeleteCounterpartyForAnyAccount(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint deletes the Counterparty on the Account / View specified by the COUNTERPARTY_ID.<br />It also deletes any related Counterparty Metadata.</p><p>The User calling this endpoint must have access to the View specified in the URL and that View must have the permission <code>can_delete_counterparty</code>.</p><p>For a general introduction to Counterparties in OBP see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Counterparty (Explicit)
     * @param {string} COUNTERPARTY_ID the counterparty id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400DeleteExplicitCounterparty(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CounterpartyApiFp(this.configuration).oBPv400DeleteExplicitCounterparty(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This is a management endpoint that gets the Counterparties that have been explicitly created for an Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Get Counterparties for any account (Explicit)
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400GetCounterpartiesForAnyAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterpartiesJson400>> {
        return CounterpartyApiFp(this.configuration).oBPv400GetCounterpartiesForAnyAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This is a management endpoint that gets information about any single explicitly created Counterparty on an Account / View specified by its COUNTERPARTY_ID&quot;,</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Get Counterparty by Id for any account (Explicit)
     * @param {string} COUNTERPARTY_ID the counterparty id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400GetCounterpartyByIdForAnyAccount(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
        return CounterpartyApiFp(this.configuration).oBPv400GetCounterpartyByIdForAnyAccount(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This is a management endpoint that allows the retrieval of any Counterparty on an Account / View by its Name.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_NAME</a>: John Smith Ltd.</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Get Counterparty by name for any account (Explicit) 
     * @param {string} COUNTERPARTY_NAME the counterparty name
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400GetCounterpartyByNameForAnyAccount(COUNTERPARTY_NAME: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
        return CounterpartyApiFp(this.configuration).oBPv400GetCounterpartyByNameForAnyAccount(COUNTERPARTY_NAME, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get the Counterparties that have been explicitly created on the specified Account / View.</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#Counterparties\"><strong>counterparties</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Get Counterparties (Explicit)
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400GetExplicitCounterpartiesForAccount(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterpartiesJson400>> {
        return CounterpartyApiFp(this.configuration).oBPv400GetExplicitCounterpartiesForAccount(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint returns a single Counterparty on an Account View specified by its COUNTERPARTY_ID:</p><p>For a general introduction to Counterparties in OBP, see <a href=\"/glossary#Counterparties\">here</a></p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">COUNTERPARTY_ID</a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#bespoke\"><strong>bespoke</strong></a>:</p><p><a href=\"/glossary#corporate_location\"><strong>corporate_location</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>counterparty_id</strong></a>: 9fg8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#created_by_user_id\"><strong>created_by_user_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#image_url\"><strong>image_url</strong></a>:</p><p><a href=\"/glossary#\"><strong>is_beneficiary</strong></a>: false</p><p><a href=\"/glossary#\"><strong>key</strong></a>: CustomerNumber</p><p><a href=\"/glossary#latitude\"><strong>latitude</strong></a>: 38.8951</p><p><a href=\"/glossary#longitude\"><strong>longitude</strong></a>: -77.0364</p><p><a href=\"/glossary#metadata\"><strong>metadata</strong></a>:</p><p><a href=\"/glossary#more_info\"><strong>more_info</strong></a>: More information about this fee</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#open_corporates_url\"><strong>open_corporates_url</strong></a>:</p><p><a href=\"/glossary#other_account_routing_address\"><strong>other_account_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_routing_scheme\"><strong>other_account_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_address\"><strong>other_account_secondary_routing_address</strong></a>:</p><p><a href=\"/glossary#other_account_secondary_routing_scheme\"><strong>other_account_secondary_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_address\"><strong>other_bank_routing_address</strong></a>:</p><p><a href=\"/glossary#other_bank_routing_scheme\"><strong>other_bank_routing_scheme</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_address\"><strong>other_branch_routing_address</strong></a>:</p><p><a href=\"/glossary#other_branch_routing_scheme\"><strong>other_branch_routing_scheme</strong></a>:</p><p><a href=\"/glossary#physical_location\"><strong>physical_location</strong></a>:</p><p><a href=\"/glossary#private_alias\"><strong>private_alias</strong></a>:</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#public_alias\"><strong>public_alias</strong></a>:</p><p><a href=\"/glossary#this_account_id\"><strong>this_account_id</strong></a>:</p><p><a href=\"/glossary#this_bank_id\"><strong>this_bank_id</strong></a>:</p><p><a href=\"/glossary#this_view_id\"><strong>this_view_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#User\"><strong>user</strong></a>:</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Get Counterparty by Id (Explicit)
     * @param {string} COUNTERPARTY_ID the counterparty id
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartyApi
     */
    public async oBPv400GetExplicitCounterpartyById(COUNTERPARTY_ID: string, VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterpartyWithMetadataJson400>> {
        return CounterpartyApiFp(this.configuration).oBPv400GetExplicitCounterpartyById(COUNTERPARTY_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
}
