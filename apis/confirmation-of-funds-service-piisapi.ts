/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorUserNotLoggedIn } from '../models';
import { InlineResponse20026 } from '../models';
/**
 * ConfirmationOfFundsServicePIISApi - axios parameter creator
 * @export
 */
export const ConfirmationOfFundsServicePIISApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Check Available Funds<br />Mandatory URL parameters:</p><ul><li>amount=NUMBER</li><li>currency=STRING</li></ul><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><a href=\"/glossary#available_funds_request_id\"><strong>available_funds_request_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p>
         * @summary Check Available Funds
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310CheckFundsAvailable: async (VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VIEW_ID' is not null or undefined
            if (VIEW_ID === null || VIEW_ID === undefined) {
                throw new RequiredError('VIEW_ID','Required parameter VIEW_ID was null or undefined when calling oBPv310CheckFundsAvailable.');
            }
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv310CheckFundsAvailable.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310CheckFundsAvailable.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/funds-available`
                .replace(`{${"VIEW_ID"}}`, encodeURIComponent(String(VIEW_ID)))
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfirmationOfFundsServicePIISApi - functional programming interface
 * @export
 */
export const ConfirmationOfFundsServicePIISApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Check Available Funds<br />Mandatory URL parameters:</p><ul><li>amount=NUMBER</li><li>currency=STRING</li></ul><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><a href=\"/glossary#available_funds_request_id\"><strong>available_funds_request_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p>
         * @summary Check Available Funds
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CheckFundsAvailable(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20026>>> {
            const localVarAxiosArgs = await ConfirmationOfFundsServicePIISApiAxiosParamCreator(configuration).oBPv310CheckFundsAvailable(VIEW_ID, ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConfirmationOfFundsServicePIISApi - factory interface
 * @export
 */
export const ConfirmationOfFundsServicePIISApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Check Available Funds<br />Mandatory URL parameters:</p><ul><li>amount=NUMBER</li><li>currency=STRING</li></ul><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><a href=\"/glossary#available_funds_request_id\"><strong>available_funds_request_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p>
         * @summary Check Available Funds
         * @param {string} VIEW_ID The view id
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CheckFundsAvailable(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20026>> {
            return ConfirmationOfFundsServicePIISApiFp(configuration).oBPv310CheckFundsAvailable(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfirmationOfFundsServicePIISApi - object-oriented interface
 * @export
 * @class ConfirmationOfFundsServicePIISApi
 * @extends {BaseAPI}
 */
export class ConfirmationOfFundsServicePIISApi extends BaseAPI {
    /**
     * <p>Check Available Funds<br />Mandatory URL parameters:</p><ul><li>amount=NUMBER</li><li>currency=STRING</li></ul><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#this_view_id\">VIEW_ID</a>: owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#answer\"><strong>answer</strong></a>:</p><p><a href=\"/glossary#available_funds_request_id\"><strong>available_funds_request_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p>
     * @summary Check Available Funds
     * @param {string} VIEW_ID The view id
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfirmationOfFundsServicePIISApi
     */
    public async oBPv310CheckFundsAvailable(VIEW_ID: string, ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20026>> {
        return ConfirmationOfFundsServicePIISApiFp(this.configuration).oBPv310CheckFundsAvailable(VIEW_ID, ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
}
