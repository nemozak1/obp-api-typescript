/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorInvalidJsonFormat } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { InlineResponse2004 } from '../models';
import { JsonSchemaV400 } from '../models';
import { JsonValidationV400 } from '../models';
/**
 * JSONSchemaValidationApi - axios parameter creator
 * @export
 */
export const JSONSchemaValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>Note: It might take a few minutes for the newly created JSON Schema to take effect!</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Create a JSON Schema Validation
         * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateJsonSchemaValidation: async (body: JsonSchemaV400, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateJsonSchemaValidation.');
            }
            const localVarPath = `/obp/v4.0.0/management/json-schema-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete a JSON Schema Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteJsonSchemaValidation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/json-schema-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get all JSON Schema Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get all JSON Schema Validations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetAllJsonSchemaValidations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/json-schema-validations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get all JSON Schema Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get all JSON Schema Validations - public
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetAllJsonSchemaValidationsPublic: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/endpoints/json-schema-validations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get a JSON Schema Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetJsonSchemaValidation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/management/json-schema-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Update a JSON Schema Validation
         * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400UpdateJsonSchemaValidation: async (body: JsonSchemaV400, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400UpdateJsonSchemaValidation.');
            }
            const localVarPath = `/obp/v4.0.0/management/json-schema-validations/OPERATION_ID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JSONSchemaValidationApi - functional programming interface
 * @export
 */
export const JSONSchemaValidationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>Note: It might take a few minutes for the newly created JSON Schema to take effect!</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Create a JSON Schema Validation
         * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateJsonSchemaValidation(body: JsonSchemaV400, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonValidationV400>>> {
            const localVarAxiosArgs = await JSONSchemaValidationApiAxiosParamCreator(configuration).oBPv400CreateJsonSchemaValidation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete a JSON Schema Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteJsonSchemaValidation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await JSONSchemaValidationApiAxiosParamCreator(configuration).oBPv400DeleteJsonSchemaValidation(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get all JSON Schema Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get all JSON Schema Validations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllJsonSchemaValidations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await JSONSchemaValidationApiAxiosParamCreator(configuration).oBPv400GetAllJsonSchemaValidations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get all JSON Schema Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get all JSON Schema Validations - public
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllJsonSchemaValidationsPublic(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await JSONSchemaValidationApiAxiosParamCreator(configuration).oBPv400GetAllJsonSchemaValidationsPublic(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get a JSON Schema Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetJsonSchemaValidation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonValidationV400>>> {
            const localVarAxiosArgs = await JSONSchemaValidationApiAxiosParamCreator(configuration).oBPv400GetJsonSchemaValidation(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Update a JSON Schema Validation
         * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateJsonSchemaValidation(body: JsonSchemaV400, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonValidationV400>>> {
            const localVarAxiosArgs = await JSONSchemaValidationApiAxiosParamCreator(configuration).oBPv400UpdateJsonSchemaValidation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JSONSchemaValidationApi - factory interface
 * @export
 */
export const JSONSchemaValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>Note: It might take a few minutes for the newly created JSON Schema to take effect!</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Create a JSON Schema Validation
         * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateJsonSchemaValidation(body: JsonSchemaV400, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonValidationV400>> {
            return JSONSchemaValidationApiFp(configuration).oBPv400CreateJsonSchemaValidation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete a JSON Schema Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteJsonSchemaValidation(options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return JSONSchemaValidationApiFp(configuration).oBPv400DeleteJsonSchemaValidation(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get all JSON Schema Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get all JSON Schema Validations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllJsonSchemaValidations(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return JSONSchemaValidationApiFp(configuration).oBPv400GetAllJsonSchemaValidations(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get all JSON Schema Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get all JSON Schema Validations - public
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetAllJsonSchemaValidationsPublic(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return JSONSchemaValidationApiFp(configuration).oBPv400GetAllJsonSchemaValidationsPublic(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Get a JSON Schema Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetJsonSchemaValidation(options?: AxiosRequestConfig): Promise<AxiosResponse<JsonValidationV400>> {
            return JSONSchemaValidationApiFp(configuration).oBPv400GetJsonSchemaValidation(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
         * @summary Update a JSON Schema Validation
         * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateJsonSchemaValidation(body: JsonSchemaV400, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonValidationV400>> {
            return JSONSchemaValidationApiFp(configuration).oBPv400UpdateJsonSchemaValidation(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JSONSchemaValidationApi - object-oriented interface
 * @export
 * @class JSONSchemaValidationApi
 * @extends {BaseAPI}
 */
export class JSONSchemaValidationApi extends BaseAPI {
    /**
     * <p>Create a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>Note: It might take a few minutes for the newly created JSON Schema to take effect!</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
     * @summary Create a JSON Schema Validation
     * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JSONSchemaValidationApi
     */
    public async oBPv400CreateJsonSchemaValidation(body: JsonSchemaV400, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonValidationV400>> {
        return JSONSchemaValidationApiFp(this.configuration).oBPv400CreateJsonSchemaValidation(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete a JSON Schema Validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JSONSchemaValidationApi
     */
    public async oBPv400DeleteJsonSchemaValidation(options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return JSONSchemaValidationApiFp(this.configuration).oBPv400DeleteJsonSchemaValidation(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get all JSON Schema Validations.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
     * @summary Get all JSON Schema Validations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JSONSchemaValidationApi
     */
    public async oBPv400GetAllJsonSchemaValidations(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return JSONSchemaValidationApiFp(this.configuration).oBPv400GetAllJsonSchemaValidations(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get all JSON Schema Validations - public.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
     * @summary Get all JSON Schema Validations - public
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JSONSchemaValidationApi
     */
    public async oBPv400GetAllJsonSchemaValidationsPublic(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return JSONSchemaValidationApiFp(this.configuration).oBPv400GetAllJsonSchemaValidationsPublic(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get a JSON Schema Validation by operation_id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
     * @summary Get a JSON Schema Validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JSONSchemaValidationApi
     */
    public async oBPv400GetJsonSchemaValidation(options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonValidationV400>> {
        return JSONSchemaValidationApiFp(this.configuration).oBPv400GetJsonSchemaValidation(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update a JSON Schema Validation.</p><p>Introduction:</p>  <p>JSON Schema is &quot;a vocabulary that allows you to annotate and validate JSON documents&quot;.</p><p>By applying JSON Schema Validation to your OBP endpoints you can constrain POST and PUT request bodies. For example, you can set minimum / maximum lengths of fields and constrain values to certain lists or regular expressions.</p><p>See <a href=\"https://json-schema.org/\">JSONSchema.org</a> for more information about the JSON Schema standard.</p><p>To create a JSON Schema from an any JSON Request body you can use <a href=\"https://jsonschema.net/app/schemas/0\">JSON Schema Net</a></p><p>(The video link below shows how to use that)</p><p>Note: OBP Dynamic Entities also use JSON Schema Validation so you don't need to additionally wrap the resulting endpoints with extra JSON Schema Validation but you could do.</p><p>You can apply JSON schema validations to any OBP endpoint's request body using the POST and PUT endpoints listed in the link below.</p><p>PLEASE SEE the following video explanation: <a href=\"https://vimeo.com/485287014\">JSON schema validation of request for Static and Dynamic Endpoints and Entities</a></p><p>To use this endpoint, please supply a valid json-schema in the request body.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">OPERATION_ID</a>: OBPv4.0.0-getBanks</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>$schema</strong></a>: $schema</p><p><a href=\"/glossary#\"><strong>additionalProperties</strong></a>: additionalProperties</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#\"><strong>examples</strong></a>: examples</p><p><a href=\"/glossary#\"><strong>json_schema</strong></a>: json_schema</p><p><a href=\"/glossary#\"><strong>maxLength</strong></a>: maxLength</p><p><a href=\"/glossary#\"><strong>minLength</strong></a>: minLength</p><p><a href=\"/glossary#\"><strong>operation_id</strong></a>: OBPv4.0.0-getBanks</p><p><a href=\"/glossary#\"><strong>properties</strong></a>: properties</p><p><a href=\"/glossary#\"><strong>required</strong></a>: required</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>xxx_id</strong></a>: xxx_id</p>
     * @summary Update a JSON Schema Validation
     * @param {JsonSchemaV400} body JsonSchemaV400 object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JSONSchemaValidationApi
     */
    public async oBPv400UpdateJsonSchemaValidation(body: JsonSchemaV400, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonValidationV400>> {
        return JSONSchemaValidationApiFp(this.configuration).oBPv400UpdateJsonSchemaValidation(body, options).then((request) => request(this.axios, this.basePath));
    }
}
