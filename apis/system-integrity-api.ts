/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CheckSystemIntegrityJsonV510 } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
/**
 * SystemIntegrityApi - axios parameter creator
 * @export
 */
export const SystemIntegrityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Check unique index at account access table.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check Unique Index at Account Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510AccountAccessUniqueIndexCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/management/system/integrity/account-access-unique-index-1-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Check for sensible currencies at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check for Sensible Currencies
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510AccountCurrencyCheck: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510AccountCurrencyCheck.');
            }
            const localVarPath = `/obp/v5.1.0/management/system/integrity/banks/{BANK_ID}/account-currency-check`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Check custom view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check Custom View Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CustomViewNamesCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/management/system/integrity/custom-view-names-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Check for orphaned accounts at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check for Orphaned Accounts
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510OrphanedAccountCheck: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510OrphanedAccountCheck.');
            }
            const localVarPath = `/obp/v5.1.0/management/system/integrity/banks/{BANK_ID}/orphaned-account-check`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Check system view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check System View Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510SystemViewNamesCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/management/system/integrity/system-view-names-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemIntegrityApi - functional programming interface
 * @export
 */
export const SystemIntegrityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Check unique index at account access table.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check Unique Index at Account Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510AccountAccessUniqueIndexCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CheckSystemIntegrityJsonV510>>> {
            const localVarAxiosArgs = await SystemIntegrityApiAxiosParamCreator(configuration).oBPv510AccountAccessUniqueIndexCheck(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Check for sensible currencies at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check for Sensible Currencies
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510AccountCurrencyCheck(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CheckSystemIntegrityJsonV510>>> {
            const localVarAxiosArgs = await SystemIntegrityApiAxiosParamCreator(configuration).oBPv510AccountCurrencyCheck(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Check custom view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check Custom View Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CustomViewNamesCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CheckSystemIntegrityJsonV510>>> {
            const localVarAxiosArgs = await SystemIntegrityApiAxiosParamCreator(configuration).oBPv510CustomViewNamesCheck(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Check for orphaned accounts at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check for Orphaned Accounts
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510OrphanedAccountCheck(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CheckSystemIntegrityJsonV510>>> {
            const localVarAxiosArgs = await SystemIntegrityApiAxiosParamCreator(configuration).oBPv510OrphanedAccountCheck(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Check system view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check System View Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510SystemViewNamesCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CheckSystemIntegrityJsonV510>>> {
            const localVarAxiosArgs = await SystemIntegrityApiAxiosParamCreator(configuration).oBPv510SystemViewNamesCheck(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SystemIntegrityApi - factory interface
 * @export
 */
export const SystemIntegrityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Check unique index at account access table.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check Unique Index at Account Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510AccountAccessUniqueIndexCheck(options?: AxiosRequestConfig): Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
            return SystemIntegrityApiFp(configuration).oBPv510AccountAccessUniqueIndexCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Check for sensible currencies at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check for Sensible Currencies
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510AccountCurrencyCheck(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
            return SystemIntegrityApiFp(configuration).oBPv510AccountCurrencyCheck(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Check custom view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check Custom View Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CustomViewNamesCheck(options?: AxiosRequestConfig): Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
            return SystemIntegrityApiFp(configuration).oBPv510CustomViewNamesCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Check for orphaned accounts at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check for Orphaned Accounts
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510OrphanedAccountCheck(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
            return SystemIntegrityApiFp(configuration).oBPv510OrphanedAccountCheck(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Check system view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
         * @summary Check System View Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510SystemViewNamesCheck(options?: AxiosRequestConfig): Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
            return SystemIntegrityApiFp(configuration).oBPv510SystemViewNamesCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemIntegrityApi - object-oriented interface
 * @export
 * @class SystemIntegrityApi
 * @extends {BaseAPI}
 */
export class SystemIntegrityApi extends BaseAPI {
    /**
     * <p>Check unique index at account access table.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
     * @summary Check Unique Index at Account Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemIntegrityApi
     */
    public async oBPv510AccountAccessUniqueIndexCheck(options?: AxiosRequestConfig) : Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
        return SystemIntegrityApiFp(this.configuration).oBPv510AccountAccessUniqueIndexCheck(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Check for sensible currencies at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
     * @summary Check for Sensible Currencies
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemIntegrityApi
     */
    public async oBPv510AccountCurrencyCheck(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
        return SystemIntegrityApiFp(this.configuration).oBPv510AccountCurrencyCheck(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Check custom view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
     * @summary Check Custom View Names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemIntegrityApi
     */
    public async oBPv510CustomViewNamesCheck(options?: AxiosRequestConfig) : Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
        return SystemIntegrityApiFp(this.configuration).oBPv510CustomViewNamesCheck(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Check for orphaned accounts at Bank Account model</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
     * @summary Check for Orphaned Accounts
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemIntegrityApi
     */
    public async oBPv510OrphanedAccountCheck(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
        return SystemIntegrityApiFp(this.configuration).oBPv510OrphanedAccountCheck(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Check system view names.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p><p><a href=\"/glossary#\">debug_info</a>: debug_info</p>
     * @summary Check System View Names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemIntegrityApi
     */
    public async oBPv510SystemViewNamesCheck(options?: AxiosRequestConfig) : Promise<AxiosResponse<CheckSystemIntegrityJsonV510>> {
        return SystemIntegrityApiFp(this.configuration).oBPv510SystemViewNamesCheck(options).then((request) => request(this.axios, this.basePath));
    }
}
