/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddCustomerMessageJson } from '../models';
import { AgentJsonV510 } from '../models';
import { AttributeDefinitionJsonV400 } from '../models';
import { AttributeDefinitionResponseJsonV400 } from '../models';
import { AttributeDefinitionsResponseJsonV400 } from '../models';
import { CorrelatedEntities } from '../models';
import { CreateCustomerAccountLinkJson } from '../models';
import { CreateMeetingJsonV310 } from '../models';
import { CreateMessageJsonV400 } from '../models';
import { CreateUserCustomerLinkJson } from '../models';
import { CrmEventsJson } from '../models';
import { CustomerAccountLinkJson } from '../models';
import { CustomerAccountLinksJson } from '../models';
import { CustomerAddressJsonV310 } from '../models';
import { CustomerAddressesJsonV310 } from '../models';
import { CustomerAndUsersWithAttributesResponseJson } from '../models';
import { CustomerAttributeJsonV400 } from '../models';
import { CustomerAttributeResponseJsonV300 } from '../models';
import { CustomerAttributesResponseJson } from '../models';
import { CustomerJSONs } from '../models';
import { CustomerJSONsV300 } from '../models';
import { CustomerJsonV210 } from '../models';
import { CustomerJsonV310 } from '../models';
import { CustomerMessagesJson } from '../models';
import { CustomerMessagesJsonV400 } from '../models';
import { CustomerOverviewFlatJsonV500 } from '../models';
import { CustomerOverviewJsonV500 } from '../models';
import { CustomerWithAttributesJsonV310 } from '../models';
import { CustomersMinimalJsonV400 } from '../models';
import { CustomersWithAttributesJsonV300 } from '../models';
import { ErrorUserCustomerLinksNotFoundForUser } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { KycCheckJSON } from '../models';
import { KycChecksJSON } from '../models';
import { KycDocumentJSON } from '../models';
import { KycDocumentsJSON } from '../models';
import { KycMediaJSON } from '../models';
import { KycMediasJSON } from '../models';
import { KycStatusJSON } from '../models';
import { KycStatusesJSON } from '../models';
import { MeetingJsonV310 } from '../models';
import { MeetingsJsonV310 } from '../models';
import { PostAgentJsonV510 } from '../models';
import { PostCustomerAddressJsonV310 } from '../models';
import { PostCustomerJsonV500 } from '../models';
import { PostCustomerLegalNameJsonV510 } from '../models';
import { PostCustomerNumberJsonV310 } from '../models';
import { PostCustomerOverviewJsonV500 } from '../models';
import { PostCustomerPhoneNumberJsonV400 } from '../models';
import { PostKycCheckJSON } from '../models';
import { PostKycDocumentJSON } from '../models';
import { PostKycMediaJSON } from '../models';
import { PostKycStatusJSON } from '../models';
import { PostTaxResidenceJsonV310 } from '../models';
import { PutAgentJsonV510 } from '../models';
import { PutUpdateCustomerBranchJsonV310 } from '../models';
import { PutUpdateCustomerCreditLimitJsonV310 } from '../models';
import { PutUpdateCustomerCreditRatingAndSourceJsonV310 } from '../models';
import { PutUpdateCustomerDataJsonV310 } from '../models';
import { PutUpdateCustomerEmailJsonV310 } from '../models';
import { PutUpdateCustomerIdentityJsonV310 } from '../models';
import { PutUpdateCustomerMobilePhoneNumberJsonV310 } from '../models';
import { PutUpdateCustomerNumberJsonV310 } from '../models';
import { SocialMediaJSON } from '../models';
import { SocialMediasJSON } from '../models';
import { SuccessMessage } from '../models';
import { TaxResidenceJsonV310 } from '../models';
import { TaxResidenceV310 } from '../models';
import { UpdateCustomerAccountLinkJson } from '../models';
import { UserCustomerLinkJson } from '../models';
import { UserCustomerLinksJson } from '../models';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv140AddCustomerMessage: async (body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv140AddCustomerMessage.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv140AddCustomerMessage.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv140AddCustomerMessage.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customer/{CUSTOMER_ID}/messages`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#actual_date\"><strong>actual_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#channel\"><strong>channel</strong></a>:</p><p><a href=\"/glossary#crm_events\"><strong>crm_events</strong></a>:</p><p><a href=\"/glossary#customer_name\"><strong>customer_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#detail\"><strong>detail</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#result\"><strong>result</strong></a>:</p><p><a href=\"/glossary#scheduled_date\"><strong>scheduled_date</strong></a>: 2020-01-27</p>
         * @summary Get CRM Events
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv140GetCrmEvents: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv140GetCrmEvents.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/crm-events`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get messages for the logged in customer<br />Messages sent to the currently authenticated user.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p>
         * @summary Get Customer Messages for all Customers
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv140GetCustomersMessages: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv140GetCustomersMessages.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customer/messages`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_check_id\">KYC_CHECK_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
         * @summary Add KYC Check
         * @param {PostKycCheckJSON} body PostKycCheckJSON object that needs to be added.
         * @param {string} KYC_CHECK_ID The kyc check id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200AddKycCheck: async (body: PostKycCheckJSON, KYC_CHECK_ID: string, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv200AddKycCheck.');
            }
            // verify required parameter 'KYC_CHECK_ID' is not null or undefined
            if (KYC_CHECK_ID === null || KYC_CHECK_ID === undefined) {
                throw new RequiredError('KYC_CHECK_ID','Required parameter KYC_CHECK_ID was null or undefined when calling oBPv200AddKycCheck.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200AddKycCheck.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv200AddKycCheck.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_check/{KYC_CHECK_ID}`
                .replace(`{${"KYC_CHECK_ID"}}`, encodeURIComponent(String(KYC_CHECK_ID)))
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_document_id\">KYC_DOCUMENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Add KYC Document
         * @param {PostKycDocumentJSON} body PostKycDocumentJSON object that needs to be added.
         * @param {string} KYC_DOCUMENT_ID The kyc document id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200AddKycDocument: async (body: PostKycDocumentJSON, KYC_DOCUMENT_ID: string, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv200AddKycDocument.');
            }
            // verify required parameter 'KYC_DOCUMENT_ID' is not null or undefined
            if (KYC_DOCUMENT_ID === null || KYC_DOCUMENT_ID === undefined) {
                throw new RequiredError('KYC_DOCUMENT_ID','Required parameter KYC_DOCUMENT_ID was null or undefined when calling oBPv200AddKycDocument.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200AddKycDocument.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv200AddKycDocument.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_documents/{KYC_DOCUMENT_ID}`
                .replace(`{${"KYC_DOCUMENT_ID"}}`, encodeURIComponent(String(KYC_DOCUMENT_ID)))
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_media_id\">KYC_MEDIA_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
         * @summary Add KYC Media
         * @param {PostKycMediaJSON} body PostKycMediaJSON object that needs to be added.
         * @param {string} KYC_MEDIA_ID The kyc media id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200AddKycMedia: async (body: PostKycMediaJSON, KYC_MEDIA_ID: string, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv200AddKycMedia.');
            }
            // verify required parameter 'KYC_MEDIA_ID' is not null or undefined
            if (KYC_MEDIA_ID === null || KYC_MEDIA_ID === undefined) {
                throw new RequiredError('KYC_MEDIA_ID','Required parameter KYC_MEDIA_ID was null or undefined when calling oBPv200AddKycMedia.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200AddKycMedia.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv200AddKycMedia.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_media/{KYC_MEDIA_ID}`
                .replace(`{${"KYC_MEDIA_ID"}}`, encodeURIComponent(String(KYC_MEDIA_ID)))
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p>
         * @summary Add KYC Status
         * @param {PostKycStatusJSON} body PostKycStatusJSON object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200AddKycStatus: async (body: PostKycStatusJSON, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv200AddKycStatus.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200AddKycStatus.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv200AddKycStatus.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_statuses`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create a customer social media handle for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Social Media Handle
         * @param {SocialMediaJSON} body SocialMediaJSON object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200AddSocialMediaHandle: async (body: SocialMediaJSON, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv200AddSocialMediaHandle.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200AddSocialMediaHandle.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv200AddSocialMediaHandle.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/social_media_handles`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get KYC checks for the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
         * @summary Get Customer KYC Checks
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200GetKycChecks: async (CUSTOMER_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200GetKycChecks.');
            }
            const localVarPath = `/obp/v2.1.0/customers/{CUSTOMER_ID}/kyc_checks`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID<br />Get a list of documents that affirm the identity of the customer<br />Passport, driving licence etc.<br />User Authentication is Optional. The User need not be logged in.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#documents\"><strong>documents</strong></a>:</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer KYC Documents
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200GetKycDocuments: async (CUSTOMER_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200GetKycDocuments.');
            }
            const localVarPath = `/obp/v2.1.0/customers/{CUSTOMER_ID}/kyc_documents`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#medias\"><strong>medias</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
         * @summary Get KYC Media for a customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200GetKycMedia: async (CUSTOMER_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200GetKycMedia.');
            }
            const localVarPath = `/obp/v2.1.0/customers/{CUSTOMER_ID}/kyc_media`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get the KYC statuses for a customer specified by CUSTOMER_ID over time.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p><p><a href=\"/glossary#statuses\"><strong>statuses</strong></a>:</p>
         * @summary Get Customer KYC statuses
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200GetKycStatuses: async (CUSTOMER_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200GetKycStatuses.');
            }
            const localVarPath = `/obp/v2.1.0/customers/{CUSTOMER_ID}/kyc_statuses`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get social media handles for a customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer Social Media Handles
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv200GetSocialMediaHandles: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv200GetSocialMediaHandles.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv200GetSocialMediaHandles.');
            }
            const localVarPath = `/obp/v2.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/social_media_handles`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets all Customers that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#108;&#x74;&#111;&#58;&#x66;&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;el&#105;&#120;&#115;&#109;&#105;&#116;&#104;@&#101;x&#97;&#x6d;&#x70;l&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers for Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv300GetCustomersForUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v3.0.0/users/current/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create an Address for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Create Address
         * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310CreateCustomerAddress: async (body: PostCustomerAddressJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310CreateCustomerAddress.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310CreateCustomerAddress.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310CreateCustomerAddress.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/address`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create Meeting: Initiate a video conference/call with the bank.</p><p>The Meetings resource contains meta data about video/other conference sessions</p><p>provider_id determines the provider of the meeting / video chat service. MUST be url friendly (no spaces).</p><p>purpose_id explains the purpose of the chat. onboarding | mortgage | complaint etc. MUST be url friendly (no spaces).</p><p>Login is required.</p><p>This call is <strong>experimental</strong>. Currently staff_user_id is not set. Further calls will be needed to correctly set this.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Create Meeting (video conference/call)
         * @param {CreateMeetingJsonV310} body CreateMeetingJsonV310 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310CreateMeeting: async (body: CreateMeetingJsonV310, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310CreateMeeting.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310CreateMeeting.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/meetings`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create a Tax Residence for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
         * @summary Create Tax Residence
         * @param {PostTaxResidenceJsonV310} body PostTaxResidenceJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310CreateTaxResidence: async (body: PostTaxResidenceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310CreateTaxResidence.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310CreateTaxResidence.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310CreateTaxResidence.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/tax-residence`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Address
         * @param {string} CUSTOMER_ADDRESS_ID the customer address id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310DeleteCustomerAddress: async (CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ADDRESS_ID' is not null or undefined
            if (CUSTOMER_ADDRESS_ID === null || CUSTOMER_ADDRESS_ID === undefined) {
                throw new RequiredError('CUSTOMER_ADDRESS_ID','Required parameter CUSTOMER_ADDRESS_ID was null or undefined when calling oBPv310DeleteCustomerAddress.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310DeleteCustomerAddress.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310DeleteCustomerAddress.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/addresses/{CUSTOMER_ADDRESS_ID}`
                .replace(`{${"CUSTOMER_ADDRESS_ID"}}`, encodeURIComponent(String(CUSTOMER_ADDRESS_ID)))
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#tax_residence_id\">TAX_RESIDENCE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Tax Residence
         * @param {string} TAX_RESIDENCE_ID the tax residence id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310DeleteTaxResidence: async (TAX_RESIDENCE_ID: string, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'TAX_RESIDENCE_ID' is not null or undefined
            if (TAX_RESIDENCE_ID === null || TAX_RESIDENCE_ID === undefined) {
                throw new RequiredError('TAX_RESIDENCE_ID','Required parameter TAX_RESIDENCE_ID was null or undefined when calling oBPv310DeleteTaxResidence.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310DeleteTaxResidence.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310DeleteTaxResidence.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/tax_residencies/{TAX_RESIDENCE_ID}`
                .replace(`{${"TAX_RESIDENCE_ID"}}`, encodeURIComponent(String(TAX_RESIDENCE_ID)))
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get the Addresses of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#addresses\"><strong>addresses</strong></a>:</p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Get Customer Addresses
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310GetCustomerAddresses: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310GetCustomerAddresses.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310GetCustomerAddresses.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/addresses`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;o:&#102;&#x65;&#x6c;&#105;&#x78;&#x73;&#x6d;&#x69;&#x74;&#104;@e&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#x66;e&#x6c;&#105;&#120;&#115;&#109;&#105;t&#x68;@&#101;x&#97;&#x6d;&#x70;&#108;e&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer by CUSTOMER_ID
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310GetCustomerByCustomerId: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310GetCustomerByCustomerId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310GetCustomerByCustomerId.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets the Customer specified by CUSTOMER_NUMBER.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;i&#x6c;&#x74;&#111;:f&#101;l&#x69;&#x78;&#115;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;ix&#115;&#109;&#105;&#x74;h&#x40;&#101;&#120;a&#109;&#x70;&#x6c;&#101;.c&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer by CUSTOMER_NUMBER
         * @param {PostCustomerNumberJsonV310} body PostCustomerNumberJsonV310 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310GetCustomerByCustomerNumber: async (body: PostCustomerNumberJsonV310, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310GetCustomerByCustomerNumber.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310GetCustomerByCustomerNumber.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/customer-number`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customers that has a firehose View.</p><p>Allows bulk access to customers.<br />User must have the CanUseFirehoseAtAnyBank Role</p><p>Possible custom url parameters for pagination:</p><ul><li>limit=NUMBER ==&gt; default value: 50</li><li>offset=NUMBER ==&gt; default value: 0</li></ul><p>eg1:?limit=100&amp;offset=0</p><ul><li>sort_direction=ASC/DESC ==&gt; default value: DESC.</li></ul><p>eg2:?limit=100&amp;offset=0&amp;sort_direction=ASC</p><ul><li>from_date=DATE =&gt; example value: 1970-01-01T00:00:00.000Z. NOTE! The default value is one year ago (1970-01-01T00:00:00.000Z).</li><li>to_date=DATE =&gt; example value: 2025-03-24T11:36:36.922Z. NOTE! The default value is now (2025-03-24T11:36:36.922Z).</li></ul><p>Date format parameter: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'(1100-01-01T01:01:01.000Z) ==&gt; time zone is UTC.</p><p>eg3:?sort_direction=ASC&amp;limit=100&amp;offset=0&amp;from_date=1100-01-01T01:01:01.000Z&amp;to_date=1100-01-01T01:01:01.000Z</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;a&#x69;&#108;t&#x6f;&#x3a;&#102;e&#x6c;i&#x78;&#115;&#109;&#x69;&#x74;&#x68;&#x40;e&#x78;a&#109;&#112;l&#x65;&#x2e;&#99;&#x6f;m\">&#x66;&#101;&#x6c;&#x69;x&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;m&#112;&#108;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Firehose Customers
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310GetFirehoseCustomers: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310GetFirehoseCustomers.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/firehose/customers`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Meeting specified by BANK_ID / MEETING_ID<br />Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#meeting_id\">MEETING_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Get Meeting
         * @param {string} MEETING_ID the meeting id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310GetMeeting: async (MEETING_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'MEETING_ID' is not null or undefined
            if (MEETING_ID === null || MEETING_ID === undefined) {
                throw new RequiredError('MEETING_ID','Required parameter MEETING_ID was null or undefined when calling oBPv310GetMeeting.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310GetMeeting.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/meetings/{MEETING_ID}`
                .replace(`{${"MEETING_ID"}}`, encodeURIComponent(String(MEETING_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#meetings\"><strong>meetings</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Get Meetings
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310GetMeetings: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310GetMeetings.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/meetings`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get the Tax Residences of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence\"><strong>tax_residence</strong></a>:</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
         * @summary Get Tax Residences of Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310GetTaxResidence: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310GetTaxResidence.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310GetTaxResidence.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/tax-residences`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Update the Address of a Customer
         * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ADDRESS_ID the customer address id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerAddress: async (body: PostCustomerAddressJsonV310, CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerAddress.');
            }
            // verify required parameter 'CUSTOMER_ADDRESS_ID' is not null or undefined
            if (CUSTOMER_ADDRESS_ID === null || CUSTOMER_ADDRESS_ID === undefined) {
                throw new RequiredError('CUSTOMER_ADDRESS_ID','Required parameter CUSTOMER_ADDRESS_ID was null or undefined when calling oBPv310UpdateCustomerAddress.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerAddress.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerAddress.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/addresses/{CUSTOMER_ADDRESS_ID}`
                .replace(`{${"CUSTOMER_ADDRESS_ID"}}`, encodeURIComponent(String(CUSTOMER_ADDRESS_ID)))
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the Branch of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#111;&#58;&#x66;&#x65;&#x6c;&#105;x&#115;&#x6d;&#105;&#x74;h&#x40;&#101;&#x78;a&#x6d;&#x70;&#108;&#x65;&#46;&#99;o&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#101;.&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the Branch of a Customer
         * @param {PutUpdateCustomerBranchJsonV310} body PutUpdateCustomerBranchJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerBranch: async (body: PutUpdateCustomerBranchJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerBranch.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerBranch.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerBranch.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/branch`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the credit limit of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;f&#x65;&#108;&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;.&#x63;&#x6f;&#109;\">&#102;&#x65;&#108;&#105;&#120;&#x73;m&#x69;&#116;&#x68;&#64;&#x65;&#120;&#x61;&#109;pl&#101;&#46;&#99;o&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the credit limit of a Customer
         * @param {PutUpdateCustomerCreditLimitJsonV310} body PutUpdateCustomerCreditLimitJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerCreditLimit: async (body: PutUpdateCustomerCreditLimitJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerCreditLimit.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerCreditLimit.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerCreditLimit.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/credit-limit`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the credit rating and source of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;:&#102;&#101;&#108;&#x69;&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;xa&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;\">&#x66;&#x65;&#108;&#x69;&#x78;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;e&#x2e;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the credit rating and source of a Customer
         * @param {PutUpdateCustomerCreditRatingAndSourceJsonV310} body PutUpdateCustomerCreditRatingAndSourceJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerCreditRatingAndSource: async (body: PutUpdateCustomerCreditRatingAndSourceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerCreditRatingAndSource.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerCreditRatingAndSource.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerCreditRatingAndSource.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/credit-rating-and-source`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the other data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#116;&#111;:&#102;&#101;&#x6c;i&#120;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#101;&#108;&#x69;&#x78;&#115;&#x6d;&#x69;&#x74;h@&#x65;&#120;&#x61;&#109;&#x70;&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the other data of a Customer
         * @param {PutUpdateCustomerDataJsonV310} body PutUpdateCustomerDataJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerData: async (body: PutUpdateCustomerDataJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerData.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerData.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerData.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/data`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update an email of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;t&#x6f;&#x3a;f&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#105;&#116;&#104;&#x40;&#101;&#120;&#x61;m&#112;&#108;e&#46;&#99;o&#109;\">&#102;&#x65;&#x6c;&#x69;xsm&#105;&#116;&#104;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the email of a Customer
         * @param {PutUpdateCustomerEmailJsonV310} body PutUpdateCustomerEmailJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerEmail: async (body: PutUpdateCustomerEmailJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerEmail.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerEmail.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerEmail.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/email`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the identity data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x66;e&#108;&#105;x&#115;&#x6d;&#105;&#116;&#x68;@&#x65;&#x78;&#x61;&#109;p&#108;e&#46;c&#x6f;&#x6d;\">&#102;e&#108;&#x69;&#x78;&#115;&#x6d;&#105;&#116;&#104;@e&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the identity data of a Customer
         * @param {PutUpdateCustomerIdentityJsonV310} body PutUpdateCustomerIdentityJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerIdentity: async (body: PutUpdateCustomerIdentityJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerIdentity.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerIdentity.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerIdentity.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/identity`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the mobile number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;&#x6f;&#58;&#102;el&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#46;co&#109;\">&#x66;&#101;&#x6c;&#105;&#120;&#115;mi&#116;&#x68;@&#101;x&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the mobile number of a Customer
         * @param {PutUpdateCustomerMobilePhoneNumberJsonV310} body PutUpdateCustomerMobilePhoneNumberJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerMobileNumber: async (body: PutUpdateCustomerMobilePhoneNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerMobileNumber.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerMobileNumber.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerMobileNumber.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/mobile-number`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update the number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#116;&#x6f;:&#102;&#x65;&#x6c;i&#120;s&#109;&#x69;&#x74;h&#x40;&#x65;&#120;am&#x70;&#x6c;e&#46;&#99;&#111;m\">&#102;&#x65;&#108;&#x69;x&#115;&#109;i&#116;h&#64;&#101;&#x78;&#x61;&#x6d;pl&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the number of a Customer
         * @param {PutUpdateCustomerNumberJsonV310} body PutUpdateCustomerNumberJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv310UpdateCustomerNumber: async (body: PutUpdateCustomerNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv310UpdateCustomerNumber.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv310UpdateCustomerNumber.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv310UpdateCustomerNumber.');
            }
            const localVarPath = `/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/number`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create Customer Attribute</p><p>The type field must be one of &quot;STRING&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot; or DATE_WITH_DAY&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Customer Attribute
         * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateCustomerAttribute: async (body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateCustomerAttribute.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400CreateCustomerAttribute.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateCustomerAttribute.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/attribute`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateCustomerMessage: async (body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateCustomerMessage.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400CreateCustomerMessage.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateCustomerMessage.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/messages`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create or Update Customer Attribute Definition</p><p>The category field must be one of: Customer</p><p>The type field must be one of; DOUBLE, STRING, INTEGER and DATE_WITH_DAY</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Create or Update Customer Attribute Definition
         * @param {AttributeDefinitionJsonV400} body AttributeDefinitionJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition: async (body: AttributeDefinitionJsonV400, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/attribute-definitions/customer`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Link a User to a Customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Create User Customer Link
         * @param {CreateUserCustomerLinkJson} body CreateUserCustomerLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400CreateUserCustomerLinks: async (body: CreateUserCustomerLinkJson, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400CreateUserCustomerLinks.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400CreateUserCustomerLinks.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user_customer_links`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete Customer Attribute</p><p>CustomerAttributes are used to enhance the OBP Customer object with Bank specific entities.</p><p>Delete a Customer Attribute by its id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Attribute
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteCustomerAttribute: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400DeleteCustomerAttribute.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400DeleteCustomerAttribute.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/{CUSTOMER_ID}/attributes/CUSTOMER_ATTRIBUTE_ID`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete Customer Attribute Definition by ATTRIBUTE_DEFINITION_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#attribute_definition_id\">ATTRIBUTE_DEFINITION_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Attribute Definition
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteCustomerAttributeDefinition: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400DeleteCustomerAttributeDefinition.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/attribute-definitions/ATTRIBUTE_DEFINITION_ID/customer`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete a Customer Cascade specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Cascade
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteCustomerCascade: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400DeleteCustomerCascade.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400DeleteCustomerCascade.');
            }
            const localVarPath = `/obp/v4.0.0/management/cascading/banks/{BANK_ID}/customers/{CUSTOMER_ID}`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete User Customer Link by USER_CUSTOMER_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#user_customer_link_id\">USER_CUSTOMER_LINK_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete User Customer Link
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400DeleteUserCustomerLink: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400DeleteUserCustomerLink.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user_customer_links/USER_CUSTOMER_LINK_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Correlated User Info by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;lt&#x6f;&#x3a;&#x66;&#x65;&#x6c;ix&#115;m&#x69;&#116;&#x68;&#x40;&#101;&#120;&#x61;&#109;p&#x6c;&#101;.&#99;&#x6f;&#109;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#x6d;&#x69;t&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;e.&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Correlated User Info by Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCorrelatedUsersInfoByCustomerId: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400GetCorrelatedUsersInfoByCustomerId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCorrelatedUsersInfoByCustomerId.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/correlated-users`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customer Attribute By Id</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Adapter.card_attribute_id\">ATTRIBUTE_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Customer Attribute By Id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCustomerAttributeById: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400GetCustomerAttributeById.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCustomerAttributeById.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/attributes/ATTRIBUTE_ID`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customer Attribute Definition</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#attributes\"><strong>attributes</strong></a>: attribute value in form of (name, value)</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer Attribute Definition
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCustomerAttributeDefinition: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCustomerAttributeDefinition.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/attribute-definitions/customer`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customer Attributes</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Customer Attributes
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCustomerAttributes: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400GetCustomerAttributes.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCustomerAttributes.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/attributes`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get messages for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p>
         * @summary Get Customer Messages for a Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCustomerMessages: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400GetCustomerMessages.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCustomerMessages.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/messages`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customers at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;o&#x3a;f&#101;l&#105;&#x78;s&#x6d;&#105;&#x74;&#x68;&#64;&#101;&#x78;&#97;&#x6d;p&#108;&#101;&#46;c&#111;&#109;\">&#x66;e&#108;&#105;&#x78;&#x73;&#109;it&#104;@&#101;&#120;&#x61;&#109;&#x70;&#x6c;e&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers at Any Bank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCustomersAtAnyBank: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets the Customers specified by MOBILE_PHONE_NUMBER.</p><p>There are two wildcards often used in conjunction with the LIKE operator:<br />% - The percent sign represents zero, one, or multiple characters<br />_ - The underscore represents a single character<br />For example {&quot;customer_phone_number&quot;:&quot;%381%&quot;} lists all numbers which contain 381 sequence</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;fe&#108;&#105;x&#115;&#109;&#x69;&#x74;h&#64;&#101;&#120;&#97;mp&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;\">&#102;&#x65;&#108;&#105;&#x78;&#115;m&#x69;&#116;&#x68;@&#101;&#x78;&#97;&#109;&#112;l&#101;&#46;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers by MOBILE_PHONE_NUMBER
         * @param {PostCustomerPhoneNumberJsonV400} body PostCustomerPhoneNumberJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCustomersByCustomerPhoneNumber: async (body: PostCustomerPhoneNumberJsonV400, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400GetCustomersByCustomerPhoneNumber.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetCustomersByCustomerPhoneNumber.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/search/customers/mobile-phone-number`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customers Minimal at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
         * @summary Get Customers Minimal at Any Bank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetCustomersMinimalAtAnyBank: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/customers-minimal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Correlated Entities are users and customers linked to the currently authenticated user via User-Customer-Links</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>correlated_entities</strong></a>: correlated_entities</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;&#x69;&#x6c;&#x74;&#111;&#58;f&#101;&#108;&#x69;&#x78;s&#109;&#105;&#x74;h@e&#x78;&#97;&#x6d;&#x70;&#x6c;e&#46;&#99;&#x6f;&#x6d;\">&#x66;&#101;&#108;&#105;x&#115;m&#x69;&#x74;h@&#x65;&#x78;&#x61;m&#112;le.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Correlated Entities for the current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetMyCorrelatedEntities: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v4.0.0/my/correlated-entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get User Customer Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Get User Customer Links by Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetUserCustomerLinksByCustomerId: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400GetUserCustomerLinksByCustomerId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetUserCustomerLinksByCustomerId.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user_customer_links/customers/{CUSTOMER_ID}`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get User Customer Links by USER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#User.user_id\">USER_ID</a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Get User Customer Links by User
         * @param {string} USER_ID The user id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400GetUserCustomerLinksByUserId: async (USER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'USER_ID' is not null or undefined
            if (USER_ID === null || USER_ID === undefined) {
                throw new RequiredError('USER_ID','Required parameter USER_ID was null or undefined when calling oBPv400GetUserCustomerLinksByUserId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400GetUserCustomerLinksByUserId.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/user_customer_links/users/{USER_ID}`
                .replace(`{${"USER_ID"}}`, encodeURIComponent(String(USER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update Customer Attribute</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Update Customer Attribute
         * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv400UpdateCustomerAttribute: async (body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv400UpdateCustomerAttribute.');
            }
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv400UpdateCustomerAttribute.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv400UpdateCustomerAttribute.');
            }
            const localVarPath = `/obp/v4.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/attributes/CUSTOMER_ATTRIBUTE_ID`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Create Customer
         * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateCustomer: async (body: PostCustomerJsonV500, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv500CreateCustomer.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500CreateCustomer.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customers`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Link a Customer to a Account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Create Customer Account Link
         * @param {CreateCustomerAccountLinkJson} body CreateCustomerAccountLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateCustomerAccountLink: async (body: CreateCustomerAccountLinkJson, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv500CreateCustomerAccountLink.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500CreateCustomerAccountLink.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customer-account-links`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Delete Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Account Link
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500DeleteCustomerAccountLinkById: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500DeleteCustomerAccountLinkById.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customer-account-links/CUSTOMER_ACCOUNT_LINK_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Link by Id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetCustomerAccountLinkById: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetCustomerAccountLinkById.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customer-account-links/CUSTOMER_ACCOUNT_LINK_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customer Account Links by ACCOUNT_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Links by ACCOUNT_ID
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetCustomerAccountLinksByBankIdAccountId: async (ACCOUNT_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ACCOUNT_ID' is not null or undefined
            if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
                throw new RequiredError('ACCOUNT_ID','Required parameter ACCOUNT_ID was null or undefined when calling oBPv500GetCustomerAccountLinksByBankIdAccountId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetCustomerAccountLinksByBankIdAccountId.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/customer-account-links`
                .replace(`{${"ACCOUNT_ID"}}`, encodeURIComponent(String(ACCOUNT_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customer Account Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Links by CUSTOMER_ID
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetCustomerAccountLinksByCustomerId: async (CUSTOMER_ID: string, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CUSTOMER_ID' is not null or undefined
            if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
                throw new RequiredError('CUSTOMER_ID','Required parameter CUSTOMER_ID was null or undefined when calling oBPv500GetCustomerAccountLinksByCustomerId.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetCustomerAccountLinksByCustomerId.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/customer-account-links`
                .replace(`{${"CUSTOMER_ID"}}`, encodeURIComponent(String(CUSTOMER_ID)))
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets the Customer Overview specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;t&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;x&#x73;&#x6d;&#105;t&#x68;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;\">fe&#108;&#105;&#120;s&#109;&#x69;&#116;&#x68;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">contract_code</a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer Overview
         * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetCustomerOverview: async (body: PostCustomerOverviewJsonV500, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv500GetCustomerOverview.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetCustomerOverview.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customers/customer-number-query/overview`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets the Customer Overview Flat specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#102;&#x65;l&#105;&#x78;&#115;&#109;&#105;t&#x68;&#x40;&#x65;&#x78;&#x61;mpl&#x65;.&#99;&#111;&#x6d;\">&#x66;&#x65;&#x6c;ix&#115;&#x6d;i&#116;&#x68;&#x40;&#101;x&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">branch_code</a>: branch_code</p><p><a href=\"/glossary#\">cancellation_date</a>: cancellation_date</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#\">form_of_payment</a>: form_of_payment</p><p><a href=\"/glossary#\">instrument_status_code</a>: instrument_status_code</p><p><a href=\"/glossary#\">instrument_status_definition</a>: instrument_status_definition</p><p><a href=\"/glossary#\">interest_amount</a>: interest_amount</p><p><a href=\"/glossary#\">interest_rate</a>: interest_rate</p><p><a href=\"/glossary#\">is_substituted</a>: is_substituted</p><p><a href=\"/glossary#\">issuance_amount</a>: issuance_amount</p><p><a href=\"/glossary#\">maturity_date</a>: maturity_date</p><p><a href=\"/glossary#\">opening_date</a>: opening_date</p><p><a href=\"/glossary#\">payment_method</a>: payment_method</p><p><a href=\"/glossary#\">product_description</a>: product_description</p><p><a href=\"/glossary#\">renewal_date</a>: renewal_date</p><p><a href=\"/glossary#\">term</a>: term</p>
         * @summary Get Customer Overview Flat
         * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetCustomerOverviewFlat: async (body: PostCustomerOverviewJsonV500, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv500GetCustomerOverviewFlat.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetCustomerOverviewFlat.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customers/customer-number-query/overview-flat`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customers at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;l&#x74;&#x6f;&#58;&#102;e&#108;i&#120;&#x73;&#x6d;&#x69;&#116;h&#x40;&#101;&#120;&#97;mp&#108;&#101;&#46;&#x63;&#x6f;&#x6d;\">&#x66;e&#108;i&#120;&#x73;&#x6d;i&#116;&#x68;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;l&#x65;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetCustomersAtOneBank: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetCustomersAtOneBank.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customers`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get Customers Minimal at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
         * @summary Get Customers Minimal at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetCustomersMinimalAtOneBank: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetCustomersMinimalAtOneBank.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customers-minimal`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets all Customers that are linked to me.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;l&#116;o&#58;&#102;&#x65;&#x6c;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;@e&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;\">&#102;&#x65;&#108;&#x69;&#x78;&#x73;m&#105;&#116;&#104;&#64;&#x65;&#x78;a&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get My Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetMyCustomersAtAnyBank: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.0.0/my/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Returns a list of Customers at the Bank that are linked to the currently authenticated User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;ai&#108;&#116;o:&#x66;el&#105;&#x78;&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;xa&#x6d;p&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#x66;el&#105;&#120;&#115;&#x6d;&#105;t&#104;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get My Customers at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500GetMyCustomersAtBank: async (BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500GetMyCustomersAtBank.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/my/customers`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Update Customer Account Link by Id
         * @param {UpdateCustomerAccountLinkJson} body UpdateCustomerAccountLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500UpdateCustomerAccountLinkById: async (body: UpdateCustomerAccountLinkJson, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv500UpdateCustomerAccountLinkById.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv500UpdateCustomerAccountLinkById.');
            }
            const localVarPath = `/obp/v5.0.0/banks/{BANK_ID}/customer-account-links/CUSTOMER_ACCOUNT_LINK_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Create Agent
         * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CreateAgent: async (body: PostAgentJsonV510, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510CreateAgent.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510CreateAgent.');
            }
            const localVarPath = `/obp/v5.1.0/banks/{BANK_ID}/agents`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets the Customers specified by Legal Name.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;lto&#58;&#x66;&#x65;&#x6c;i&#x78;&#115;&#109;&#105;t&#104;&#64;&#x65;x&#x61;&#x6d;&#112;l&#101;&#x2e;&#99;o&#x6d;\">&#102;&#101;&#x6c;ix&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;&#120;&#x61;m&#x70;&#108;e&#46;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers by Legal Name
         * @param {PostCustomerLegalNameJsonV510} body PostCustomerLegalNameJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetCustomersByLegalName: async (body: PostCustomerLegalNameJsonV510, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510GetCustomersByLegalName.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510GetCustomersByLegalName.');
            }
            const localVarPath = `/obp/v5.1.0/banks/{BANK_ID}/customers/legal-name`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets all Customers Ids that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;@&#x65;&#x78;&#97;&#109;&#112;&#108;e&#46;&#99;&#x6f;&#x6d;\">f&#101;l&#105;&#120;s&#x6d;&#x69;&#116;&#x68;&#64;&#101;x&#97;m&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers for Current User (IDs only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510GetCustomersForUserIdsOnly: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.1.0/users/current/customers/customer_ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Update Agent status
         * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510UpdateAgentStatus: async (body: PutAgentJsonV510, BANK_ID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510UpdateAgentStatus.');
            }
            // verify required parameter 'BANK_ID' is not null or undefined
            if (BANK_ID === null || BANK_ID === undefined) {
                throw new RequiredError('BANK_ID','Required parameter BANK_ID was null or undefined when calling oBPv510UpdateAgentStatus.');
            }
            const localVarPath = `/obp/v5.1.0/banks/{BANK_ID}/agents/AGENT_ID`
                .replace(`{${"BANK_ID"}}`, encodeURIComponent(String(BANK_ID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140AddCustomerMessage(body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv140AddCustomerMessage(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#actual_date\"><strong>actual_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#channel\"><strong>channel</strong></a>:</p><p><a href=\"/glossary#crm_events\"><strong>crm_events</strong></a>:</p><p><a href=\"/glossary#customer_name\"><strong>customer_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#detail\"><strong>detail</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#result\"><strong>result</strong></a>:</p><p><a href=\"/glossary#scheduled_date\"><strong>scheduled_date</strong></a>: 2020-01-27</p>
         * @summary Get CRM Events
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140GetCrmEvents(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CrmEventsJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv140GetCrmEvents(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get messages for the logged in customer<br />Messages sent to the currently authenticated user.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p>
         * @summary Get Customer Messages for all Customers
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140GetCustomersMessages(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerMessagesJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv140GetCustomersMessages(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_check_id\">KYC_CHECK_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
         * @summary Add KYC Check
         * @param {PostKycCheckJSON} body PostKycCheckJSON object that needs to be added.
         * @param {string} KYC_CHECK_ID The kyc check id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycCheck(body: PostKycCheckJSON, KYC_CHECK_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycCheckJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200AddKycCheck(body, KYC_CHECK_ID, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_document_id\">KYC_DOCUMENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Add KYC Document
         * @param {PostKycDocumentJSON} body PostKycDocumentJSON object that needs to be added.
         * @param {string} KYC_DOCUMENT_ID The kyc document id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycDocument(body: PostKycDocumentJSON, KYC_DOCUMENT_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycDocumentJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200AddKycDocument(body, KYC_DOCUMENT_ID, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_media_id\">KYC_MEDIA_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
         * @summary Add KYC Media
         * @param {PostKycMediaJSON} body PostKycMediaJSON object that needs to be added.
         * @param {string} KYC_MEDIA_ID The kyc media id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycMedia(body: PostKycMediaJSON, KYC_MEDIA_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycMediaJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200AddKycMedia(body, KYC_MEDIA_ID, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p>
         * @summary Add KYC Status
         * @param {PostKycStatusJSON} body PostKycStatusJSON object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycStatus(body: PostKycStatusJSON, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycStatusJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200AddKycStatus(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create a customer social media handle for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Social Media Handle
         * @param {SocialMediaJSON} body SocialMediaJSON object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddSocialMediaHandle(body: SocialMediaJSON, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200AddSocialMediaHandle(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get KYC checks for the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
         * @summary Get Customer KYC Checks
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycChecks(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycChecksJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200GetKycChecks(CUSTOMER_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID<br />Get a list of documents that affirm the identity of the customer<br />Passport, driving licence etc.<br />User Authentication is Optional. The User need not be logged in.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#documents\"><strong>documents</strong></a>:</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer KYC Documents
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycDocuments(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycDocumentsJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200GetKycDocuments(CUSTOMER_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#medias\"><strong>medias</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
         * @summary Get KYC Media for a customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycMedia(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycMediasJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200GetKycMedia(CUSTOMER_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get the KYC statuses for a customer specified by CUSTOMER_ID over time.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p><p><a href=\"/glossary#statuses\"><strong>statuses</strong></a>:</p>
         * @summary Get Customer KYC statuses
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycStatuses(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KycStatusesJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200GetKycStatuses(CUSTOMER_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get social media handles for a customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer Social Media Handles
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetSocialMediaHandles(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SocialMediasJSON>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv200GetSocialMediaHandles(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets all Customers that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#108;&#x74;&#111;&#58;&#x66;&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;el&#105;&#120;&#115;&#109;&#105;&#116;&#104;@&#101;x&#97;&#x6d;&#x70;l&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers for Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300GetCustomersForUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomersWithAttributesJsonV300>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv300GetCustomersForUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create an Address for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Create Address
         * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateCustomerAddress(body: PostCustomerAddressJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAddressJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310CreateCustomerAddress(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create Meeting: Initiate a video conference/call with the bank.</p><p>The Meetings resource contains meta data about video/other conference sessions</p><p>provider_id determines the provider of the meeting / video chat service. MUST be url friendly (no spaces).</p><p>purpose_id explains the purpose of the chat. onboarding | mortgage | complaint etc. MUST be url friendly (no spaces).</p><p>Login is required.</p><p>This call is <strong>experimental</strong>. Currently staff_user_id is not set. Further calls will be needed to correctly set this.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Create Meeting (video conference/call)
         * @param {CreateMeetingJsonV310} body CreateMeetingJsonV310 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateMeeting(body: CreateMeetingJsonV310, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MeetingJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310CreateMeeting(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create a Tax Residence for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
         * @summary Create Tax Residence
         * @param {PostTaxResidenceJsonV310} body PostTaxResidenceJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateTaxResidence(body: PostTaxResidenceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaxResidenceV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310CreateTaxResidence(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Address
         * @param {string} CUSTOMER_ADDRESS_ID the customer address id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310DeleteCustomerAddress(CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310DeleteCustomerAddress(CUSTOMER_ADDRESS_ID, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#tax_residence_id\">TAX_RESIDENCE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Tax Residence
         * @param {string} TAX_RESIDENCE_ID the tax residence id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310DeleteTaxResidence(TAX_RESIDENCE_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310DeleteTaxResidence(TAX_RESIDENCE_ID, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get the Addresses of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#addresses\"><strong>addresses</strong></a>:</p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Get Customer Addresses
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetCustomerAddresses(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAddressesJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310GetCustomerAddresses(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;o:&#102;&#x65;&#x6c;&#105;&#x78;&#x73;&#x6d;&#x69;&#x74;&#104;@e&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#x66;e&#x6c;&#105;&#120;&#115;&#109;&#105;t&#x68;@&#101;x&#97;&#x6d;&#x70;&#108;e&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer by CUSTOMER_ID
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetCustomerByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerWithAttributesJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310GetCustomerByCustomerId(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets the Customer specified by CUSTOMER_NUMBER.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;i&#x6c;&#x74;&#111;:f&#101;l&#x69;&#x78;&#115;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;ix&#115;&#109;&#105;&#x74;h&#x40;&#101;&#120;a&#109;&#x70;&#x6c;&#101;.c&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer by CUSTOMER_NUMBER
         * @param {PostCustomerNumberJsonV310} body PostCustomerNumberJsonV310 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetCustomerByCustomerNumber(body: PostCustomerNumberJsonV310, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerWithAttributesJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310GetCustomerByCustomerNumber(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customers that has a firehose View.</p><p>Allows bulk access to customers.<br />User must have the CanUseFirehoseAtAnyBank Role</p><p>Possible custom url parameters for pagination:</p><ul><li>limit=NUMBER ==&gt; default value: 50</li><li>offset=NUMBER ==&gt; default value: 0</li></ul><p>eg1:?limit=100&amp;offset=0</p><ul><li>sort_direction=ASC/DESC ==&gt; default value: DESC.</li></ul><p>eg2:?limit=100&amp;offset=0&amp;sort_direction=ASC</p><ul><li>from_date=DATE =&gt; example value: 1970-01-01T00:00:00.000Z. NOTE! The default value is one year ago (1970-01-01T00:00:00.000Z).</li><li>to_date=DATE =&gt; example value: 2025-03-24T11:36:36.922Z. NOTE! The default value is now (2025-03-24T11:36:36.922Z).</li></ul><p>Date format parameter: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'(1100-01-01T01:01:01.000Z) ==&gt; time zone is UTC.</p><p>eg3:?sort_direction=ASC&amp;limit=100&amp;offset=0&amp;from_date=1100-01-01T01:01:01.000Z&amp;to_date=1100-01-01T01:01:01.000Z</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;a&#x69;&#108;t&#x6f;&#x3a;&#102;e&#x6c;i&#x78;&#115;&#109;&#x69;&#x74;&#x68;&#x40;e&#x78;a&#109;&#112;l&#x65;&#x2e;&#99;&#x6f;m\">&#x66;&#101;&#x6c;&#x69;x&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;m&#112;&#108;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Firehose Customers
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetFirehoseCustomers(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJSONs>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310GetFirehoseCustomers(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Meeting specified by BANK_ID / MEETING_ID<br />Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#meeting_id\">MEETING_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Get Meeting
         * @param {string} MEETING_ID the meeting id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetMeeting(MEETING_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MeetingJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310GetMeeting(MEETING_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#meetings\"><strong>meetings</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Get Meetings
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetMeetings(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MeetingsJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310GetMeetings(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get the Tax Residences of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence\"><strong>tax_residence</strong></a>:</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
         * @summary Get Tax Residences of Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetTaxResidence(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaxResidenceJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310GetTaxResidence(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Update the Address of a Customer
         * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ADDRESS_ID the customer address id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerAddress(body: PostCustomerAddressJsonV310, CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAddressJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerAddress(body, CUSTOMER_ADDRESS_ID, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the Branch of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#111;&#58;&#x66;&#x65;&#x6c;&#105;x&#115;&#x6d;&#105;&#x74;h&#x40;&#101;&#x78;a&#x6d;&#x70;&#108;&#x65;&#46;&#99;o&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#101;.&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the Branch of a Customer
         * @param {PutUpdateCustomerBranchJsonV310} body PutUpdateCustomerBranchJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerBranch(body: PutUpdateCustomerBranchJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerBranch(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the credit limit of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;f&#x65;&#108;&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;.&#x63;&#x6f;&#109;\">&#102;&#x65;&#108;&#105;&#120;&#x73;m&#x69;&#116;&#x68;&#64;&#x65;&#120;&#x61;&#109;pl&#101;&#46;&#99;o&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the credit limit of a Customer
         * @param {PutUpdateCustomerCreditLimitJsonV310} body PutUpdateCustomerCreditLimitJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerCreditLimit(body: PutUpdateCustomerCreditLimitJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerCreditLimit(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the credit rating and source of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;:&#102;&#101;&#108;&#x69;&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;xa&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;\">&#x66;&#x65;&#108;&#x69;&#x78;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;e&#x2e;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the credit rating and source of a Customer
         * @param {PutUpdateCustomerCreditRatingAndSourceJsonV310} body PutUpdateCustomerCreditRatingAndSourceJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerCreditRatingAndSource(body: PutUpdateCustomerCreditRatingAndSourceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerCreditRatingAndSource(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the other data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#116;&#111;:&#102;&#101;&#x6c;i&#120;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#101;&#108;&#x69;&#x78;&#115;&#x6d;&#x69;&#x74;h@&#x65;&#120;&#x61;&#109;&#x70;&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the other data of a Customer
         * @param {PutUpdateCustomerDataJsonV310} body PutUpdateCustomerDataJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerData(body: PutUpdateCustomerDataJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerData(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update an email of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;t&#x6f;&#x3a;f&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#105;&#116;&#104;&#x40;&#101;&#120;&#x61;m&#112;&#108;e&#46;&#99;o&#109;\">&#102;&#x65;&#x6c;&#x69;xsm&#105;&#116;&#104;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the email of a Customer
         * @param {PutUpdateCustomerEmailJsonV310} body PutUpdateCustomerEmailJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerEmail(body: PutUpdateCustomerEmailJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerEmail(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the identity data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x66;e&#108;&#105;x&#115;&#x6d;&#105;&#116;&#x68;@&#x65;&#x78;&#x61;&#109;p&#108;e&#46;c&#x6f;&#x6d;\">&#102;e&#108;&#x69;&#x78;&#115;&#x6d;&#105;&#116;&#104;@e&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the identity data of a Customer
         * @param {PutUpdateCustomerIdentityJsonV310} body PutUpdateCustomerIdentityJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerIdentity(body: PutUpdateCustomerIdentityJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerIdentity(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the mobile number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;&#x6f;&#58;&#102;el&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#46;co&#109;\">&#x66;&#101;&#x6c;&#105;&#120;&#115;mi&#116;&#x68;@&#101;x&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the mobile number of a Customer
         * @param {PutUpdateCustomerMobilePhoneNumberJsonV310} body PutUpdateCustomerMobilePhoneNumberJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerMobileNumber(body: PutUpdateCustomerMobilePhoneNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerMobileNumber(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update the number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#116;&#x6f;:&#102;&#x65;&#x6c;i&#120;s&#109;&#x69;&#x74;h&#x40;&#x65;&#120;am&#x70;&#x6c;e&#46;&#99;&#111;m\">&#102;&#x65;&#108;&#x69;x&#115;&#109;i&#116;h&#64;&#101;&#x78;&#x61;&#x6d;pl&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the number of a Customer
         * @param {PutUpdateCustomerNumberJsonV310} body PutUpdateCustomerNumberJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerNumber(body: PutUpdateCustomerNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv310UpdateCustomerNumber(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create Customer Attribute</p><p>The type field must be one of &quot;STRING&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot; or DATE_WITH_DAY&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Customer Attribute
         * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCustomerAttribute(body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAttributeResponseJsonV300>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400CreateCustomerAttribute(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCustomerMessage(body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessage>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400CreateCustomerMessage(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Create or Update Customer Attribute Definition</p><p>The category field must be one of: Customer</p><p>The type field must be one of; DOUBLE, STRING, INTEGER and DATE_WITH_DAY</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Create or Update Customer Attribute Definition
         * @param {AttributeDefinitionJsonV400} body AttributeDefinitionJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition(body: AttributeDefinitionJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AttributeDefinitionResponseJsonV400>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Link a User to a Customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Create User Customer Link
         * @param {CreateUserCustomerLinkJson} body CreateUserCustomerLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateUserCustomerLinks(body: CreateUserCustomerLinkJson, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserCustomerLinkJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400CreateUserCustomerLinks(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete Customer Attribute</p><p>CustomerAttributes are used to enhance the OBP Customer object with Bank specific entities.</p><p>Delete a Customer Attribute by its id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Attribute
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCustomerAttribute(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400DeleteCustomerAttribute(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete Customer Attribute Definition by ATTRIBUTE_DEFINITION_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#attribute_definition_id\">ATTRIBUTE_DEFINITION_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Attribute Definition
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCustomerAttributeDefinition(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400DeleteCustomerAttributeDefinition(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete a Customer Cascade specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Cascade
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCustomerCascade(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400DeleteCustomerCascade(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete User Customer Link by USER_CUSTOMER_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#user_customer_link_id\">USER_CUSTOMER_LINK_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete User Customer Link
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteUserCustomerLink(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400DeleteUserCustomerLink(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Correlated User Info by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;lt&#x6f;&#x3a;&#x66;&#x65;&#x6c;ix&#115;m&#x69;&#116;&#x68;&#x40;&#101;&#120;&#x61;&#109;p&#x6c;&#101;.&#99;&#x6f;&#109;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#x6d;&#x69;t&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;e.&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Correlated User Info by Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCorrelatedUsersInfoByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAndUsersWithAttributesResponseJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCorrelatedUsersInfoByCustomerId(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customer Attribute By Id</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Adapter.card_attribute_id\">ATTRIBUTE_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Customer Attribute By Id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerAttributeById(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAttributeResponseJsonV300>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCustomerAttributeById(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customer Attribute Definition</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#attributes\"><strong>attributes</strong></a>: attribute value in form of (name, value)</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer Attribute Definition
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerAttributeDefinition(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AttributeDefinitionsResponseJsonV400>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCustomerAttributeDefinition(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customer Attributes</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Customer Attributes
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerAttributes(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAttributesResponseJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCustomerAttributes(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get messages for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p>
         * @summary Get Customer Messages for a Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerMessages(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerMessagesJsonV400>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCustomerMessages(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customers at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;o&#x3a;f&#101;l&#105;&#x78;s&#x6d;&#105;&#x74;&#x68;&#64;&#101;&#x78;&#97;&#x6d;p&#108;&#101;&#46;c&#111;&#109;\">&#x66;e&#108;&#105;&#x78;&#x73;&#109;it&#104;@&#101;&#120;&#x61;&#109;&#x70;&#x6c;e&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers at Any Bank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomersAtAnyBank(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJSONsV300>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCustomersAtAnyBank(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets the Customers specified by MOBILE_PHONE_NUMBER.</p><p>There are two wildcards often used in conjunction with the LIKE operator:<br />% - The percent sign represents zero, one, or multiple characters<br />_ - The underscore represents a single character<br />For example {&quot;customer_phone_number&quot;:&quot;%381%&quot;} lists all numbers which contain 381 sequence</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;fe&#108;&#105;x&#115;&#109;&#x69;&#x74;h&#64;&#101;&#120;&#97;mp&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;\">&#102;&#x65;&#108;&#105;&#x78;&#115;m&#x69;&#116;&#x68;@&#101;&#x78;&#97;&#109;&#112;l&#101;&#46;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers by MOBILE_PHONE_NUMBER
         * @param {PostCustomerPhoneNumberJsonV400} body PostCustomerPhoneNumberJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomersByCustomerPhoneNumber(body: PostCustomerPhoneNumberJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCustomersByCustomerPhoneNumber(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customers Minimal at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
         * @summary Get Customers Minimal at Any Bank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomersMinimalAtAnyBank(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomersMinimalJsonV400>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetCustomersMinimalAtAnyBank(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Correlated Entities are users and customers linked to the currently authenticated user via User-Customer-Links</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>correlated_entities</strong></a>: correlated_entities</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;&#x69;&#x6c;&#x74;&#111;&#58;f&#101;&#108;&#x69;&#x78;s&#109;&#105;&#x74;h@e&#x78;&#97;&#x6d;&#x70;&#x6c;e&#46;&#99;&#x6f;&#x6d;\">&#x66;&#101;&#108;&#105;x&#115;m&#x69;&#x74;h@&#x65;&#x78;&#x61;m&#112;le.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Correlated Entities for the current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetMyCorrelatedEntities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CorrelatedEntities>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetMyCorrelatedEntities(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get User Customer Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Get User Customer Links by Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserCustomerLinksByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserCustomerLinksJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetUserCustomerLinksByCustomerId(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get User Customer Links by USER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#User.user_id\">USER_ID</a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Get User Customer Links by User
         * @param {string} USER_ID The user id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserCustomerLinksByUserId(USER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserCustomerLinksJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400GetUserCustomerLinksByUserId(USER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update Customer Attribute</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Update Customer Attribute
         * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateCustomerAttribute(body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAttributeResponseJsonV300>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv400UpdateCustomerAttribute(body, CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Create Customer
         * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateCustomer(body: PostCustomerJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500CreateCustomer(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Link a Customer to a Account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Create Customer Account Link
         * @param {CreateCustomerAccountLinkJson} body CreateCustomerAccountLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateCustomerAccountLink(body: CreateCustomerAccountLinkJson, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAccountLinkJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500CreateCustomerAccountLink(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Delete Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Account Link
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500DeleteCustomerAccountLinkById(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500DeleteCustomerAccountLinkById(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Link by Id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerAccountLinkById(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAccountLinkJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetCustomerAccountLinkById(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customer Account Links by ACCOUNT_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Links by ACCOUNT_ID
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerAccountLinksByBankIdAccountId(ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAccountLinksJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetCustomerAccountLinksByBankIdAccountId(ACCOUNT_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customer Account Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Links by CUSTOMER_ID
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerAccountLinksByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAccountLinksJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetCustomerAccountLinksByCustomerId(CUSTOMER_ID, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets the Customer Overview specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;t&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;x&#x73;&#x6d;&#105;t&#x68;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;\">fe&#108;&#105;&#120;s&#109;&#x69;&#116;&#x68;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">contract_code</a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer Overview
         * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerOverview(body: PostCustomerOverviewJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerOverviewJsonV500>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetCustomerOverview(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets the Customer Overview Flat specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#102;&#x65;l&#105;&#x78;&#115;&#109;&#105;t&#x68;&#x40;&#x65;&#x78;&#x61;mpl&#x65;.&#99;&#111;&#x6d;\">&#x66;&#x65;&#x6c;ix&#115;&#x6d;i&#116;&#x68;&#x40;&#101;x&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">branch_code</a>: branch_code</p><p><a href=\"/glossary#\">cancellation_date</a>: cancellation_date</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#\">form_of_payment</a>: form_of_payment</p><p><a href=\"/glossary#\">instrument_status_code</a>: instrument_status_code</p><p><a href=\"/glossary#\">instrument_status_definition</a>: instrument_status_definition</p><p><a href=\"/glossary#\">interest_amount</a>: interest_amount</p><p><a href=\"/glossary#\">interest_rate</a>: interest_rate</p><p><a href=\"/glossary#\">is_substituted</a>: is_substituted</p><p><a href=\"/glossary#\">issuance_amount</a>: issuance_amount</p><p><a href=\"/glossary#\">maturity_date</a>: maturity_date</p><p><a href=\"/glossary#\">opening_date</a>: opening_date</p><p><a href=\"/glossary#\">payment_method</a>: payment_method</p><p><a href=\"/glossary#\">product_description</a>: product_description</p><p><a href=\"/glossary#\">renewal_date</a>: renewal_date</p><p><a href=\"/glossary#\">term</a>: term</p>
         * @summary Get Customer Overview Flat
         * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerOverviewFlat(body: PostCustomerOverviewJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerOverviewFlatJsonV500>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetCustomerOverviewFlat(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customers at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;l&#x74;&#x6f;&#58;&#102;e&#108;i&#120;&#x73;&#x6d;&#x69;&#116;h&#x40;&#101;&#120;&#97;mp&#108;&#101;&#46;&#x63;&#x6f;&#x6d;\">&#x66;e&#108;i&#120;&#x73;&#x6d;i&#116;&#x68;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;l&#x65;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomersAtOneBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJSONsV300>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetCustomersAtOneBank(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Get Customers Minimal at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
         * @summary Get Customers Minimal at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomersMinimalAtOneBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomersMinimalJsonV400>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetCustomersMinimalAtOneBank(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets all Customers that are linked to me.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;l&#116;o&#58;&#102;&#x65;&#x6c;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;@e&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;\">&#102;&#x65;&#108;&#x69;&#x78;&#x73;m&#105;&#116;&#104;&#64;&#x65;&#x78;a&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get My Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetMyCustomersAtAnyBank(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV210>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetMyCustomersAtAnyBank(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Returns a list of Customers at the Bank that are linked to the currently authenticated User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;ai&#108;&#116;o:&#x66;el&#105;&#x78;&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;xa&#x6d;p&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#x66;el&#105;&#120;&#115;&#x6d;&#105;t&#104;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get My Customers at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetMyCustomersAtBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJSONs>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500GetMyCustomersAtBank(BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Update Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Update Customer Account Link by Id
         * @param {UpdateCustomerAccountLinkJson} body UpdateCustomerAccountLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500UpdateCustomerAccountLinkById(body: UpdateCustomerAccountLinkJson, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerAccountLinkJson>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv500UpdateCustomerAccountLinkById(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Create Agent
         * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateAgent(body: PostAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AgentJsonV510>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv510CreateAgent(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets the Customers specified by Legal Name.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;lto&#58;&#x66;&#x65;&#x6c;i&#x78;&#115;&#109;&#105;t&#104;&#64;&#x65;x&#x61;&#x6d;&#112;l&#101;&#x2e;&#99;o&#x6d;\">&#102;&#101;&#x6c;ix&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;&#120;&#x61;m&#x70;&#108;e&#46;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers by Legal Name
         * @param {PostCustomerLegalNameJsonV510} body PostCustomerLegalNameJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetCustomersByLegalName(body: PostCustomerLegalNameJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomerJsonV310>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv510GetCustomersByLegalName(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>Gets all Customers Ids that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;@&#x65;&#x78;&#97;&#109;&#112;&#108;e&#46;&#99;&#x6f;&#x6d;\">f&#101;l&#105;&#120;s&#x6d;&#x69;&#116;&#x68;&#64;&#101;x&#97;m&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers for Current User (IDs only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetCustomersForUserIdsOnly(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomersWithAttributesJsonV300>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv510GetCustomersForUserIdsOnly(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Update Agent status
         * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateAgentStatus(body: PutAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AgentJsonV510>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).oBPv510UpdateAgentStatus(body, BANK_ID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140AddCustomerMessage(body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CustomerApiFp(configuration).oBPv140AddCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#actual_date\"><strong>actual_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#channel\"><strong>channel</strong></a>:</p><p><a href=\"/glossary#crm_events\"><strong>crm_events</strong></a>:</p><p><a href=\"/glossary#customer_name\"><strong>customer_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#detail\"><strong>detail</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#result\"><strong>result</strong></a>:</p><p><a href=\"/glossary#scheduled_date\"><strong>scheduled_date</strong></a>: 2020-01-27</p>
         * @summary Get CRM Events
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140GetCrmEvents(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CrmEventsJson>> {
            return CustomerApiFp(configuration).oBPv140GetCrmEvents(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get messages for the logged in customer<br />Messages sent to the currently authenticated user.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p>
         * @summary Get Customer Messages for all Customers
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv140GetCustomersMessages(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerMessagesJson>> {
            return CustomerApiFp(configuration).oBPv140GetCustomersMessages(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_check_id\">KYC_CHECK_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
         * @summary Add KYC Check
         * @param {PostKycCheckJSON} body PostKycCheckJSON object that needs to be added.
         * @param {string} KYC_CHECK_ID The kyc check id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycCheck(body: PostKycCheckJSON, KYC_CHECK_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycCheckJSON>> {
            return CustomerApiFp(configuration).oBPv200AddKycCheck(body, KYC_CHECK_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_document_id\">KYC_DOCUMENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Add KYC Document
         * @param {PostKycDocumentJSON} body PostKycDocumentJSON object that needs to be added.
         * @param {string} KYC_DOCUMENT_ID The kyc document id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycDocument(body: PostKycDocumentJSON, KYC_DOCUMENT_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycDocumentJSON>> {
            return CustomerApiFp(configuration).oBPv200AddKycDocument(body, KYC_DOCUMENT_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_media_id\">KYC_MEDIA_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
         * @summary Add KYC Media
         * @param {PostKycMediaJSON} body PostKycMediaJSON object that needs to be added.
         * @param {string} KYC_MEDIA_ID The kyc media id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycMedia(body: PostKycMediaJSON, KYC_MEDIA_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycMediaJSON>> {
            return CustomerApiFp(configuration).oBPv200AddKycMedia(body, KYC_MEDIA_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p>
         * @summary Add KYC Status
         * @param {PostKycStatusJSON} body PostKycStatusJSON object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddKycStatus(body: PostKycStatusJSON, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycStatusJSON>> {
            return CustomerApiFp(configuration).oBPv200AddKycStatus(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create a customer social media handle for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Social Media Handle
         * @param {SocialMediaJSON} body SocialMediaJSON object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200AddSocialMediaHandle(body: SocialMediaJSON, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CustomerApiFp(configuration).oBPv200AddSocialMediaHandle(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get KYC checks for the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
         * @summary Get Customer KYC Checks
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycChecks(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycChecksJSON>> {
            return CustomerApiFp(configuration).oBPv200GetKycChecks(CUSTOMER_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID<br />Get a list of documents that affirm the identity of the customer<br />Passport, driving licence etc.<br />User Authentication is Optional. The User need not be logged in.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#documents\"><strong>documents</strong></a>:</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer KYC Documents
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycDocuments(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycDocumentsJSON>> {
            return CustomerApiFp(configuration).oBPv200GetKycDocuments(CUSTOMER_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#medias\"><strong>medias</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
         * @summary Get KYC Media for a customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycMedia(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycMediasJSON>> {
            return CustomerApiFp(configuration).oBPv200GetKycMedia(CUSTOMER_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get the KYC statuses for a customer specified by CUSTOMER_ID over time.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p><p><a href=\"/glossary#statuses\"><strong>statuses</strong></a>:</p>
         * @summary Get Customer KYC statuses
         * @param {string} CUSTOMER_ID The customer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetKycStatuses(CUSTOMER_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KycStatusesJSON>> {
            return CustomerApiFp(configuration).oBPv200GetKycStatuses(CUSTOMER_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get social media handles for a customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer Social Media Handles
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv200GetSocialMediaHandles(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SocialMediasJSON>> {
            return CustomerApiFp(configuration).oBPv200GetSocialMediaHandles(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets all Customers that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#108;&#x74;&#111;&#58;&#x66;&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;el&#105;&#120;&#115;&#109;&#105;&#116;&#104;@&#101;x&#97;&#x6d;&#x70;l&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers for Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv300GetCustomersForUser(options?: AxiosRequestConfig): Promise<AxiosResponse<CustomersWithAttributesJsonV300>> {
            return CustomerApiFp(configuration).oBPv300GetCustomersForUser(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create an Address for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Create Address
         * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateCustomerAddress(body: PostCustomerAddressJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAddressJsonV310>> {
            return CustomerApiFp(configuration).oBPv310CreateCustomerAddress(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create Meeting: Initiate a video conference/call with the bank.</p><p>The Meetings resource contains meta data about video/other conference sessions</p><p>provider_id determines the provider of the meeting / video chat service. MUST be url friendly (no spaces).</p><p>purpose_id explains the purpose of the chat. onboarding | mortgage | complaint etc. MUST be url friendly (no spaces).</p><p>Login is required.</p><p>This call is <strong>experimental</strong>. Currently staff_user_id is not set. Further calls will be needed to correctly set this.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Create Meeting (video conference/call)
         * @param {CreateMeetingJsonV310} body CreateMeetingJsonV310 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateMeeting(body: CreateMeetingJsonV310, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MeetingJsonV310>> {
            return CustomerApiFp(configuration).oBPv310CreateMeeting(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create a Tax Residence for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
         * @summary Create Tax Residence
         * @param {PostTaxResidenceJsonV310} body PostTaxResidenceJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310CreateTaxResidence(body: PostTaxResidenceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TaxResidenceV310>> {
            return CustomerApiFp(configuration).oBPv310CreateTaxResidence(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Address
         * @param {string} CUSTOMER_ADDRESS_ID the customer address id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310DeleteCustomerAddress(CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).oBPv310DeleteCustomerAddress(CUSTOMER_ADDRESS_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#tax_residence_id\">TAX_RESIDENCE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Tax Residence
         * @param {string} TAX_RESIDENCE_ID the tax residence id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310DeleteTaxResidence(TAX_RESIDENCE_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).oBPv310DeleteTaxResidence(TAX_RESIDENCE_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get the Addresses of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#addresses\"><strong>addresses</strong></a>:</p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Get Customer Addresses
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetCustomerAddresses(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAddressesJsonV310>> {
            return CustomerApiFp(configuration).oBPv310GetCustomerAddresses(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;o:&#102;&#x65;&#x6c;&#105;&#x78;&#x73;&#x6d;&#x69;&#x74;&#104;@e&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#x66;e&#x6c;&#105;&#120;&#115;&#109;&#105;t&#x68;@&#101;x&#97;&#x6d;&#x70;&#108;e&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer by CUSTOMER_ID
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetCustomerByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerWithAttributesJsonV310>> {
            return CustomerApiFp(configuration).oBPv310GetCustomerByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets the Customer specified by CUSTOMER_NUMBER.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;i&#x6c;&#x74;&#111;:f&#101;l&#x69;&#x78;&#115;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;ix&#115;&#109;&#105;&#x74;h&#x40;&#101;&#120;a&#109;&#x70;&#x6c;&#101;.c&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer by CUSTOMER_NUMBER
         * @param {PostCustomerNumberJsonV310} body PostCustomerNumberJsonV310 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetCustomerByCustomerNumber(body: PostCustomerNumberJsonV310, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerWithAttributesJsonV310>> {
            return CustomerApiFp(configuration).oBPv310GetCustomerByCustomerNumber(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customers that has a firehose View.</p><p>Allows bulk access to customers.<br />User must have the CanUseFirehoseAtAnyBank Role</p><p>Possible custom url parameters for pagination:</p><ul><li>limit=NUMBER ==&gt; default value: 50</li><li>offset=NUMBER ==&gt; default value: 0</li></ul><p>eg1:?limit=100&amp;offset=0</p><ul><li>sort_direction=ASC/DESC ==&gt; default value: DESC.</li></ul><p>eg2:?limit=100&amp;offset=0&amp;sort_direction=ASC</p><ul><li>from_date=DATE =&gt; example value: 1970-01-01T00:00:00.000Z. NOTE! The default value is one year ago (1970-01-01T00:00:00.000Z).</li><li>to_date=DATE =&gt; example value: 2025-03-24T11:36:36.922Z. NOTE! The default value is now (2025-03-24T11:36:36.922Z).</li></ul><p>Date format parameter: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'(1100-01-01T01:01:01.000Z) ==&gt; time zone is UTC.</p><p>eg3:?sort_direction=ASC&amp;limit=100&amp;offset=0&amp;from_date=1100-01-01T01:01:01.000Z&amp;to_date=1100-01-01T01:01:01.000Z</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;a&#x69;&#108;t&#x6f;&#x3a;&#102;e&#x6c;i&#x78;&#115;&#109;&#x69;&#x74;&#x68;&#x40;e&#x78;a&#109;&#112;l&#x65;&#x2e;&#99;&#x6f;m\">&#x66;&#101;&#x6c;&#x69;x&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;m&#112;&#108;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Firehose Customers
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetFirehoseCustomers(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJSONs>> {
            return CustomerApiFp(configuration).oBPv310GetFirehoseCustomers(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Meeting specified by BANK_ID / MEETING_ID<br />Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#meeting_id\">MEETING_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Get Meeting
         * @param {string} MEETING_ID the meeting id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetMeeting(MEETING_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MeetingJsonV310>> {
            return CustomerApiFp(configuration).oBPv310GetMeeting(MEETING_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#meetings\"><strong>meetings</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
         * @summary Get Meetings
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetMeetings(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MeetingsJsonV310>> {
            return CustomerApiFp(configuration).oBPv310GetMeetings(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get the Tax Residences of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence\"><strong>tax_residence</strong></a>:</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
         * @summary Get Tax Residences of Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310GetTaxResidence(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TaxResidenceJsonV310>> {
            return CustomerApiFp(configuration).oBPv310GetTaxResidence(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
         * @summary Update the Address of a Customer
         * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ADDRESS_ID the customer address id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerAddress(body: PostCustomerAddressJsonV310, CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAddressJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerAddress(body, CUSTOMER_ADDRESS_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the Branch of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#111;&#58;&#x66;&#x65;&#x6c;&#105;x&#115;&#x6d;&#105;&#x74;h&#x40;&#101;&#x78;a&#x6d;&#x70;&#108;&#x65;&#46;&#99;o&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#101;.&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the Branch of a Customer
         * @param {PutUpdateCustomerBranchJsonV310} body PutUpdateCustomerBranchJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerBranch(body: PutUpdateCustomerBranchJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerBranch(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the credit limit of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;f&#x65;&#108;&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;.&#x63;&#x6f;&#109;\">&#102;&#x65;&#108;&#105;&#120;&#x73;m&#x69;&#116;&#x68;&#64;&#x65;&#120;&#x61;&#109;pl&#101;&#46;&#99;o&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the credit limit of a Customer
         * @param {PutUpdateCustomerCreditLimitJsonV310} body PutUpdateCustomerCreditLimitJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerCreditLimit(body: PutUpdateCustomerCreditLimitJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerCreditLimit(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the credit rating and source of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;:&#102;&#101;&#108;&#x69;&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;xa&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;\">&#x66;&#x65;&#108;&#x69;&#x78;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;e&#x2e;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the credit rating and source of a Customer
         * @param {PutUpdateCustomerCreditRatingAndSourceJsonV310} body PutUpdateCustomerCreditRatingAndSourceJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerCreditRatingAndSource(body: PutUpdateCustomerCreditRatingAndSourceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerCreditRatingAndSource(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the other data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#116;&#111;:&#102;&#101;&#x6c;i&#120;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#101;&#108;&#x69;&#x78;&#115;&#x6d;&#x69;&#x74;h@&#x65;&#120;&#x61;&#109;&#x70;&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the other data of a Customer
         * @param {PutUpdateCustomerDataJsonV310} body PutUpdateCustomerDataJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerData(body: PutUpdateCustomerDataJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerData(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update an email of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;t&#x6f;&#x3a;f&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#105;&#116;&#104;&#x40;&#101;&#120;&#x61;m&#112;&#108;e&#46;&#99;o&#109;\">&#102;&#x65;&#x6c;&#x69;xsm&#105;&#116;&#104;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the email of a Customer
         * @param {PutUpdateCustomerEmailJsonV310} body PutUpdateCustomerEmailJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerEmail(body: PutUpdateCustomerEmailJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerEmail(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the identity data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x66;e&#108;&#105;x&#115;&#x6d;&#105;&#116;&#x68;@&#x65;&#x78;&#x61;&#109;p&#108;e&#46;c&#x6f;&#x6d;\">&#102;e&#108;&#x69;&#x78;&#115;&#x6d;&#105;&#116;&#104;@e&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the identity data of a Customer
         * @param {PutUpdateCustomerIdentityJsonV310} body PutUpdateCustomerIdentityJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerIdentity(body: PutUpdateCustomerIdentityJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerIdentity(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the mobile number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;&#x6f;&#58;&#102;el&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#46;co&#109;\">&#x66;&#101;&#x6c;&#105;&#120;&#115;mi&#116;&#x68;@&#101;x&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the mobile number of a Customer
         * @param {PutUpdateCustomerMobilePhoneNumberJsonV310} body PutUpdateCustomerMobilePhoneNumberJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerMobileNumber(body: PutUpdateCustomerMobilePhoneNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerMobileNumber(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update the number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#116;&#x6f;:&#102;&#x65;&#x6c;i&#120;s&#109;&#x69;&#x74;h&#x40;&#x65;&#120;am&#x70;&#x6c;e&#46;&#99;&#111;m\">&#102;&#x65;&#108;&#x69;x&#115;&#109;i&#116;h&#64;&#101;&#x78;&#x61;&#x6d;pl&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Update the number of a Customer
         * @param {PutUpdateCustomerNumberJsonV310} body PutUpdateCustomerNumberJsonV310 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv310UpdateCustomerNumber(body: PutUpdateCustomerNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv310UpdateCustomerNumber(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create Customer Attribute</p><p>The type field must be one of &quot;STRING&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot; or DATE_WITH_DAY&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Create Customer Attribute
         * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCustomerAttribute(body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAttributeResponseJsonV300>> {
            return CustomerApiFp(configuration).oBPv400CreateCustomerAttribute(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
         * @summary Create Customer Message
         * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateCustomerMessage(body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessage>> {
            return CustomerApiFp(configuration).oBPv400CreateCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Create or Update Customer Attribute Definition</p><p>The category field must be one of: Customer</p><p>The type field must be one of; DOUBLE, STRING, INTEGER and DATE_WITH_DAY</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Create or Update Customer Attribute Definition
         * @param {AttributeDefinitionJsonV400} body AttributeDefinitionJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition(body: AttributeDefinitionJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AttributeDefinitionResponseJsonV400>> {
            return CustomerApiFp(configuration).oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Link a User to a Customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Create User Customer Link
         * @param {CreateUserCustomerLinkJson} body CreateUserCustomerLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400CreateUserCustomerLinks(body: CreateUserCustomerLinkJson, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserCustomerLinkJson>> {
            return CustomerApiFp(configuration).oBPv400CreateUserCustomerLinks(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete Customer Attribute</p><p>CustomerAttributes are used to enhance the OBP Customer object with Bank specific entities.</p><p>Delete a Customer Attribute by its id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Attribute
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCustomerAttribute(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).oBPv400DeleteCustomerAttribute(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete Customer Attribute Definition by ATTRIBUTE_DEFINITION_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#attribute_definition_id\">ATTRIBUTE_DEFINITION_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Attribute Definition
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCustomerAttributeDefinition(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).oBPv400DeleteCustomerAttributeDefinition(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete a Customer Cascade specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Cascade
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteCustomerCascade(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).oBPv400DeleteCustomerCascade(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete User Customer Link by USER_CUSTOMER_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#user_customer_link_id\">USER_CUSTOMER_LINK_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete User Customer Link
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400DeleteUserCustomerLink(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).oBPv400DeleteUserCustomerLink(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Correlated User Info by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;lt&#x6f;&#x3a;&#x66;&#x65;&#x6c;ix&#115;m&#x69;&#116;&#x68;&#x40;&#101;&#120;&#x61;&#109;p&#x6c;&#101;.&#99;&#x6f;&#109;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#x6d;&#x69;t&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;e.&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Correlated User Info by Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCorrelatedUsersInfoByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAndUsersWithAttributesResponseJson>> {
            return CustomerApiFp(configuration).oBPv400GetCorrelatedUsersInfoByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customer Attribute By Id</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Adapter.card_attribute_id\">ATTRIBUTE_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Customer Attribute By Id
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerAttributeById(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAttributeResponseJsonV300>> {
            return CustomerApiFp(configuration).oBPv400GetCustomerAttributeById(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customer Attribute Definition</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#attributes\"><strong>attributes</strong></a>: attribute value in form of (name, value)</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
         * @summary Get Customer Attribute Definition
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerAttributeDefinition(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AttributeDefinitionsResponseJsonV400>> {
            return CustomerApiFp(configuration).oBPv400GetCustomerAttributeDefinition(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customer Attributes</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Get Customer Attributes
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerAttributes(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAttributesResponseJson>> {
            return CustomerApiFp(configuration).oBPv400GetCustomerAttributes(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get messages for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p>
         * @summary Get Customer Messages for a Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomerMessages(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerMessagesJsonV400>> {
            return CustomerApiFp(configuration).oBPv400GetCustomerMessages(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customers at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;o&#x3a;f&#101;l&#105;&#x78;s&#x6d;&#105;&#x74;&#x68;&#64;&#101;&#x78;&#97;&#x6d;p&#108;&#101;&#46;c&#111;&#109;\">&#x66;e&#108;&#105;&#x78;&#x73;&#109;it&#104;@&#101;&#120;&#x61;&#109;&#x70;&#x6c;e&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers at Any Bank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomersAtAnyBank(options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJSONsV300>> {
            return CustomerApiFp(configuration).oBPv400GetCustomersAtAnyBank(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets the Customers specified by MOBILE_PHONE_NUMBER.</p><p>There are two wildcards often used in conjunction with the LIKE operator:<br />% - The percent sign represents zero, one, or multiple characters<br />_ - The underscore represents a single character<br />For example {&quot;customer_phone_number&quot;:&quot;%381%&quot;} lists all numbers which contain 381 sequence</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;fe&#108;&#105;x&#115;&#109;&#x69;&#x74;h&#64;&#101;&#120;&#97;mp&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;\">&#102;&#x65;&#108;&#105;&#x78;&#115;m&#x69;&#116;&#x68;@&#101;&#x78;&#97;&#109;&#112;l&#101;&#46;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers by MOBILE_PHONE_NUMBER
         * @param {PostCustomerPhoneNumberJsonV400} body PostCustomerPhoneNumberJsonV400 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomersByCustomerPhoneNumber(body: PostCustomerPhoneNumberJsonV400, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv400GetCustomersByCustomerPhoneNumber(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customers Minimal at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
         * @summary Get Customers Minimal at Any Bank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetCustomersMinimalAtAnyBank(options?: AxiosRequestConfig): Promise<AxiosResponse<CustomersMinimalJsonV400>> {
            return CustomerApiFp(configuration).oBPv400GetCustomersMinimalAtAnyBank(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Correlated Entities are users and customers linked to the currently authenticated user via User-Customer-Links</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>correlated_entities</strong></a>: correlated_entities</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;&#x69;&#x6c;&#x74;&#111;&#58;f&#101;&#108;&#x69;&#x78;s&#109;&#105;&#x74;h@e&#x78;&#97;&#x6d;&#x70;&#x6c;e&#46;&#99;&#x6f;&#x6d;\">&#x66;&#101;&#108;&#105;x&#115;m&#x69;&#x74;h@&#x65;&#x78;&#x61;m&#112;le.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Correlated Entities for the current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetMyCorrelatedEntities(options?: AxiosRequestConfig): Promise<AxiosResponse<CorrelatedEntities>> {
            return CustomerApiFp(configuration).oBPv400GetMyCorrelatedEntities(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get User Customer Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Get User Customer Links by Customer
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserCustomerLinksByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserCustomerLinksJson>> {
            return CustomerApiFp(configuration).oBPv400GetUserCustomerLinksByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get User Customer Links by USER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#User.user_id\">USER_ID</a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
         * @summary Get User Customer Links by User
         * @param {string} USER_ID The user id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400GetUserCustomerLinksByUserId(USER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserCustomerLinksJson>> {
            return CustomerApiFp(configuration).oBPv400GetUserCustomerLinksByUserId(USER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update Customer Attribute</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
         * @summary Update Customer Attribute
         * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv400UpdateCustomerAttribute(body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAttributeResponseJsonV300>> {
            return CustomerApiFp(configuration).oBPv400UpdateCustomerAttribute(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Create Customer
         * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateCustomer(body: PostCustomerJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv500CreateCustomer(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Link a Customer to a Account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Create Customer Account Link
         * @param {CreateCustomerAccountLinkJson} body CreateCustomerAccountLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateCustomerAccountLink(body: CreateCustomerAccountLinkJson, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAccountLinkJson>> {
            return CustomerApiFp(configuration).oBPv500CreateCustomerAccountLink(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Delete Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
         * @summary Delete Customer Account Link
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500DeleteCustomerAccountLinkById(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).oBPv500DeleteCustomerAccountLinkById(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Link by Id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerAccountLinkById(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAccountLinkJson>> {
            return CustomerApiFp(configuration).oBPv500GetCustomerAccountLinkById(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customer Account Links by ACCOUNT_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Links by ACCOUNT_ID
         * @param {string} ACCOUNT_ID The account id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerAccountLinksByBankIdAccountId(ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAccountLinksJson>> {
            return CustomerApiFp(configuration).oBPv500GetCustomerAccountLinksByBankIdAccountId(ACCOUNT_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customer Account Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Get Customer Account Links by CUSTOMER_ID
         * @param {string} CUSTOMER_ID The customer id
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerAccountLinksByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAccountLinksJson>> {
            return CustomerApiFp(configuration).oBPv500GetCustomerAccountLinksByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets the Customer Overview specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;t&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;x&#x73;&#x6d;&#105;t&#x68;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;\">fe&#108;&#105;&#120;s&#109;&#x69;&#116;&#x68;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">contract_code</a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customer Overview
         * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerOverview(body: PostCustomerOverviewJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerOverviewJsonV500>> {
            return CustomerApiFp(configuration).oBPv500GetCustomerOverview(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets the Customer Overview Flat specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#102;&#x65;l&#105;&#x78;&#115;&#109;&#105;t&#x68;&#x40;&#x65;&#x78;&#x61;mpl&#x65;.&#99;&#111;&#x6d;\">&#x66;&#x65;&#x6c;ix&#115;&#x6d;i&#116;&#x68;&#x40;&#101;x&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">branch_code</a>: branch_code</p><p><a href=\"/glossary#\">cancellation_date</a>: cancellation_date</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#\">form_of_payment</a>: form_of_payment</p><p><a href=\"/glossary#\">instrument_status_code</a>: instrument_status_code</p><p><a href=\"/glossary#\">instrument_status_definition</a>: instrument_status_definition</p><p><a href=\"/glossary#\">interest_amount</a>: interest_amount</p><p><a href=\"/glossary#\">interest_rate</a>: interest_rate</p><p><a href=\"/glossary#\">is_substituted</a>: is_substituted</p><p><a href=\"/glossary#\">issuance_amount</a>: issuance_amount</p><p><a href=\"/glossary#\">maturity_date</a>: maturity_date</p><p><a href=\"/glossary#\">opening_date</a>: opening_date</p><p><a href=\"/glossary#\">payment_method</a>: payment_method</p><p><a href=\"/glossary#\">product_description</a>: product_description</p><p><a href=\"/glossary#\">renewal_date</a>: renewal_date</p><p><a href=\"/glossary#\">term</a>: term</p>
         * @summary Get Customer Overview Flat
         * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomerOverviewFlat(body: PostCustomerOverviewJsonV500, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerOverviewFlatJsonV500>> {
            return CustomerApiFp(configuration).oBPv500GetCustomerOverviewFlat(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customers at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;l&#x74;&#x6f;&#58;&#102;e&#108;i&#120;&#x73;&#x6d;&#x69;&#116;h&#x40;&#101;&#120;&#97;mp&#108;&#101;&#46;&#x63;&#x6f;&#x6d;\">&#x66;e&#108;i&#120;&#x73;&#x6d;i&#116;&#x68;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;l&#x65;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomersAtOneBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJSONsV300>> {
            return CustomerApiFp(configuration).oBPv500GetCustomersAtOneBank(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get Customers Minimal at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
         * @summary Get Customers Minimal at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetCustomersMinimalAtOneBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomersMinimalJsonV400>> {
            return CustomerApiFp(configuration).oBPv500GetCustomersMinimalAtOneBank(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets all Customers that are linked to me.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;l&#116;o&#58;&#102;&#x65;&#x6c;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;@e&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;\">&#102;&#x65;&#108;&#x69;&#x78;&#x73;m&#105;&#116;&#104;&#64;&#x65;&#x78;a&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get My Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetMyCustomersAtAnyBank(options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV210>> {
            return CustomerApiFp(configuration).oBPv500GetMyCustomersAtAnyBank(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Returns a list of Customers at the Bank that are linked to the currently authenticated User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;ai&#108;&#116;o:&#x66;el&#105;&#x78;&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;xa&#x6d;p&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#x66;el&#105;&#120;&#115;&#x6d;&#105;t&#104;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get My Customers at Bank
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500GetMyCustomersAtBank(BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJSONs>> {
            return CustomerApiFp(configuration).oBPv500GetMyCustomersAtBank(BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Update Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
         * @summary Update Customer Account Link by Id
         * @param {UpdateCustomerAccountLinkJson} body UpdateCustomerAccountLinkJson object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500UpdateCustomerAccountLinkById(body: UpdateCustomerAccountLinkJson, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerAccountLinkJson>> {
            return CustomerApiFp(configuration).oBPv500UpdateCustomerAccountLinkById(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Create Agent
         * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateAgent(body: PostAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AgentJsonV510>> {
            return CustomerApiFp(configuration).oBPv510CreateAgent(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets the Customers specified by Legal Name.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;lto&#58;&#x66;&#x65;&#x6c;i&#x78;&#115;&#109;&#105;t&#104;&#64;&#x65;x&#x61;&#x6d;&#112;l&#101;&#x2e;&#99;o&#x6d;\">&#102;&#101;&#x6c;ix&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;&#120;&#x61;m&#x70;&#108;e&#46;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers by Legal Name
         * @param {PostCustomerLegalNameJsonV510} body PostCustomerLegalNameJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetCustomersByLegalName(body: PostCustomerLegalNameJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomerJsonV310>> {
            return CustomerApiFp(configuration).oBPv510GetCustomersByLegalName(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets all Customers Ids that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;@&#x65;&#x78;&#97;&#109;&#112;&#108;e&#46;&#99;&#x6f;&#x6d;\">f&#101;l&#105;&#120;s&#x6d;&#x69;&#116;&#x68;&#64;&#101;x&#97;m&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
         * @summary Get Customers for Current User (IDs only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510GetCustomersForUserIdsOnly(options?: AxiosRequestConfig): Promise<AxiosResponse<CustomersWithAttributesJsonV300>> {
            return CustomerApiFp(configuration).oBPv510GetCustomersForUserIdsOnly(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
         * @summary Update Agent status
         * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
         * @param {string} BANK_ID The bank id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510UpdateAgentStatus(body: PutAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AgentJsonV510>> {
            return CustomerApiFp(configuration).oBPv510UpdateAgentStatus(body, BANK_ID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * <p>Create a message for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Create Customer Message
     * @param {AddCustomerMessageJson} body AddCustomerMessageJson object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv140AddCustomerMessage(body: AddCustomerMessageJson, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CustomerApiFp(this.configuration).oBPv140AddCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#actual_date\"><strong>actual_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#channel\"><strong>channel</strong></a>:</p><p><a href=\"/glossary#crm_events\"><strong>crm_events</strong></a>:</p><p><a href=\"/glossary#customer_name\"><strong>customer_name</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#detail\"><strong>detail</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#result\"><strong>result</strong></a>:</p><p><a href=\"/glossary#scheduled_date\"><strong>scheduled_date</strong></a>: 2020-01-27</p>
     * @summary Get CRM Events
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv140GetCrmEvents(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CrmEventsJson>> {
        return CustomerApiFp(this.configuration).oBPv140GetCrmEvents(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get messages for the logged in customer<br />Messages sent to the currently authenticated user.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p>
     * @summary Get Customer Messages for all Customers
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv140GetCustomersMessages(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerMessagesJson>> {
        return CustomerApiFp(this.configuration).oBPv140GetCustomersMessages(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_check_id\">KYC_CHECK_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
     * @summary Add KYC Check
     * @param {PostKycCheckJSON} body PostKycCheckJSON object that needs to be added.
     * @param {string} KYC_CHECK_ID The kyc check id
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200AddKycCheck(body: PostKycCheckJSON, KYC_CHECK_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycCheckJSON>> {
        return CustomerApiFp(this.configuration).oBPv200AddKycCheck(body, KYC_CHECK_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_document_id\">KYC_DOCUMENT_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
     * @summary Add KYC Document
     * @param {PostKycDocumentJSON} body PostKycDocumentJSON object that needs to be added.
     * @param {string} KYC_DOCUMENT_ID The kyc document id
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200AddKycDocument(body: PostKycDocumentJSON, KYC_DOCUMENT_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycDocumentJSON>> {
        return CustomerApiFp(this.configuration).oBPv200AddKycDocument(body, KYC_DOCUMENT_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#kyc_media_id\">KYC_MEDIA_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
     * @summary Add KYC Media
     * @param {PostKycMediaJSON} body PostKycMediaJSON object that needs to be added.
     * @param {string} KYC_MEDIA_ID The kyc media id
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200AddKycMedia(body: PostKycMediaJSON, KYC_MEDIA_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycMediaJSON>> {
        return CustomerApiFp(this.configuration).oBPv200AddKycMedia(body, KYC_MEDIA_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p>
     * @summary Add KYC Status
     * @param {PostKycStatusJSON} body PostKycStatusJSON object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200AddKycStatus(body: PostKycStatusJSON, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycStatusJSON>> {
        return CustomerApiFp(this.configuration).oBPv200AddKycStatus(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create a customer social media handle for the customer specified by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Create Customer Social Media Handle
     * @param {SocialMediaJSON} body SocialMediaJSON object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200AddSocialMediaHandle(body: SocialMediaJSON, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CustomerApiFp(this.configuration).oBPv200AddSocialMediaHandle(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get KYC checks for the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#comments\"><strong>comments</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#how\"><strong>how</strong></a>:</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#satisfied\"><strong>satisfied</strong></a>: false</p><p><a href=\"/glossary#staff_name\"><strong>staff_name</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p>
     * @summary Get Customer KYC Checks
     * @param {string} CUSTOMER_ID The customer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200GetKycChecks(CUSTOMER_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycChecksJSON>> {
        return CustomerApiFp(this.configuration).oBPv200GetKycChecks(CUSTOMER_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID<br />Get a list of documents that affirm the identity of the customer<br />Passport, driving licence etc.<br />User Authentication is Optional. The User need not be logged in.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#documents\"><strong>documents</strong></a>:</p><p><a href=\"/glossary#\"><strong>expiry_date</strong></a>: 2021-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#\"><strong>issue_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#issue_place\"><strong>issue_place</strong></a>:</p><p><a href=\"/glossary#number\"><strong>number</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
     * @summary Get Customer KYC Documents
     * @param {string} CUSTOMER_ID The customer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200GetKycDocuments(CUSTOMER_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycDocumentsJSON>> {
        return CustomerApiFp(this.configuration).oBPv200GetKycDocuments(CUSTOMER_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#medias\"><strong>medias</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_check_id\"><strong>relates_to_kyc_check_id</strong></a>:</p><p><a href=\"/glossary#relates_to_kyc_document_id\"><strong>relates_to_kyc_document_id</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p>
     * @summary Get KYC Media for a customer
     * @param {string} CUSTOMER_ID The customer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200GetKycMedia(CUSTOMER_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycMediasJSON>> {
        return CustomerApiFp(this.configuration).oBPv200GetKycMedia(CUSTOMER_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get the KYC statuses for a customer specified by CUSTOMER_ID over time.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#ok\"><strong>ok</strong></a>: false</p><p><a href=\"/glossary#statuses\"><strong>statuses</strong></a>:</p>
     * @summary Get Customer KYC statuses
     * @param {string} CUSTOMER_ID The customer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200GetKycStatuses(CUSTOMER_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KycStatusesJSON>> {
        return CustomerApiFp(this.configuration).oBPv200GetKycStatuses(CUSTOMER_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get social media handles for a customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#checks\"><strong>checks</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#date_activated\"><strong>date_activated</strong></a>:</p><p><a href=\"/glossary#date_added\"><strong>date_added</strong></a>:</p><p><a href=\"/glossary#handle\"><strong>handle</strong></a>:</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
     * @summary Get Customer Social Media Handles
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv200GetSocialMediaHandles(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SocialMediasJSON>> {
        return CustomerApiFp(this.configuration).oBPv200GetSocialMediaHandles(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets all Customers that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#108;&#x74;&#111;&#58;&#x66;&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;\">&#x66;el&#105;&#120;&#115;&#109;&#105;&#116;&#104;@&#101;x&#97;&#x6d;&#x70;l&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customers for Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv300GetCustomersForUser(options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomersWithAttributesJsonV300>> {
        return CustomerApiFp(this.configuration).oBPv300GetCustomersForUser(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create an Address for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
     * @summary Create Address
     * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310CreateCustomerAddress(body: PostCustomerAddressJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAddressJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310CreateCustomerAddress(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create Meeting: Initiate a video conference/call with the bank.</p><p>The Meetings resource contains meta data about video/other conference sessions</p><p>provider_id determines the provider of the meeting / video chat service. MUST be url friendly (no spaces).</p><p>purpose_id explains the purpose of the chat. onboarding | mortgage | complaint etc. MUST be url friendly (no spaces).</p><p>Login is required.</p><p>This call is <strong>experimental</strong>. Currently staff_user_id is not set. Further calls will be needed to correctly set this.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
     * @summary Create Meeting (video conference/call)
     * @param {CreateMeetingJsonV310} body CreateMeetingJsonV310 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310CreateMeeting(body: CreateMeetingJsonV310, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MeetingJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310CreateMeeting(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create a Tax Residence for a Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
     * @summary Create Tax Residence
     * @param {PostTaxResidenceJsonV310} body PostTaxResidenceJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310CreateTaxResidence(body: PostTaxResidenceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaxResidenceV310>> {
        return CustomerApiFp(this.configuration).oBPv310CreateTaxResidence(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Customer Address
     * @param {string} CUSTOMER_ADDRESS_ID the customer address id
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310DeleteCustomerAddress(CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).oBPv310DeleteCustomerAddress(CUSTOMER_ADDRESS_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#tax_residence_id\">TAX_RESIDENCE_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Tax Residence
     * @param {string} TAX_RESIDENCE_ID the tax residence id
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310DeleteTaxResidence(TAX_RESIDENCE_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).oBPv310DeleteTaxResidence(TAX_RESIDENCE_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get the Addresses of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#addresses\"><strong>addresses</strong></a>:</p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
     * @summary Get Customer Addresses
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310GetCustomerAddresses(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAddressesJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310GetCustomerAddresses(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;o:&#102;&#x65;&#x6c;&#105;&#x78;&#x73;&#x6d;&#x69;&#x74;&#104;@e&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;\">&#x66;e&#x6c;&#105;&#120;&#115;&#109;&#105;t&#x68;@&#101;x&#97;&#x6d;&#x70;&#108;e&#x2e;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customer by CUSTOMER_ID
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310GetCustomerByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerWithAttributesJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310GetCustomerByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets the Customer specified by CUSTOMER_NUMBER.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;i&#x6c;&#x74;&#111;:f&#101;l&#x69;&#x78;&#115;&#x6d;&#x69;&#116;&#x68;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#102;e&#108;ix&#115;&#109;&#105;&#x74;h&#x40;&#101;&#120;a&#109;&#x70;&#x6c;&#101;.c&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customer by CUSTOMER_NUMBER
     * @param {PostCustomerNumberJsonV310} body PostCustomerNumberJsonV310 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310GetCustomerByCustomerNumber(body: PostCustomerNumberJsonV310, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerWithAttributesJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310GetCustomerByCustomerNumber(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customers that has a firehose View.</p><p>Allows bulk access to customers.<br />User must have the CanUseFirehoseAtAnyBank Role</p><p>Possible custom url parameters for pagination:</p><ul><li>limit=NUMBER ==&gt; default value: 50</li><li>offset=NUMBER ==&gt; default value: 0</li></ul><p>eg1:?limit=100&amp;offset=0</p><ul><li>sort_direction=ASC/DESC ==&gt; default value: DESC.</li></ul><p>eg2:?limit=100&amp;offset=0&amp;sort_direction=ASC</p><ul><li>from_date=DATE =&gt; example value: 1970-01-01T00:00:00.000Z. NOTE! The default value is one year ago (1970-01-01T00:00:00.000Z).</li><li>to_date=DATE =&gt; example value: 2025-03-24T11:36:36.922Z. NOTE! The default value is now (2025-03-24T11:36:36.922Z).</li></ul><p>Date format parameter: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'(1100-01-01T01:01:01.000Z) ==&gt; time zone is UTC.</p><p>eg3:?sort_direction=ASC&amp;limit=100&amp;offset=0&amp;from_date=1100-01-01T01:01:01.000Z&amp;to_date=1100-01-01T01:01:01.000Z</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;a&#x69;&#108;t&#x6f;&#x3a;&#102;e&#x6c;i&#x78;&#115;&#109;&#x69;&#x74;&#x68;&#x40;e&#x78;a&#109;&#112;l&#x65;&#x2e;&#99;&#x6f;m\">&#x66;&#101;&#x6c;&#x69;x&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;m&#112;&#108;e.&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Firehose Customers
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310GetFirehoseCustomers(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJSONs>> {
        return CustomerApiFp(this.configuration).oBPv310GetFirehoseCustomers(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Meeting specified by BANK_ID / MEETING_ID<br />Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#meeting_id\">MEETING_ID</a>:</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
     * @summary Get Meeting
     * @param {string} MEETING_ID the meeting id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310GetMeeting(MEETING_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MeetingJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310GetMeeting(MEETING_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#contact_details\"><strong>contact_details</strong></a>:</p><p><a href=\"/glossary#creator\"><strong>creator</strong></a>:</p><p><a href=\"/glossary#customer_token\"><strong>customer_token</strong></a>:</p><p><a href=\"/glossary#customer_user_id\"><strong>customer_user_id</strong></a>:</p><p><a href=\"/glossary#email_address\"><strong>email_address</strong></a>:</p><p><a href=\"/glossary#invitees\"><strong>invitees</strong></a>:</p><p><a href=\"/glossary#keys\"><strong>keys</strong></a>:</p><p><a href=\"/glossary#meeting_id\"><strong>meeting_id</strong></a>:</p><p><a href=\"/glossary#meetings\"><strong>meetings</strong></a>:</p><p><a href=\"/glossary#mobile_phone\"><strong>mobile_phone</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#present\"><strong>present</strong></a>:</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#purpose_id\"><strong>purpose_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>session_id</strong></a>: b4e0352a-9a0f-4bfa-b30b-9003aa467f50</p><p><a href=\"/glossary#staff_token\"><strong>staff_token</strong></a>:</p><p><a href=\"/glossary#staff_user_id\"><strong>staff_user_id</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#when\"><strong>when</strong></a>: 2020-01-27</p>
     * @summary Get Meetings
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310GetMeetings(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MeetingsJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310GetMeetings(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get the Tax Residences of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#domain\"><strong>domain</strong></a>:</p><p><a href=\"/glossary#tax_number\"><strong>tax_number</strong></a>: 456</p><p><a href=\"/glossary#tax_residence\"><strong>tax_residence</strong></a>:</p><p><a href=\"/glossary#tax_residence_id\"><strong>tax_residence_id</strong></a>:</p>
     * @summary Get Tax Residences of Customer
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310GetTaxResidence(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaxResidenceJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310GetTaxResidence(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#customer_address_id\">CUSTOMER_ADDRESS_ID</a>:</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#city\"><strong>city</strong></a>:</p><p><a href=\"/glossary#country_code\"><strong>country_code</strong></a>: 1254</p><p><a href=\"/glossary#county\"><strong>county</strong></a>:</p><p><a href=\"/glossary#customer_address_id\"><strong>customer_address_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>line_1</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_2</strong></a>:</p><p><a href=\"/glossary#\"><strong>line_3</strong></a>:</p><p><a href=\"/glossary#postcode\"><strong>postcode</strong></a>:</p><p><a href=\"/glossary#state\"><strong>state</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#tags\"><strong>tags</strong></a>: Create-My-User</p>
     * @summary Update the Address of a Customer
     * @param {PostCustomerAddressJsonV310} body PostCustomerAddressJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ADDRESS_ID the customer address id
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerAddress(body: PostCustomerAddressJsonV310, CUSTOMER_ADDRESS_ID: string, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAddressJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerAddress(body, CUSTOMER_ADDRESS_ID, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the Branch of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#111;&#58;&#x66;&#x65;&#x6c;&#105;x&#115;&#x6d;&#105;&#x74;h&#x40;&#101;&#x78;a&#x6d;&#x70;&#108;&#x65;&#46;&#99;o&#x6d;\">&#x66;&#x65;l&#x69;&#x78;&#x73;&#x6d;&#105;&#116;h&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#101;.&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the Branch of a Customer
     * @param {PutUpdateCustomerBranchJsonV310} body PutUpdateCustomerBranchJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerBranch(body: PutUpdateCustomerBranchJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerBranch(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the credit limit of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;f&#x65;&#108;&#x69;x&#x73;m&#105;&#x74;h&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;.&#x63;&#x6f;&#109;\">&#102;&#x65;&#108;&#105;&#120;&#x73;m&#x69;&#116;&#x68;&#64;&#x65;&#120;&#x61;&#109;pl&#101;&#46;&#99;o&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the credit limit of a Customer
     * @param {PutUpdateCustomerCreditLimitJsonV310} body PutUpdateCustomerCreditLimitJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerCreditLimit(body: PutUpdateCustomerCreditLimitJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerCreditLimit(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the credit rating and source of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;:&#102;&#101;&#108;&#x69;&#x78;&#x73;&#109;&#105;&#x74;&#x68;&#x40;&#x65;xa&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;\">&#x66;&#x65;&#108;&#x69;&#x78;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;e&#x2e;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the credit rating and source of a Customer
     * @param {PutUpdateCustomerCreditRatingAndSourceJsonV310} body PutUpdateCustomerCreditRatingAndSourceJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerCreditRatingAndSource(body: PutUpdateCustomerCreditRatingAndSourceJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerCreditRatingAndSource(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the other data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#116;&#111;:&#102;&#101;&#x6c;i&#120;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;m\">&#x66;&#101;&#108;&#x69;&#x78;&#115;&#x6d;&#x69;&#x74;h@&#x65;&#120;&#x61;&#109;&#x70;&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the other data of a Customer
     * @param {PutUpdateCustomerDataJsonV310} body PutUpdateCustomerDataJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerData(body: PutUpdateCustomerDataJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerData(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update an email of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;t&#x6f;&#x3a;f&#101;&#x6c;&#x69;&#120;&#x73;&#x6d;&#105;&#116;&#104;&#x40;&#101;&#120;&#x61;m&#112;&#108;e&#46;&#99;o&#109;\">&#102;&#x65;&#x6c;&#x69;xsm&#105;&#116;&#104;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the email of a Customer
     * @param {PutUpdateCustomerEmailJsonV310} body PutUpdateCustomerEmailJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerEmail(body: PutUpdateCustomerEmailJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerEmail(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the identity data of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x66;e&#108;&#105;x&#115;&#x6d;&#105;&#116;&#x68;@&#x65;&#x78;&#x61;&#109;p&#108;e&#46;c&#x6f;&#x6d;\">&#102;e&#108;&#x69;&#x78;&#115;&#x6d;&#105;&#116;&#104;@e&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the identity data of a Customer
     * @param {PutUpdateCustomerIdentityJsonV310} body PutUpdateCustomerIdentityJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerIdentity(body: PutUpdateCustomerIdentityJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerIdentity(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the mobile number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;l&#x74;&#x6f;&#58;&#102;el&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;&#x40;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#46;co&#109;\">&#x66;&#101;&#x6c;&#105;&#120;&#115;mi&#116;&#x68;@&#101;x&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the mobile number of a Customer
     * @param {PutUpdateCustomerMobilePhoneNumberJsonV310} body PutUpdateCustomerMobilePhoneNumberJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerMobileNumber(body: PutUpdateCustomerMobilePhoneNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerMobileNumber(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update the number of the Customer specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;l&#116;&#x6f;:&#102;&#x65;&#x6c;i&#120;s&#109;&#x69;&#x74;h&#x40;&#x65;&#120;am&#x70;&#x6c;e&#46;&#99;&#111;m\">&#102;&#x65;&#108;&#x69;x&#115;&#109;i&#116;h&#64;&#101;&#x78;&#x61;&#x6d;pl&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Update the number of a Customer
     * @param {PutUpdateCustomerNumberJsonV310} body PutUpdateCustomerNumberJsonV310 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv310UpdateCustomerNumber(body: PutUpdateCustomerNumberJsonV310, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv310UpdateCustomerNumber(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create Customer Attribute</p><p>The type field must be one of &quot;STRING&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot; or DATE_WITH_DAY&quot;</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Create Customer Attribute
     * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400CreateCustomerAttribute(body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAttributeResponseJsonV300>> {
        return CustomerApiFp(this.configuration).oBPv400CreateCustomerAttribute(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create a message for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#success\"><strong>success</strong></a>:</p>
     * @summary Create Customer Message
     * @param {CreateMessageJsonV400} body CreateMessageJsonV400 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400CreateCustomerMessage(body: CreateMessageJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessage>> {
        return CustomerApiFp(this.configuration).oBPv400CreateCustomerMessage(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Create or Update Customer Attribute Definition</p><p>The category field must be one of: Customer</p><p>The type field must be one of; DOUBLE, STRING, INTEGER and DATE_WITH_DAY</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
     * @summary Create or Update Customer Attribute Definition
     * @param {AttributeDefinitionJsonV400} body AttributeDefinitionJsonV400 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition(body: AttributeDefinitionJsonV400, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AttributeDefinitionResponseJsonV400>> {
        return CustomerApiFp(this.configuration).oBPv400CreateOrUpdateCustomerAttributeAttributeDefinition(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Link a User to a Customer</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
     * @summary Create User Customer Link
     * @param {CreateUserCustomerLinkJson} body CreateUserCustomerLinkJson object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400CreateUserCustomerLinks(body: CreateUserCustomerLinkJson, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserCustomerLinkJson>> {
        return CustomerApiFp(this.configuration).oBPv400CreateUserCustomerLinks(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete Customer Attribute</p><p>CustomerAttributes are used to enhance the OBP Customer object with Bank specific entities.</p><p>Delete a Customer Attribute by its id.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Customer Attribute
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400DeleteCustomerAttribute(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).oBPv400DeleteCustomerAttribute(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete Customer Attribute Definition by ATTRIBUTE_DEFINITION_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#attribute_definition_id\">ATTRIBUTE_DEFINITION_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Customer Attribute Definition
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400DeleteCustomerAttributeDefinition(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).oBPv400DeleteCustomerAttributeDefinition(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete a Customer Cascade specified by CUSTOMER_ID.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Customer Cascade
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400DeleteCustomerCascade(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).oBPv400DeleteCustomerCascade(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete User Customer Link by USER_CUSTOMER_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#user_customer_link_id\">USER_CUSTOMER_LINK_ID</a>:</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete User Customer Link
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400DeleteUserCustomerLink(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).oBPv400DeleteUserCustomerLink(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Correlated User Info by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#105;lt&#x6f;&#x3a;&#x66;&#x65;&#x6c;ix&#115;m&#x69;&#116;&#x68;&#x40;&#101;&#120;&#x61;&#109;p&#x6c;&#101;.&#99;&#x6f;&#109;\">&#x66;&#x65;&#x6c;&#x69;&#120;&#115;&#x6d;&#x69;t&#x68;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;e.&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Correlated User Info by Customer
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCorrelatedUsersInfoByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAndUsersWithAttributesResponseJson>> {
        return CustomerApiFp(this.configuration).oBPv400GetCorrelatedUsersInfoByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customer Attribute By Id</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Adapter.card_attribute_id\">ATTRIBUTE_ID</a>:</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Get Customer Attribute By Id
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCustomerAttributeById(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAttributeResponseJsonV300>> {
        return CustomerApiFp(this.configuration).oBPv400GetCustomerAttributeById(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customer Attribute Definition</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#alias\"><strong>alias</strong></a>:</p><p><a href=\"/glossary#attribute_definition_id\"><strong>attribute_definition_id</strong></a>:</p><p><a href=\"/glossary#attributes\"><strong>attributes</strong></a>: attribute value in form of (name, value)</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#can_be_seen_on_views\"><strong>can_be_seen_on_views</strong></a>: false</p><p><a href=\"/glossary#category\"><strong>category</strong></a>:</p><p><a href=\"/glossary#description\"><strong>description</strong></a>: Description of the object. Maximum length is 2000. It can be any characters here.</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p>
     * @summary Get Customer Attribute Definition
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCustomerAttributeDefinition(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AttributeDefinitionsResponseJsonV400>> {
        return CustomerApiFp(this.configuration).oBPv400GetCustomerAttributeDefinition(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customer Attributes</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Get Customer Attributes
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCustomerAttributes(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAttributesResponseJson>> {
        return CustomerApiFp(this.configuration).oBPv400GetCustomerAttributes(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get messages for the customer specified by CUSTOMER_ID<br />User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#from_department\"><strong>from_department</strong></a>: Open Bank</p><p><a href=\"/glossary#from_person\"><strong>from_person</strong></a>: Tom</p><p><a href=\"/glossary#id\"><strong>id</strong></a>: d8839721-ad8f-45dd-9f78-2080414b93f9</p><p><a href=\"/glossary#message\"><strong>message</strong></a>: 123456</p><p><a href=\"/glossary#messages\"><strong>messages</strong></a>:</p><p><a href=\"/glossary#transport\"><strong>transport</strong></a>: SMS</p>
     * @summary Get Customer Messages for a Customer
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCustomerMessages(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerMessagesJsonV400>> {
        return CustomerApiFp(this.configuration).oBPv400GetCustomerMessages(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customers at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#97;&#105;&#108;&#x74;o&#x3a;f&#101;l&#105;&#x78;s&#x6d;&#105;&#x74;&#x68;&#64;&#101;&#x78;&#97;&#x6d;p&#108;&#101;&#46;c&#111;&#109;\">&#x66;e&#108;&#105;&#x78;&#x73;&#109;it&#104;@&#101;&#120;&#x61;&#109;&#x70;&#x6c;e&#x2e;&#x63;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customers at Any Bank
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCustomersAtAnyBank(options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJSONsV300>> {
        return CustomerApiFp(this.configuration).oBPv400GetCustomersAtAnyBank(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets the Customers specified by MOBILE_PHONE_NUMBER.</p><p>There are two wildcards often used in conjunction with the LIKE operator:<br />% - The percent sign represents zero, one, or multiple characters<br />_ - The underscore represents a single character<br />For example {&quot;customer_phone_number&quot;:&quot;%381%&quot;} lists all numbers which contain 381 sequence</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;fe&#108;&#105;x&#115;&#109;&#x69;&#x74;h&#64;&#101;&#120;&#97;mp&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;\">&#102;&#x65;&#108;&#105;&#x78;&#115;m&#x69;&#116;&#x68;@&#101;&#x78;&#97;&#109;&#112;l&#101;&#46;c&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customers by MOBILE_PHONE_NUMBER
     * @param {PostCustomerPhoneNumberJsonV400} body PostCustomerPhoneNumberJsonV400 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCustomersByCustomerPhoneNumber(body: PostCustomerPhoneNumberJsonV400, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv400GetCustomersByCustomerPhoneNumber(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customers Minimal at Any Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
     * @summary Get Customers Minimal at Any Bank
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetCustomersMinimalAtAnyBank(options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomersMinimalJsonV400>> {
        return CustomerApiFp(this.configuration).oBPv400GetCustomersMinimalAtAnyBank(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Correlated Entities are users and customers linked to the currently authenticated user via User-Customer-Links</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>correlated_entities</strong></a>: correlated_entities</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#Customer\"><strong>customer</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#x61;&#x69;&#x6c;&#x74;&#111;&#58;f&#101;&#108;&#x69;&#x78;s&#109;&#105;&#x74;h@e&#x78;&#97;&#x6d;&#x70;&#x6c;e&#46;&#99;&#x6f;&#x6d;\">&#x66;&#101;&#108;&#105;x&#115;m&#x69;&#x74;h@&#x65;&#x78;&#x61;m&#112;le.&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>insert_date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#provider\"><strong>provider</strong></a>: ETHEREUM</p><p><a href=\"/glossary#provider_id\"><strong>provider_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>user_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>user_attributes</strong></a>: user_attributes</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><a href=\"/glossary#\"><strong>username</strong></a>: felixsmith</p><p><a href=\"/glossary#users\"><strong>users</strong></a>: user list</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Correlated Entities for the current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetMyCorrelatedEntities(options?: AxiosRequestConfig) : Promise<AxiosResponse<CorrelatedEntities>> {
        return CustomerApiFp(this.configuration).oBPv400GetMyCorrelatedEntities(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get User Customer Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
     * @summary Get User Customer Links by Customer
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetUserCustomerLinksByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserCustomerLinksJson>> {
        return CustomerApiFp(this.configuration).oBPv400GetUserCustomerLinksByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get User Customer Links by USER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#User.user_id\">USER_ID</a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#date_inserted\"><strong>date_inserted</strong></a>:</p><p><a href=\"/glossary#is_active\"><strong>is_active</strong></a>: false</p><p><a href=\"/glossary#user_customer_link_id\"><strong>user_customer_link_id</strong></a>:</p><p><a href=\"/glossary#user_customer_links\"><strong>user_customer_links</strong></a>:</p><p><a href=\"/glossary#\"><strong>user_id</strong></a>: 9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1</p>
     * @summary Get User Customer Links by User
     * @param {string} USER_ID The user id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400GetUserCustomerLinksByUserId(USER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserCustomerLinksJson>> {
        return CustomerApiFp(this.configuration).oBPv400GetUserCustomerLinksByUserId(USER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update Customer Attribute</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ATTRIBUTE_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p>
     * @summary Update Customer Attribute
     * @param {CustomerAttributeJsonV400} body CustomerAttributeJsonV400 object that needs to be added.
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv400UpdateCustomerAttribute(body: CustomerAttributeJsonV400, CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAttributeResponseJsonV300>> {
        return CustomerApiFp(this.configuration).oBPv400UpdateCustomerAttribute(body, CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>The Customer resource stores the customer number (which is set by the backend), legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />Dates need to be in the format 2013-01-21T23:08:00Z</p><p>Note: If you need to set a specific customer number, use the Update Customer Number endpoint after this call.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\">branch_id</a>: DERBY6</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p><p><a href=\"/glossary#\">customer_number</a>: 5987953</p><p><a href=\"/glossary#\">date_of_birth</a>: 2018-03-09</p><p><a href=\"/glossary#\">dependants</a>: 1</p><p><a href=\"/glossary#dob_of_dependants\">dob_of_dependants</a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#109;&#97;&#x69;&#108;t&#x6f;&#58;fe&#x6c;&#105;&#120;&#x73;&#x6d;&#x69;t&#104;&#64;&#x65;&#120;a&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;m\">&#x66;&#x65;&#108;&#x69;&#x78;sm&#x69;t&#104;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;e&#x2e;&#x63;&#111;&#x6d;</a></p><p><a href=\"/glossary#\">employment_status</a>: worker</p><p><a href=\"/glossary#face_image\">face_image</a>:</p><p><a href=\"/glossary#\">highest_education_attained</a>: Master</p><p><a href=\"/glossary#\">kyc_status</a>: false</p><p><a href=\"/glossary#last_ok_date\">last_ok_date</a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\">name_suffix</a>: Sr</p><p><a href=\"/glossary#\">relationship_status</a>: single</p><p><a href=\"/glossary#\">title</a>: Dr.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;o:&#102;&#101;&#x6c;&#105;&#x78;&#x73;&#x6d;&#105;&#116;&#x68;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">f&#101;&#108;&#105;&#120;&#x73;&#109;i&#116;&#104;&#x40;&#101;&#x78;a&#109;&#112;&#108;e&#x2e;&#99;&#111;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Create Customer
     * @param {PostCustomerJsonV500} body PostCustomerJsonV500 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500CreateCustomer(body: PostCustomerJsonV500, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv500CreateCustomer(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Link a Customer to a Account</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
     * @summary Create Customer Account Link
     * @param {CreateCustomerAccountLinkJson} body CreateCustomerAccountLinkJson object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500CreateCustomerAccountLink(body: CreateCustomerAccountLinkJson, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAccountLinkJson>> {
        return CustomerApiFp(this.configuration).oBPv500CreateCustomerAccountLink(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Delete Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p>
     * @summary Delete Customer Account Link
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500DeleteCustomerAccountLinkById(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).oBPv500DeleteCustomerAccountLinkById(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
     * @summary Get Customer Account Link by Id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetCustomerAccountLinkById(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAccountLinkJson>> {
        return CustomerApiFp(this.configuration).oBPv500GetCustomerAccountLinkById(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customer Account Links by ACCOUNT_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Account.account_id\">ACCOUNT_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
     * @summary Get Customer Account Links by ACCOUNT_ID
     * @param {string} ACCOUNT_ID The account id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetCustomerAccountLinksByBankIdAccountId(ACCOUNT_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAccountLinksJson>> {
        return CustomerApiFp(this.configuration).oBPv500GetCustomerAccountLinksByBankIdAccountId(ACCOUNT_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customer Account Links by CUSTOMER_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#Customer.customer_id\">CUSTOMER_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>links</strong></a>: links</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
     * @summary Get Customer Account Links by CUSTOMER_ID
     * @param {string} CUSTOMER_ID The customer id
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetCustomerAccountLinksByCustomerId(CUSTOMER_ID: string, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAccountLinksJson>> {
        return CustomerApiFp(this.configuration).oBPv500GetCustomerAccountLinksByCustomerId(CUSTOMER_ID, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets the Customer Overview specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#x6c;t&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;x&#x73;&#x6d;&#105;t&#x68;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;\">fe&#108;&#105;&#120;s&#109;&#x69;&#116;&#x68;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">contract_code</a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customer Overview
     * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetCustomerOverview(body: PostCustomerOverviewJsonV500, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerOverviewJsonV500>> {
        return CustomerApiFp(this.configuration).oBPv500GetCustomerOverview(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets the Customer Overview Flat specified by customer_number and bank_code.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#account_attribute_id\"><strong>account_attribute_id</strong></a>:</p><p><a href=\"/glossary#account_attributes\"><strong>account_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#account_routings\"><strong>account_routings</strong></a>:</p><p><a href=\"/glossary#accounts\"><strong>accounts</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#balance\"><strong>balance</strong></a>: 10</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#102;&#x65;l&#105;&#x78;&#115;&#109;&#105;t&#x68;&#x40;&#x65;&#x78;&#x61;mpl&#x65;.&#99;&#111;&#x6d;\">&#x66;&#x65;&#x6c;ix&#115;&#x6d;i&#116;&#x68;&#x40;&#101;x&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;c&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>label</strong></a>: My Account</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#product_code\"><strong>product_code</strong></a>: 1234BW</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#\">branch_code</a>: branch_code</p><p><a href=\"/glossary#\">cancellation_date</a>: cancellation_date</p><p><a href=\"/glossary#\"><strong>contract_code</strong></a>: contract_code</p><p><a href=\"/glossary#\">contracts</a>: contracts</p><p><a href=\"/glossary#\">form_of_payment</a>: form_of_payment</p><p><a href=\"/glossary#\">instrument_status_code</a>: instrument_status_code</p><p><a href=\"/glossary#\">instrument_status_definition</a>: instrument_status_definition</p><p><a href=\"/glossary#\">interest_amount</a>: interest_amount</p><p><a href=\"/glossary#\">interest_rate</a>: interest_rate</p><p><a href=\"/glossary#\">is_substituted</a>: is_substituted</p><p><a href=\"/glossary#\">issuance_amount</a>: issuance_amount</p><p><a href=\"/glossary#\">maturity_date</a>: maturity_date</p><p><a href=\"/glossary#\">opening_date</a>: opening_date</p><p><a href=\"/glossary#\">payment_method</a>: payment_method</p><p><a href=\"/glossary#\">product_description</a>: product_description</p><p><a href=\"/glossary#\">renewal_date</a>: renewal_date</p><p><a href=\"/glossary#\">term</a>: term</p>
     * @summary Get Customer Overview Flat
     * @param {PostCustomerOverviewJsonV500} body PostCustomerOverviewJsonV500 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetCustomerOverviewFlat(body: PostCustomerOverviewJsonV500, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerOverviewFlatJsonV500>> {
        return CustomerApiFp(this.configuration).oBPv500GetCustomerOverviewFlat(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customers at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;l&#x74;&#x6f;&#58;&#102;e&#108;i&#120;&#x73;&#x6d;&#x69;&#116;h&#x40;&#101;&#120;&#97;mp&#108;&#101;&#46;&#x63;&#x6f;&#x6d;\">&#x66;e&#108;i&#120;&#x73;&#x6d;i&#116;&#x68;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;l&#x65;&#46;&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customers at Bank
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetCustomersAtOneBank(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJSONsV300>> {
        return CustomerApiFp(this.configuration).oBPv500GetCustomersAtOneBank(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get Customers Minimal at Bank.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p>
     * @summary Get Customers Minimal at Bank
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetCustomersMinimalAtOneBank(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomersMinimalJsonV400>> {
        return CustomerApiFp(this.configuration).oBPv500GetCustomersMinimalAtOneBank(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets all Customers that are linked to me.</p><p>Authentication via OAuth is required.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#x61;&#105;l&#116;o&#58;&#102;&#x65;&#x6c;&#x69;&#120;&#x73;&#109;&#105;&#116;&#x68;@e&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;\">&#102;&#x65;&#108;&#x69;&#x78;&#x73;m&#105;&#116;&#104;&#64;&#x65;&#x78;a&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get My Customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetMyCustomersAtAnyBank(options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV210>> {
        return CustomerApiFp(this.configuration).oBPv500GetMyCustomersAtAnyBank(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Returns a list of Customers at the Bank that are linked to the currently authenticated User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;ai&#108;&#116;o:&#x66;el&#105;&#x78;&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;xa&#x6d;p&#108;e&#46;&#x63;&#x6f;&#x6d;\">&#x66;el&#105;&#120;&#115;&#x6d;&#105;t&#104;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;m</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get My Customers at Bank
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500GetMyCustomersAtBank(BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJSONs>> {
        return CustomerApiFp(this.configuration).oBPv500GetMyCustomersAtBank(BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Update Customer Account Link by CUSTOMER_ACCOUNT_LINK_ID</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><a href=\"/glossary#\">CUSTOMER_ACCOUNT_LINK_ID</a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>customer_account_link_id</strong></a>: xyz8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>relationship_type</strong></a>: Owner</p>
     * @summary Update Customer Account Link by Id
     * @param {UpdateCustomerAccountLinkJson} body UpdateCustomerAccountLinkJson object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv500UpdateCustomerAccountLinkById(body: UpdateCustomerAccountLinkJson, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerAccountLinkJson>> {
        return CustomerApiFp(this.configuration).oBPv500UpdateCustomerAccountLinkById(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
     * @summary Create Agent
     * @param {PostAgentJsonV510} body PostAgentJsonV510 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv510CreateAgent(body: PostAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AgentJsonV510>> {
        return CustomerApiFp(this.configuration).oBPv510CreateAgent(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets the Customers specified by Legal Name.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"m&#97;&#105;lto&#58;&#x66;&#x65;&#x6c;i&#x78;&#115;&#109;&#105;t&#104;&#64;&#x65;x&#x61;&#x6d;&#112;l&#101;&#x2e;&#99;o&#x6d;\">&#102;&#101;&#x6c;ix&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#x65;&#120;&#x61;m&#x70;&#108;e&#46;&#99;&#x6f;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customers by Legal Name
     * @param {PostCustomerLegalNameJsonV510} body PostCustomerLegalNameJsonV510 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv510GetCustomersByLegalName(body: PostCustomerLegalNameJsonV510, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomerJsonV310>> {
        return CustomerApiFp(this.configuration).oBPv510GetCustomersByLegalName(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Gets all Customers Ids that are linked to a User.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>amount</strong></a>: 10.12</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>branch_id</strong></a>: DERBY6</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>customer_attribute_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#customer_attributes\"><strong>customer_attributes</strong></a>:</p><p><a href=\"/glossary#\"><strong>customer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>customer_number</strong></a>: 5987953</p><p><a href=\"/glossary#customers\"><strong>customers</strong></a>:</p><p><a href=\"/glossary#\"><strong>date</strong></a>: 2020-01-27</p><p><a href=\"/glossary#\"><strong>date_of_birth</strong></a>: 2018-03-09</p><p><a href=\"/glossary#\"><strong>dependants</strong></a>: 1</p><p><a href=\"/glossary#dob_of_dependants\"><strong>dob_of_dependants</strong></a>: [2019-09-08, 2017-07-12]</p><p><a href=\"/glossary#\"><strong>email</strong></a>: <a href=\"&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x66;&#x65;&#x6c;&#105;&#120;&#115;&#109;&#x69;&#116;&#x68;@&#x65;&#x78;&#97;&#109;&#112;&#108;e&#46;&#99;&#x6f;&#x6d;\">f&#101;l&#105;&#120;s&#x6d;&#x69;&#116;&#x68;&#64;&#101;x&#97;m&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;</a></p><p><a href=\"/glossary#\"><strong>employment_status</strong></a>: worker</p><p><a href=\"/glossary#face_image\"><strong>face_image</strong></a>:</p><p><a href=\"/glossary#\"><strong>highest_education_attained</strong></a>: Master</p><p><a href=\"/glossary#\"><strong>kyc_status</strong></a>: false</p><p><a href=\"/glossary#last_ok_date\"><strong>last_ok_date</strong></a>: 2024-03-24T11:36:34.541Z</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p><p><a href=\"/glossary#name\"><strong>name</strong></a>: ACCOUNT_MANAGEMENT_FEE</p><p><a href=\"/glossary#\"><strong>name_suffix</strong></a>: Sr</p><p><a href=\"/glossary#\"><strong>rating</strong></a>:</p><p><a href=\"/glossary#\"><strong>relationship_status</strong></a>: single</p><p><a href=\"/glossary#\"><strong>source</strong></a>:</p><p><a href=\"/glossary#\"><strong>title</strong></a>: Dr.</p><p><a href=\"/glossary#type\"><strong>type</strong></a>:</p><p><a href=\"/glossary#\"><strong>url</strong></a>: <a href=\"http://www.example.com/id-docs/123/image.png\">http://www.example.com/id-docs/123/image.png</a></p><p><a href=\"/glossary#\"><strong>value</strong></a>: 5987953</p><p><a href=\"/glossary#credit_limit\">credit_limit</a>:</p><p><a href=\"/glossary#credit_rating\">credit_rating</a>:</p>
     * @summary Get Customers for Current User (IDs only)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv510GetCustomersForUserIdsOnly(options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomersWithAttributesJsonV300>> {
        return CustomerApiFp(this.configuration).oBPv510GetCustomersForUserIdsOnly(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#\">AGENT_ID</a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#Bank.bank_id\">BANK_ID</a>: gh.29.uk</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>agent_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#\"><strong>agent_number</strong></a>: 5987953</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>is_confirmed_agent</strong></a>: is_confirmed_agent</p><p><a href=\"/glossary#\"><strong>is_pending_agent</strong></a>: is_pending_agent</p><p><a href=\"/glossary#\"><strong>legal_name</strong></a>: Eveline Tripman</p><p><a href=\"/glossary#mobile_phone_number\"><strong>mobile_phone_number</strong></a>: +49 30 901820</p>
     * @summary Update Agent status
     * @param {PutAgentJsonV510} body PutAgentJsonV510 object that needs to be added.
     * @param {string} BANK_ID The bank id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async oBPv510UpdateAgentStatus(body: PutAgentJsonV510, BANK_ID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AgentJsonV510>> {
        return CustomerApiFp(this.configuration).oBPv510UpdateAgentStatus(body, BANK_ID, options).then((request) => request(this.axios, this.basePath));
    }
}
