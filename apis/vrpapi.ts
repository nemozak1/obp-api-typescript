/* tslint:disable */
/* eslint-disable */
/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2025. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v5.1.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ConsentJsonV500 } from '../models';
import { ConsentRequestResponseJson } from '../models';
import { ErrorInvalidJsonFormat } from '../models';
import { ErrorUserNotLoggedIn } from '../models';
import { PostVRPConsentRequestJsonV510 } from '../models';
/**
 * VRPApi - axios parameter creator
 * @export
 */
export const VRPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;&#x69;l&#x74;&#x6f;&#58;feli&#x78;&#115;&#109;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#99;o&#109;\">&#102;&#101;&#x6c;&#x69;x&#115;&#109;&#x69;&#116;&#104;&#x40;&#101;x&#x61;mp&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv500CreateConsentByConsentRequestIdEmail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obp/v5.0.0/consumer/consent-requests/CONSENT_REQUEST_ID/EMAIL/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#x6f;&#58;&#102;&#101;l&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#x6c;i&#x78;&#x73;&#x6d;&#105;&#x74;&#104;@&#x65;&#x78;amp&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request VRP
         * @param {PostVRPConsentRequestJsonV510} body PostVRPConsentRequestJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oBPv510CreateVRPConsentRequest: async (body: PostVRPConsentRequestJsonV510, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oBPv510CreateVRPConsentRequest.');
            }
            const localVarPath = `/obp/v5.1.0/consumer/vrp-consent-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication directLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication gatewayLogin required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VRPApi - functional programming interface
 * @export
 */
export const VRPApiFp = function(configuration?: Configuration) {
    return {
        /**
         * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;&#x69;l&#x74;&#x6f;&#58;feli&#x78;&#115;&#109;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#99;o&#109;\">&#102;&#101;&#x6c;&#x69;x&#115;&#109;&#x69;&#116;&#104;&#x40;&#101;x&#x61;mp&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdEmail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ConsentJsonV500>>> {
            const localVarAxiosArgs = await VRPApiAxiosParamCreator(configuration).oBPv500CreateConsentByConsentRequestIdEmail(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#x6f;&#58;&#102;&#101;l&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#x6c;i&#x78;&#x73;&#x6d;&#105;&#x74;&#104;@&#x65;&#x78;amp&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request VRP
         * @param {PostVRPConsentRequestJsonV510} body PostVRPConsentRequestJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateVRPConsentRequest(body: PostVRPConsentRequestJsonV510, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ConsentRequestResponseJson>>> {
            const localVarAxiosArgs = await VRPApiAxiosParamCreator(configuration).oBPv510CreateVRPConsentRequest(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VRPApi - factory interface
 * @export
 */
export const VRPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;&#x69;l&#x74;&#x6f;&#58;feli&#x78;&#115;&#109;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#99;o&#109;\">&#102;&#101;&#x6c;&#x69;x&#115;&#109;&#x69;&#116;&#104;&#x40;&#101;x&#x61;mp&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
         * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv500CreateConsentByConsentRequestIdEmail(options?: AxiosRequestConfig): Promise<AxiosResponse<ConsentJsonV500>> {
            return VRPApiFp(configuration).oBPv500CreateConsentByConsentRequestIdEmail(options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#x6f;&#58;&#102;&#101;l&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#x6c;i&#x78;&#x73;&#x6d;&#105;&#x74;&#104;@&#x65;&#x78;amp&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
         * @summary Create Consent Request VRP
         * @param {PostVRPConsentRequestJsonV510} body PostVRPConsentRequestJsonV510 object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oBPv510CreateVRPConsentRequest(body: PostVRPConsentRequestJsonV510, options?: AxiosRequestConfig): Promise<AxiosResponse<ConsentRequestResponseJson>> {
            return VRPApiFp(configuration).oBPv510CreateVRPConsentRequest(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VRPApi - object-oriented interface
 * @export
 * @class VRPApi
 * @extends {BaseAPI}
 */
export class VRPApi extends BaseAPI {
    /**
     * <p>This endpoint continues the process of creating a Consent.</p><p>It starts the SCA flow which changes the status of the consent from INITIATED to ACCEPTED or REJECTED.</p><p>Please note that the Consent cannot elevate the privileges of the logged in user.</p><p>User Authentication is Required. The User must be logged in. The Application must also be authenticated.</p><p><strong>URL Parameters:</strong></p><p><a href=\"/glossary#consent_request_id\">CONSENT_REQUEST_ID</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">EMAIL</a>: <a href=\"&#109;&#x61;&#x69;l&#x74;&#x6f;&#58;feli&#x78;&#115;&#109;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#99;o&#109;\">&#102;&#101;&#x6c;&#x69;x&#115;&#109;&#x69;&#116;&#104;&#x40;&#101;x&#x61;mp&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a></p><p><strong>JSON request body fields:</strong></p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#\"><strong>account_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>bank_id</strong></a>: gh.29.uk</p><p><a href=\"/glossary#consent_id\"><strong>consent_id</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_ids</strong></a>: counterparty_ids</p><p><a href=\"/glossary#jwt\"><strong>jwt</strong></a>:</p><p><a href=\"/glossary#status\"><strong>status</strong></a>:</p><p><a href=\"/glossary#\"><strong>view_id</strong></a>: owner</p><p><a href=\"/glossary#\">account_access</a>: account_access</p><p><a href=\"/glossary#consent_request_id\">consent_request_id</a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\">helper_info</a>: helper_info</p>
     * @summary Create Consent By CONSENT_REQUEST_ID (EMAIL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VRPApi
     */
    public async oBPv500CreateConsentByConsentRequestIdEmail(options?: AxiosRequestConfig) : Promise<AxiosResponse<ConsentJsonV500>> {
        return VRPApiFp(this.configuration).oBPv500CreateConsentByConsentRequestIdEmail(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint is used to begin the process of creating a consent that may be used for Variable Recurring Payments (VRPs).</p><p>VRPs are useful in situations when a beneficiary needs to be paid different amounts on a regular basis.</p><p>Once granted, the consent allows its holder to initiate multiple Transaction Requests to the Counterparty defined in this endpoint as long as the<br />Counterparty Limits linked to this particular consent are respected.</p><p>Client, Consumer or Application Authentication is mandatory for this endpoint.</p><p>i.e. the caller of this endpoint is the API Client, Consumer or Application rather than a specific User.</p><p>At the end of the process the following objects are created in OBP or connected backend systems:<br />- An automatically generated View which controls access.<br />- A Counterparty that is the Beneficiary of the Variable Recurring Payments. The Counterparty specifies the Bank Account number or other routing address.<br />- Limits for the Counterparty which constrain the amount of money that can be sent to it in various periods (yearly, monthly, weekly).</p><p>The Account holder may modify the Counterparty or Limits e.g. to increase or decrease the maximum possible payment amounts or the frequencey of the payments.</p><p>In the case of a public client we use the client_id and private key to obtain an access token, otherwise we use the client_id and client_secret.<br />The obtained access token is used in the HTTP Authorization header of the request as follows:</p><p>Example:<br />Authorization: Bearer eXtneO-THbQtn3zvK_kQtXXfvOZyZFdBCItlPDbR2Bk.dOWqtXCtFX-tqGTVR0YrIjvAolPIVg7GZ-jz83y6nA0</p><p>After successfully creating the VRP consent request, you need to call the <code>Create Consent By CONSENT_REQUEST_ID</code> endpoint to finalize the consent using the CONSENT_REQUEST_ID returned by this endpoint.</p><p>Application Access is Required. The Application must be authenticated.</p><p>User Authentication is Optional. The User need not be logged in.</p><p><strong>JSON request body fields:</strong></p><p><a href=\"/glossary#account_routing\"><strong>account_routing</strong></a>:</p><p><a href=\"/glossary#address\"><strong>address</strong></a>:</p><p><a href=\"/glossary#bank_routing\"><strong>bank_routing</strong></a>:</p><p><a href=\"/glossary#branch_routing\"><strong>branch_routing</strong></a>:</p><p><a href=\"/glossary#\"><strong>counterparty_name</strong></a>: John Smith Ltd.</p><p><a href=\"/glossary#\"><strong>currency</strong></a>: EUR</p><p><a href=\"/glossary#\"><strong>from_account</strong></a>: from_account</p><p><a href=\"/glossary#\"><strong>limit</strong></a>: 100</p><p><a href=\"/glossary#max_monthly_amount\"><strong>max_monthly_amount</strong></a>: 10000.11</p><p><a href=\"/glossary#max_number_of_monthly_transactions\"><strong>max_number_of_monthly_transactions</strong></a>: 10</p><p><a href=\"/glossary#max_number_of_transactions\"><strong>max_number_of_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_number_of_yearly_transactions\"><strong>max_number_of_yearly_transactions</strong></a>: 100</p><p><a href=\"/glossary#max_single_amount\"><strong>max_single_amount</strong></a>: 1000.11</p><p><a href=\"/glossary#max_total_amount\"><strong>max_total_amount</strong></a>: 10000.12</p><p><a href=\"/glossary#max_yearly_amount\"><strong>max_yearly_amount</strong></a>: 12000.11</p><p><a href=\"/glossary#scheme\"><strong>scheme</strong></a>: OBP</p><p><a href=\"/glossary#\"><strong>to_account</strong></a>: to_account</p><p><a href=\"/glossary#\">email</a>: <a href=\"&#x6d;&#97;&#105;l&#x74;&#x6f;&#58;&#102;&#101;l&#x69;&#120;&#x73;&#x6d;&#x69;&#116;&#x68;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;\">&#x66;&#x65;&#x6c;i&#x78;&#x73;&#x6d;&#105;&#x74;&#104;@&#x65;&#x78;amp&#108;&#x65;.&#99;&#111;&#x6d;</a></p><p><a href=\"/glossary#phone_number\">phone_number</a>:</p><p><a href=\"/glossary#time_to_live\">time_to_live</a>:</p><p><a href=\"/glossary#valid_from\">valid_from</a>: 2020-01-27</p><p><strong>JSON response body fields:</strong></p><p><a href=\"/glossary#consent_request_id\"><strong>consent_request_id</strong></a>: 8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0</p><p><a href=\"/glossary#\"><strong>consumer_id</strong></a>: 7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh</p><p><a href=\"/glossary#payload\"><strong>payload</strong></a>: payload</p>
     * @summary Create Consent Request VRP
     * @param {PostVRPConsentRequestJsonV510} body PostVRPConsentRequestJsonV510 object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VRPApi
     */
    public async oBPv510CreateVRPConsentRequest(body: PostVRPConsentRequestJsonV510, options?: AxiosRequestConfig) : Promise<AxiosResponse<ConsentRequestResponseJson>> {
        return VRPApiFp(this.configuration).oBPv510CreateVRPConsentRequest(body, options).then((request) => request(this.axios, this.basePath));
    }
}
